// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ipc/ipc.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ipc/ipc.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace mozc {
namespace ipc {

namespace {

const ::google::protobuf::Descriptor* IPCPathInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IPCPathInfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ipc_2fipc_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_ipc_2fipc_2eproto() {
  protobuf_AddDesc_ipc_2fipc_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ipc/ipc.proto");
  GOOGLE_CHECK(file != NULL);
  IPCPathInfo_descriptor_ = file->message_type(0);
  static const int IPCPathInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IPCPathInfo, protocol_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IPCPathInfo, product_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IPCPathInfo, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IPCPathInfo, process_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IPCPathInfo, thread_id_),
  };
  IPCPathInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      IPCPathInfo_descriptor_,
      IPCPathInfo::default_instance_,
      IPCPathInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IPCPathInfo, _has_bits_[0]),
      -1,
      -1,
      sizeof(IPCPathInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IPCPathInfo, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ipc_2fipc_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      IPCPathInfo_descriptor_, &IPCPathInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ipc_2fipc_2eproto() {
  delete IPCPathInfo::default_instance_;
  delete IPCPathInfo_reflection_;
  delete IPCPathInfo::_default_product_version_;
}

void protobuf_AddDesc_ipc_2fipc_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_ipc_2fipc_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\ripc/ipc.proto\022\010mozc.ipc\"\206\001\n\013IPCPathInf"
    "o\022\033\n\020protocol_version\030\004 \001(\r:\0010\022 \n\017produc"
    "t_version\030\005 \001(\t:\0070.0.0.0\022\013\n\003key\030\001 \001(\t\022\025\n"
    "\nprocess_id\030\002 \001(\r:\0010\022\024\n\tthread_id\030\003 \001(\r:"
    "\0010", 162);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ipc/ipc.proto", &protobuf_RegisterTypes);
  IPCPathInfo::_default_product_version_ =
      new ::std::string("0.0.0.0", 7);
  IPCPathInfo::default_instance_ = new IPCPathInfo();
  IPCPathInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ipc_2fipc_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ipc_2fipc_2eproto {
  StaticDescriptorInitializer_ipc_2fipc_2eproto() {
    protobuf_AddDesc_ipc_2fipc_2eproto();
  }
} static_descriptor_initializer_ipc_2fipc_2eproto_;

// ===================================================================

::std::string* IPCPathInfo::_default_product_version_ = NULL;
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IPCPathInfo::kProtocolVersionFieldNumber;
const int IPCPathInfo::kProductVersionFieldNumber;
const int IPCPathInfo::kKeyFieldNumber;
const int IPCPathInfo::kProcessIdFieldNumber;
const int IPCPathInfo::kThreadIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IPCPathInfo::IPCPathInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mozc.ipc.IPCPathInfo)
}

void IPCPathInfo::InitAsDefaultInstance() {
}

IPCPathInfo::IPCPathInfo(const IPCPathInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mozc.ipc.IPCPathInfo)
}

void IPCPathInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  protocol_version_ = 0u;
  product_version_.UnsafeSetDefault(_default_product_version_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  process_id_ = 0u;
  thread_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IPCPathInfo::~IPCPathInfo() {
  // @@protoc_insertion_point(destructor:mozc.ipc.IPCPathInfo)
  SharedDtor();
}

void IPCPathInfo::SharedDtor() {
  product_version_.DestroyNoArena(_default_product_version_);
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void IPCPathInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IPCPathInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IPCPathInfo_descriptor_;
}

const IPCPathInfo& IPCPathInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ipc_2fipc_2eproto();
  return *default_instance_;
}

IPCPathInfo* IPCPathInfo::default_instance_ = NULL;

IPCPathInfo* IPCPathInfo::New(::google::protobuf::Arena* arena) const {
  IPCPathInfo* n = new IPCPathInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IPCPathInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:mozc.ipc.IPCPathInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(IPCPathInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<IPCPathInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 31u) {
    ZR_(protocol_version_, process_id_);
    if (has_product_version()) {
      product_version_.ClearToDefaultNoArena(_default_product_version_);
    }
    if (has_key()) {
      key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    thread_id_ = 0u;
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool IPCPathInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mozc.ipc.IPCPathInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mozc.ipc.IPCPathInfo.key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_process_id;
        break;
      }

      // optional uint32 process_id = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_process_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &process_id_)));
          set_has_process_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_thread_id;
        break;
      }

      // optional uint32 thread_id = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_thread_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &thread_id_)));
          set_has_thread_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_protocol_version;
        break;
      }

      // optional uint32 protocol_version = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_protocol_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &protocol_version_)));
          set_has_protocol_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_product_version;
        break;
      }

      // optional string product_version = 5 [default = "0.0.0.0"];
      case 5: {
        if (tag == 42) {
         parse_product_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_product_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->product_version().data(), this->product_version().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mozc.ipc.IPCPathInfo.product_version");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mozc.ipc.IPCPathInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mozc.ipc.IPCPathInfo)
  return false;
#undef DO_
}

void IPCPathInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mozc.ipc.IPCPathInfo)
  // optional string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mozc.ipc.IPCPathInfo.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // optional uint32 process_id = 2 [default = 0];
  if (has_process_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->process_id(), output);
  }

  // optional uint32 thread_id = 3 [default = 0];
  if (has_thread_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->thread_id(), output);
  }

  // optional uint32 protocol_version = 4 [default = 0];
  if (has_protocol_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->protocol_version(), output);
  }

  // optional string product_version = 5 [default = "0.0.0.0"];
  if (has_product_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->product_version().data(), this->product_version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mozc.ipc.IPCPathInfo.product_version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->product_version(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mozc.ipc.IPCPathInfo)
}

::google::protobuf::uint8* IPCPathInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mozc.ipc.IPCPathInfo)
  // optional string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mozc.ipc.IPCPathInfo.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // optional uint32 process_id = 2 [default = 0];
  if (has_process_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->process_id(), target);
  }

  // optional uint32 thread_id = 3 [default = 0];
  if (has_thread_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->thread_id(), target);
  }

  // optional uint32 protocol_version = 4 [default = 0];
  if (has_protocol_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->protocol_version(), target);
  }

  // optional string product_version = 5 [default = "0.0.0.0"];
  if (has_product_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->product_version().data(), this->product_version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mozc.ipc.IPCPathInfo.product_version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->product_version(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mozc.ipc.IPCPathInfo)
  return target;
}

int IPCPathInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:mozc.ipc.IPCPathInfo)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 31u) {
    // optional uint32 protocol_version = 4 [default = 0];
    if (has_protocol_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->protocol_version());
    }

    // optional string product_version = 5 [default = "0.0.0.0"];
    if (has_product_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->product_version());
    }

    // optional string key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // optional uint32 process_id = 2 [default = 0];
    if (has_process_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->process_id());
    }

    // optional uint32 thread_id = 3 [default = 0];
    if (has_thread_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->thread_id());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IPCPathInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mozc.ipc.IPCPathInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const IPCPathInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const IPCPathInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mozc.ipc.IPCPathInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mozc.ipc.IPCPathInfo)
    MergeFrom(*source);
  }
}

void IPCPathInfo::MergeFrom(const IPCPathInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mozc.ipc.IPCPathInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protocol_version()) {
      set_protocol_version(from.protocol_version());
    }
    if (from.has_product_version()) {
      set_has_product_version();
      product_version_.AssignWithDefault(_default_product_version_, from.product_version_);
    }
    if (from.has_key()) {
      set_has_key();
      key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
    }
    if (from.has_process_id()) {
      set_process_id(from.process_id());
    }
    if (from.has_thread_id()) {
      set_thread_id(from.thread_id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void IPCPathInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mozc.ipc.IPCPathInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IPCPathInfo::CopyFrom(const IPCPathInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mozc.ipc.IPCPathInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IPCPathInfo::IsInitialized() const {

  return true;
}

void IPCPathInfo::Swap(IPCPathInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IPCPathInfo::InternalSwap(IPCPathInfo* other) {
  std::swap(protocol_version_, other->protocol_version_);
  product_version_.Swap(&other->product_version_);
  key_.Swap(&other->key_);
  std::swap(process_id_, other->process_id_);
  std::swap(thread_id_, other->thread_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata IPCPathInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IPCPathInfo_descriptor_;
  metadata.reflection = IPCPathInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IPCPathInfo

// optional uint32 protocol_version = 4 [default = 0];
bool IPCPathInfo::has_protocol_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void IPCPathInfo::set_has_protocol_version() {
  _has_bits_[0] |= 0x00000001u;
}
void IPCPathInfo::clear_has_protocol_version() {
  _has_bits_[0] &= ~0x00000001u;
}
void IPCPathInfo::clear_protocol_version() {
  protocol_version_ = 0u;
  clear_has_protocol_version();
}
 ::google::protobuf::uint32 IPCPathInfo::protocol_version() const {
  // @@protoc_insertion_point(field_get:mozc.ipc.IPCPathInfo.protocol_version)
  return protocol_version_;
}
 void IPCPathInfo::set_protocol_version(::google::protobuf::uint32 value) {
  set_has_protocol_version();
  protocol_version_ = value;
  // @@protoc_insertion_point(field_set:mozc.ipc.IPCPathInfo.protocol_version)
}

// optional string product_version = 5 [default = "0.0.0.0"];
bool IPCPathInfo::has_product_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void IPCPathInfo::set_has_product_version() {
  _has_bits_[0] |= 0x00000002u;
}
void IPCPathInfo::clear_has_product_version() {
  _has_bits_[0] &= ~0x00000002u;
}
void IPCPathInfo::clear_product_version() {
  product_version_.ClearToDefaultNoArena(_default_product_version_);
  clear_has_product_version();
}
 const ::std::string& IPCPathInfo::product_version() const {
  // @@protoc_insertion_point(field_get:mozc.ipc.IPCPathInfo.product_version)
  return product_version_.GetNoArena(_default_product_version_);
}
 void IPCPathInfo::set_product_version(const ::std::string& value) {
  set_has_product_version();
  product_version_.SetNoArena(_default_product_version_, value);
  // @@protoc_insertion_point(field_set:mozc.ipc.IPCPathInfo.product_version)
}
 void IPCPathInfo::set_product_version(const char* value) {
  set_has_product_version();
  product_version_.SetNoArena(_default_product_version_, ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mozc.ipc.IPCPathInfo.product_version)
}
 void IPCPathInfo::set_product_version(const char* value, size_t size) {
  set_has_product_version();
  product_version_.SetNoArena(_default_product_version_,
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mozc.ipc.IPCPathInfo.product_version)
}
 ::std::string* IPCPathInfo::mutable_product_version() {
  set_has_product_version();
  // @@protoc_insertion_point(field_mutable:mozc.ipc.IPCPathInfo.product_version)
  return product_version_.MutableNoArena(_default_product_version_);
}
 ::std::string* IPCPathInfo::release_product_version() {
  // @@protoc_insertion_point(field_release:mozc.ipc.IPCPathInfo.product_version)
  clear_has_product_version();
  return product_version_.ReleaseNoArena(_default_product_version_);
}
 void IPCPathInfo::set_allocated_product_version(::std::string* product_version) {
  if (product_version != NULL) {
    set_has_product_version();
  } else {
    clear_has_product_version();
  }
  product_version_.SetAllocatedNoArena(_default_product_version_, product_version);
  // @@protoc_insertion_point(field_set_allocated:mozc.ipc.IPCPathInfo.product_version)
}

// optional string key = 1;
bool IPCPathInfo::has_key() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void IPCPathInfo::set_has_key() {
  _has_bits_[0] |= 0x00000004u;
}
void IPCPathInfo::clear_has_key() {
  _has_bits_[0] &= ~0x00000004u;
}
void IPCPathInfo::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
 const ::std::string& IPCPathInfo::key() const {
  // @@protoc_insertion_point(field_get:mozc.ipc.IPCPathInfo.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void IPCPathInfo::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mozc.ipc.IPCPathInfo.key)
}
 void IPCPathInfo::set_key(const char* value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mozc.ipc.IPCPathInfo.key)
}
 void IPCPathInfo::set_key(const char* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mozc.ipc.IPCPathInfo.key)
}
 ::std::string* IPCPathInfo::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:mozc.ipc.IPCPathInfo.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* IPCPathInfo::release_key() {
  // @@protoc_insertion_point(field_release:mozc.ipc.IPCPathInfo.key)
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void IPCPathInfo::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:mozc.ipc.IPCPathInfo.key)
}

// optional uint32 process_id = 2 [default = 0];
bool IPCPathInfo::has_process_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void IPCPathInfo::set_has_process_id() {
  _has_bits_[0] |= 0x00000008u;
}
void IPCPathInfo::clear_has_process_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void IPCPathInfo::clear_process_id() {
  process_id_ = 0u;
  clear_has_process_id();
}
 ::google::protobuf::uint32 IPCPathInfo::process_id() const {
  // @@protoc_insertion_point(field_get:mozc.ipc.IPCPathInfo.process_id)
  return process_id_;
}
 void IPCPathInfo::set_process_id(::google::protobuf::uint32 value) {
  set_has_process_id();
  process_id_ = value;
  // @@protoc_insertion_point(field_set:mozc.ipc.IPCPathInfo.process_id)
}

// optional uint32 thread_id = 3 [default = 0];
bool IPCPathInfo::has_thread_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void IPCPathInfo::set_has_thread_id() {
  _has_bits_[0] |= 0x00000010u;
}
void IPCPathInfo::clear_has_thread_id() {
  _has_bits_[0] &= ~0x00000010u;
}
void IPCPathInfo::clear_thread_id() {
  thread_id_ = 0u;
  clear_has_thread_id();
}
 ::google::protobuf::uint32 IPCPathInfo::thread_id() const {
  // @@protoc_insertion_point(field_get:mozc.ipc.IPCPathInfo.thread_id)
  return thread_id_;
}
 void IPCPathInfo::set_thread_id(::google::protobuf::uint32 value) {
  set_has_thread_id();
  thread_id_ = value;
  // @@protoc_insertion_point(field_set:mozc.ipc.IPCPathInfo.thread_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace ipc
}  // namespace mozc

// @@protoc_insertion_point(global_scope)
