// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ipc/ipc.proto

#ifndef PROTOBUF_ipc_2fipc_2eproto__INCLUDED
#define PROTOBUF_ipc_2fipc_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace mozc {
namespace ipc {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_ipc_2fipc_2eproto();
void protobuf_AssignDesc_ipc_2fipc_2eproto();
void protobuf_ShutdownFile_ipc_2fipc_2eproto();

class IPCPathInfo;

// ===================================================================

class IPCPathInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mozc.ipc.IPCPathInfo) */ {
 public:
  IPCPathInfo();
  virtual ~IPCPathInfo();

  IPCPathInfo(const IPCPathInfo& from);

  inline IPCPathInfo& operator=(const IPCPathInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IPCPathInfo& default_instance();

  void Swap(IPCPathInfo* other);

  // implements Message ----------------------------------------------

  inline IPCPathInfo* New() const { return New(NULL); }

  IPCPathInfo* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IPCPathInfo& from);
  void MergeFrom(const IPCPathInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IPCPathInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 protocol_version = 4 [default = 0];
  bool has_protocol_version() const;
  void clear_protocol_version();
  static const int kProtocolVersionFieldNumber = 4;
  ::google::protobuf::uint32 protocol_version() const;
  void set_protocol_version(::google::protobuf::uint32 value);

  // optional string product_version = 5 [default = "0.0.0.0"];
  bool has_product_version() const;
  void clear_product_version();
  static const int kProductVersionFieldNumber = 5;
  const ::std::string& product_version() const;
  void set_product_version(const ::std::string& value);
  void set_product_version(const char* value);
  void set_product_version(const char* value, size_t size);
  ::std::string* mutable_product_version();
  ::std::string* release_product_version();
  void set_allocated_product_version(::std::string* product_version);

  // optional string key = 1;
  bool has_key() const;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // optional uint32 process_id = 2 [default = 0];
  bool has_process_id() const;
  void clear_process_id();
  static const int kProcessIdFieldNumber = 2;
  ::google::protobuf::uint32 process_id() const;
  void set_process_id(::google::protobuf::uint32 value);

  // optional uint32 thread_id = 3 [default = 0];
  bool has_thread_id() const;
  void clear_thread_id();
  static const int kThreadIdFieldNumber = 3;
  ::google::protobuf::uint32 thread_id() const;
  void set_thread_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:mozc.ipc.IPCPathInfo)
 private:
  inline void set_has_protocol_version();
  inline void clear_has_protocol_version();
  inline void set_has_product_version();
  inline void clear_has_product_version();
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_process_id();
  inline void clear_has_process_id();
  inline void set_has_thread_id();
  inline void clear_has_thread_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  static ::std::string* _default_product_version_;
  ::google::protobuf::internal::ArenaStringPtr product_version_;
  ::google::protobuf::uint32 protocol_version_;
  ::google::protobuf::uint32 process_id_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::google::protobuf::uint32 thread_id_;
  friend void  protobuf_AddDesc_ipc_2fipc_2eproto();
  friend void protobuf_AssignDesc_ipc_2fipc_2eproto();
  friend void protobuf_ShutdownFile_ipc_2fipc_2eproto();

  void InitAsDefaultInstance();
  static IPCPathInfo* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// IPCPathInfo

// optional uint32 protocol_version = 4 [default = 0];
inline bool IPCPathInfo::has_protocol_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IPCPathInfo::set_has_protocol_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IPCPathInfo::clear_has_protocol_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IPCPathInfo::clear_protocol_version() {
  protocol_version_ = 0u;
  clear_has_protocol_version();
}
inline ::google::protobuf::uint32 IPCPathInfo::protocol_version() const {
  // @@protoc_insertion_point(field_get:mozc.ipc.IPCPathInfo.protocol_version)
  return protocol_version_;
}
inline void IPCPathInfo::set_protocol_version(::google::protobuf::uint32 value) {
  set_has_protocol_version();
  protocol_version_ = value;
  // @@protoc_insertion_point(field_set:mozc.ipc.IPCPathInfo.protocol_version)
}

// optional string product_version = 5 [default = "0.0.0.0"];
inline bool IPCPathInfo::has_product_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IPCPathInfo::set_has_product_version() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IPCPathInfo::clear_has_product_version() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IPCPathInfo::clear_product_version() {
  product_version_.ClearToDefaultNoArena(_default_product_version_);
  clear_has_product_version();
}
inline const ::std::string& IPCPathInfo::product_version() const {
  // @@protoc_insertion_point(field_get:mozc.ipc.IPCPathInfo.product_version)
  return product_version_.GetNoArena(_default_product_version_);
}
inline void IPCPathInfo::set_product_version(const ::std::string& value) {
  set_has_product_version();
  product_version_.SetNoArena(_default_product_version_, value);
  // @@protoc_insertion_point(field_set:mozc.ipc.IPCPathInfo.product_version)
}
inline void IPCPathInfo::set_product_version(const char* value) {
  set_has_product_version();
  product_version_.SetNoArena(_default_product_version_, ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mozc.ipc.IPCPathInfo.product_version)
}
inline void IPCPathInfo::set_product_version(const char* value, size_t size) {
  set_has_product_version();
  product_version_.SetNoArena(_default_product_version_,
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mozc.ipc.IPCPathInfo.product_version)
}
inline ::std::string* IPCPathInfo::mutable_product_version() {
  set_has_product_version();
  // @@protoc_insertion_point(field_mutable:mozc.ipc.IPCPathInfo.product_version)
  return product_version_.MutableNoArena(_default_product_version_);
}
inline ::std::string* IPCPathInfo::release_product_version() {
  // @@protoc_insertion_point(field_release:mozc.ipc.IPCPathInfo.product_version)
  clear_has_product_version();
  return product_version_.ReleaseNoArena(_default_product_version_);
}
inline void IPCPathInfo::set_allocated_product_version(::std::string* product_version) {
  if (product_version != NULL) {
    set_has_product_version();
  } else {
    clear_has_product_version();
  }
  product_version_.SetAllocatedNoArena(_default_product_version_, product_version);
  // @@protoc_insertion_point(field_set_allocated:mozc.ipc.IPCPathInfo.product_version)
}

// optional string key = 1;
inline bool IPCPathInfo::has_key() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IPCPathInfo::set_has_key() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IPCPathInfo::clear_has_key() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IPCPathInfo::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
inline const ::std::string& IPCPathInfo::key() const {
  // @@protoc_insertion_point(field_get:mozc.ipc.IPCPathInfo.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IPCPathInfo::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mozc.ipc.IPCPathInfo.key)
}
inline void IPCPathInfo::set_key(const char* value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mozc.ipc.IPCPathInfo.key)
}
inline void IPCPathInfo::set_key(const char* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mozc.ipc.IPCPathInfo.key)
}
inline ::std::string* IPCPathInfo::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:mozc.ipc.IPCPathInfo.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IPCPathInfo::release_key() {
  // @@protoc_insertion_point(field_release:mozc.ipc.IPCPathInfo.key)
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IPCPathInfo::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:mozc.ipc.IPCPathInfo.key)
}

// optional uint32 process_id = 2 [default = 0];
inline bool IPCPathInfo::has_process_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IPCPathInfo::set_has_process_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IPCPathInfo::clear_has_process_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IPCPathInfo::clear_process_id() {
  process_id_ = 0u;
  clear_has_process_id();
}
inline ::google::protobuf::uint32 IPCPathInfo::process_id() const {
  // @@protoc_insertion_point(field_get:mozc.ipc.IPCPathInfo.process_id)
  return process_id_;
}
inline void IPCPathInfo::set_process_id(::google::protobuf::uint32 value) {
  set_has_process_id();
  process_id_ = value;
  // @@protoc_insertion_point(field_set:mozc.ipc.IPCPathInfo.process_id)
}

// optional uint32 thread_id = 3 [default = 0];
inline bool IPCPathInfo::has_thread_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IPCPathInfo::set_has_thread_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IPCPathInfo::clear_has_thread_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IPCPathInfo::clear_thread_id() {
  thread_id_ = 0u;
  clear_has_thread_id();
}
inline ::google::protobuf::uint32 IPCPathInfo::thread_id() const {
  // @@protoc_insertion_point(field_get:mozc.ipc.IPCPathInfo.thread_id)
  return thread_id_;
}
inline void IPCPathInfo::set_thread_id(::google::protobuf::uint32 value) {
  set_has_thread_id();
  thread_id_ = value;
  // @@protoc_insertion_point(field_set:mozc.ipc.IPCPathInfo.thread_id)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace ipc
}  // namespace mozc

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ipc_2fipc_2eproto__INCLUDED
