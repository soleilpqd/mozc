// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: prediction/user_history_predictor.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "prediction/user_history_predictor.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace mozc {
namespace user_history_predictor {

namespace {

const ::google::protobuf::Descriptor* UserHistory_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserHistory_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserHistory_NextEntry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserHistory_NextEntry_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserHistory_Entry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserHistory_Entry_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* UserHistory_Entry_EntryType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_prediction_2fuser_5fhistory_5fpredictor_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_prediction_2fuser_5fhistory_5fpredictor_2eproto() {
  protobuf_AddDesc_prediction_2fuser_5fhistory_5fpredictor_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "prediction/user_history_predictor.proto");
  GOOGLE_CHECK(file != NULL);
  UserHistory_descriptor_ = file->message_type(0);
  static const int UserHistory_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserHistory, entries_),
  };
  UserHistory_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      UserHistory_descriptor_,
      UserHistory::default_instance_,
      UserHistory_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserHistory, _has_bits_[0]),
      -1,
      -1,
      sizeof(UserHistory),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserHistory, _internal_metadata_),
      -1);
  UserHistory_NextEntry_descriptor_ = UserHistory_descriptor_->nested_type(0);
  static const int UserHistory_NextEntry_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserHistory_NextEntry, entry_fp_),
  };
  UserHistory_NextEntry_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      UserHistory_NextEntry_descriptor_,
      UserHistory_NextEntry::default_instance_,
      UserHistory_NextEntry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserHistory_NextEntry, _has_bits_[0]),
      -1,
      -1,
      sizeof(UserHistory_NextEntry),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserHistory_NextEntry, _internal_metadata_),
      -1);
  UserHistory_Entry_descriptor_ = UserHistory_descriptor_->nested_type(1);
  static const int UserHistory_Entry_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserHistory_Entry, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserHistory_Entry, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserHistory_Entry, description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserHistory_Entry, suggestion_freq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserHistory_Entry, conversion_freq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserHistory_Entry, last_access_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserHistory_Entry, next_entries_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserHistory_Entry, bigram_boost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserHistory_Entry, spelling_correction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserHistory_Entry, removed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserHistory_Entry, entry_type_),
  };
  UserHistory_Entry_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      UserHistory_Entry_descriptor_,
      UserHistory_Entry::default_instance_,
      UserHistory_Entry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserHistory_Entry, _has_bits_[0]),
      -1,
      -1,
      sizeof(UserHistory_Entry),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserHistory_Entry, _internal_metadata_),
      -1);
  UserHistory_Entry_EntryType_descriptor_ = UserHistory_Entry_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_prediction_2fuser_5fhistory_5fpredictor_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      UserHistory_descriptor_, &UserHistory::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      UserHistory_NextEntry_descriptor_, &UserHistory_NextEntry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      UserHistory_Entry_descriptor_, &UserHistory_Entry::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_prediction_2fuser_5fhistory_5fpredictor_2eproto() {
  delete UserHistory::default_instance_;
  delete UserHistory_reflection_;
  delete UserHistory_NextEntry::default_instance_;
  delete UserHistory_NextEntry_reflection_;
  delete UserHistory_Entry::default_instance_;
  delete UserHistory_Entry_reflection_;
}

void protobuf_AddDesc_prediction_2fuser_5fhistory_5fpredictor_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_prediction_2fuser_5fhistory_5fpredictor_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\'prediction/user_history_predictor.prot"
    "o\022\033mozc.user_history_predictor\"\323\004\n\013UserH"
    "istory\022\?\n\007entries\030\006 \003(\0132..mozc.user_hist"
    "ory_predictor.UserHistory.Entry\032 \n\tNextE"
    "ntry\022\023\n\010entry_fp\030\001 \001(\r:\0010\032\340\003\n\005Entry\022\r\n\003k"
    "ey\030\001 \001(\t:\000\022\017\n\005value\030\002 \001(\t:\000\022\025\n\013descripti"
    "on\030\006 \001(\t:\000\022\032\n\017suggestion_freq\030\003 \001(\r:\0010\022\032"
    "\n\017conversion_freq\030\005 \001(\r:\0010\022\033\n\020last_acces"
    "s_time\030\004 \001(\004:\0010\022H\n\014next_entries\030\007 \003(\01322."
    "mozc.user_history_predictor.UserHistory."
    "NextEntry\022\033\n\014bigram_boost\030\024 \001(\010:\005false\022\""
    "\n\023spelling_correction\030\025 \001(\010:\005false\022\026\n\007re"
    "moved\030\010 \001(\010:\005false\022[\n\nentry_type\030\t \001(\01628"
    ".mozc.user_history_predictor.UserHistory"
    ".Entry.EntryType:\rDEFAULT_ENTRY\"K\n\tEntry"
    "Type\022\021\n\rDEFAULT_ENTRY\020\000\022\023\n\017CLEAN_ALL_EVE"
    "NT\020\001\022\026\n\022CLEAN_UNUSED_EVENT\020\002", 668);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "prediction/user_history_predictor.proto", &protobuf_RegisterTypes);
  UserHistory::default_instance_ = new UserHistory();
  UserHistory_NextEntry::default_instance_ = new UserHistory_NextEntry();
  UserHistory_Entry::default_instance_ = new UserHistory_Entry();
  UserHistory::default_instance_->InitAsDefaultInstance();
  UserHistory_NextEntry::default_instance_->InitAsDefaultInstance();
  UserHistory_Entry::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_prediction_2fuser_5fhistory_5fpredictor_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_prediction_2fuser_5fhistory_5fpredictor_2eproto {
  StaticDescriptorInitializer_prediction_2fuser_5fhistory_5fpredictor_2eproto() {
    protobuf_AddDesc_prediction_2fuser_5fhistory_5fpredictor_2eproto();
  }
} static_descriptor_initializer_prediction_2fuser_5fhistory_5fpredictor_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserHistory_NextEntry::kEntryFpFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserHistory_NextEntry::UserHistory_NextEntry()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mozc.user_history_predictor.UserHistory.NextEntry)
}

void UserHistory_NextEntry::InitAsDefaultInstance() {
}

UserHistory_NextEntry::UserHistory_NextEntry(const UserHistory_NextEntry& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mozc.user_history_predictor.UserHistory.NextEntry)
}

void UserHistory_NextEntry::SharedCtor() {
  _cached_size_ = 0;
  entry_fp_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserHistory_NextEntry::~UserHistory_NextEntry() {
  // @@protoc_insertion_point(destructor:mozc.user_history_predictor.UserHistory.NextEntry)
  SharedDtor();
}

void UserHistory_NextEntry::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UserHistory_NextEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserHistory_NextEntry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserHistory_NextEntry_descriptor_;
}

const UserHistory_NextEntry& UserHistory_NextEntry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_prediction_2fuser_5fhistory_5fpredictor_2eproto();
  return *default_instance_;
}

UserHistory_NextEntry* UserHistory_NextEntry::default_instance_ = NULL;

UserHistory_NextEntry* UserHistory_NextEntry::New(::google::protobuf::Arena* arena) const {
  UserHistory_NextEntry* n = new UserHistory_NextEntry;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UserHistory_NextEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:mozc.user_history_predictor.UserHistory.NextEntry)
  entry_fp_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool UserHistory_NextEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mozc.user_history_predictor.UserHistory.NextEntry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 entry_fp = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &entry_fp_)));
          set_has_entry_fp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mozc.user_history_predictor.UserHistory.NextEntry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mozc.user_history_predictor.UserHistory.NextEntry)
  return false;
#undef DO_
}

void UserHistory_NextEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mozc.user_history_predictor.UserHistory.NextEntry)
  // optional uint32 entry_fp = 1 [default = 0];
  if (has_entry_fp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->entry_fp(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mozc.user_history_predictor.UserHistory.NextEntry)
}

::google::protobuf::uint8* UserHistory_NextEntry::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mozc.user_history_predictor.UserHistory.NextEntry)
  // optional uint32 entry_fp = 1 [default = 0];
  if (has_entry_fp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->entry_fp(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mozc.user_history_predictor.UserHistory.NextEntry)
  return target;
}

int UserHistory_NextEntry::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:mozc.user_history_predictor.UserHistory.NextEntry)
  int total_size = 0;

  // optional uint32 entry_fp = 1 [default = 0];
  if (has_entry_fp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->entry_fp());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserHistory_NextEntry::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mozc.user_history_predictor.UserHistory.NextEntry)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const UserHistory_NextEntry* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const UserHistory_NextEntry>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mozc.user_history_predictor.UserHistory.NextEntry)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mozc.user_history_predictor.UserHistory.NextEntry)
    MergeFrom(*source);
  }
}

void UserHistory_NextEntry::MergeFrom(const UserHistory_NextEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mozc.user_history_predictor.UserHistory.NextEntry)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_entry_fp()) {
      set_entry_fp(from.entry_fp());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void UserHistory_NextEntry::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mozc.user_history_predictor.UserHistory.NextEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserHistory_NextEntry::CopyFrom(const UserHistory_NextEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mozc.user_history_predictor.UserHistory.NextEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserHistory_NextEntry::IsInitialized() const {

  return true;
}

void UserHistory_NextEntry::Swap(UserHistory_NextEntry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserHistory_NextEntry::InternalSwap(UserHistory_NextEntry* other) {
  std::swap(entry_fp_, other->entry_fp_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserHistory_NextEntry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserHistory_NextEntry_descriptor_;
  metadata.reflection = UserHistory_NextEntry_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

const ::google::protobuf::EnumDescriptor* UserHistory_Entry_EntryType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserHistory_Entry_EntryType_descriptor_;
}
bool UserHistory_Entry_EntryType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const UserHistory_Entry_EntryType UserHistory_Entry::DEFAULT_ENTRY;
const UserHistory_Entry_EntryType UserHistory_Entry::CLEAN_ALL_EVENT;
const UserHistory_Entry_EntryType UserHistory_Entry::CLEAN_UNUSED_EVENT;
const UserHistory_Entry_EntryType UserHistory_Entry::EntryType_MIN;
const UserHistory_Entry_EntryType UserHistory_Entry::EntryType_MAX;
const int UserHistory_Entry::EntryType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserHistory_Entry::kKeyFieldNumber;
const int UserHistory_Entry::kValueFieldNumber;
const int UserHistory_Entry::kDescriptionFieldNumber;
const int UserHistory_Entry::kSuggestionFreqFieldNumber;
const int UserHistory_Entry::kConversionFreqFieldNumber;
const int UserHistory_Entry::kLastAccessTimeFieldNumber;
const int UserHistory_Entry::kNextEntriesFieldNumber;
const int UserHistory_Entry::kBigramBoostFieldNumber;
const int UserHistory_Entry::kSpellingCorrectionFieldNumber;
const int UserHistory_Entry::kRemovedFieldNumber;
const int UserHistory_Entry::kEntryTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserHistory_Entry::UserHistory_Entry()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mozc.user_history_predictor.UserHistory.Entry)
}

void UserHistory_Entry::InitAsDefaultInstance() {
}

UserHistory_Entry::UserHistory_Entry(const UserHistory_Entry& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mozc.user_history_predictor.UserHistory.Entry)
}

void UserHistory_Entry::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  suggestion_freq_ = 0u;
  conversion_freq_ = 0u;
  last_access_time_ = GOOGLE_ULONGLONG(0);
  bigram_boost_ = false;
  spelling_correction_ = false;
  removed_ = false;
  entry_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserHistory_Entry::~UserHistory_Entry() {
  // @@protoc_insertion_point(destructor:mozc.user_history_predictor.UserHistory.Entry)
  SharedDtor();
}

void UserHistory_Entry::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void UserHistory_Entry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserHistory_Entry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserHistory_Entry_descriptor_;
}

const UserHistory_Entry& UserHistory_Entry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_prediction_2fuser_5fhistory_5fpredictor_2eproto();
  return *default_instance_;
}

UserHistory_Entry* UserHistory_Entry::default_instance_ = NULL;

UserHistory_Entry* UserHistory_Entry::New(::google::protobuf::Arena* arena) const {
  UserHistory_Entry* n = new UserHistory_Entry;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UserHistory_Entry::Clear() {
// @@protoc_insertion_point(message_clear_start:mozc.user_history_predictor.UserHistory.Entry)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(UserHistory_Entry, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<UserHistory_Entry*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 191u) {
    ZR_(suggestion_freq_, last_access_time_);
    if (has_key()) {
      key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_value()) {
      value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_description()) {
      description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    bigram_boost_ = false;
  }
  ZR_(spelling_correction_, entry_type_);

#undef ZR_HELPER_
#undef ZR_

  next_entries_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool UserHistory_Entry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mozc.user_history_predictor.UserHistory.Entry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string key = 1 [default = ""];
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mozc.user_history_predictor.UserHistory.Entry.key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // optional string value = 2 [default = ""];
      case 2: {
        if (tag == 18) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mozc.user_history_predictor.UserHistory.Entry.value");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_suggestion_freq;
        break;
      }

      // optional uint32 suggestion_freq = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_suggestion_freq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &suggestion_freq_)));
          set_has_suggestion_freq();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_last_access_time;
        break;
      }

      // optional uint64 last_access_time = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_last_access_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &last_access_time_)));
          set_has_last_access_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_conversion_freq;
        break;
      }

      // optional uint32 conversion_freq = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_conversion_freq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &conversion_freq_)));
          set_has_conversion_freq();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_description;
        break;
      }

      // optional string description = 6 [default = ""];
      case 6: {
        if (tag == 50) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mozc.user_history_predictor.UserHistory.Entry.description");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_next_entries;
        break;
      }

      // repeated .mozc.user_history_predictor.UserHistory.NextEntry next_entries = 7;
      case 7: {
        if (tag == 58) {
         parse_next_entries:
          DO_(input->IncrementRecursionDepth());
         parse_loop_next_entries:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_next_entries()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_loop_next_entries;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(64)) goto parse_removed;
        break;
      }

      // optional bool removed = 8 [default = false];
      case 8: {
        if (tag == 64) {
         parse_removed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &removed_)));
          set_has_removed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_entry_type;
        break;
      }

      // optional .mozc.user_history_predictor.UserHistory.Entry.EntryType entry_type = 9 [default = DEFAULT_ENTRY];
      case 9: {
        if (tag == 72) {
         parse_entry_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mozc::user_history_predictor::UserHistory_Entry_EntryType_IsValid(value)) {
            set_entry_type(static_cast< ::mozc::user_history_predictor::UserHistory_Entry_EntryType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(9, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_bigram_boost;
        break;
      }

      // optional bool bigram_boost = 20 [default = false];
      case 20: {
        if (tag == 160) {
         parse_bigram_boost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bigram_boost_)));
          set_has_bigram_boost();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_spelling_correction;
        break;
      }

      // optional bool spelling_correction = 21 [default = false];
      case 21: {
        if (tag == 168) {
         parse_spelling_correction:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &spelling_correction_)));
          set_has_spelling_correction();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mozc.user_history_predictor.UserHistory.Entry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mozc.user_history_predictor.UserHistory.Entry)
  return false;
#undef DO_
}

void UserHistory_Entry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mozc.user_history_predictor.UserHistory.Entry)
  // optional string key = 1 [default = ""];
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mozc.user_history_predictor.UserHistory.Entry.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // optional string value = 2 [default = ""];
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mozc.user_history_predictor.UserHistory.Entry.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  // optional uint32 suggestion_freq = 3 [default = 0];
  if (has_suggestion_freq()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->suggestion_freq(), output);
  }

  // optional uint64 last_access_time = 4 [default = 0];
  if (has_last_access_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->last_access_time(), output);
  }

  // optional uint32 conversion_freq = 5 [default = 0];
  if (has_conversion_freq()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->conversion_freq(), output);
  }

  // optional string description = 6 [default = ""];
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mozc.user_history_predictor.UserHistory.Entry.description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->description(), output);
  }

  // repeated .mozc.user_history_predictor.UserHistory.NextEntry next_entries = 7;
  for (unsigned int i = 0, n = this->next_entries_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->next_entries(i), output);
  }

  // optional bool removed = 8 [default = false];
  if (has_removed()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->removed(), output);
  }

  // optional .mozc.user_history_predictor.UserHistory.Entry.EntryType entry_type = 9 [default = DEFAULT_ENTRY];
  if (has_entry_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->entry_type(), output);
  }

  // optional bool bigram_boost = 20 [default = false];
  if (has_bigram_boost()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(20, this->bigram_boost(), output);
  }

  // optional bool spelling_correction = 21 [default = false];
  if (has_spelling_correction()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(21, this->spelling_correction(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mozc.user_history_predictor.UserHistory.Entry)
}

::google::protobuf::uint8* UserHistory_Entry::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mozc.user_history_predictor.UserHistory.Entry)
  // optional string key = 1 [default = ""];
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mozc.user_history_predictor.UserHistory.Entry.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // optional string value = 2 [default = ""];
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mozc.user_history_predictor.UserHistory.Entry.value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  // optional uint32 suggestion_freq = 3 [default = 0];
  if (has_suggestion_freq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->suggestion_freq(), target);
  }

  // optional uint64 last_access_time = 4 [default = 0];
  if (has_last_access_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->last_access_time(), target);
  }

  // optional uint32 conversion_freq = 5 [default = 0];
  if (has_conversion_freq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->conversion_freq(), target);
  }

  // optional string description = 6 [default = ""];
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mozc.user_history_predictor.UserHistory.Entry.description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->description(), target);
  }

  // repeated .mozc.user_history_predictor.UserHistory.NextEntry next_entries = 7;
  for (unsigned int i = 0, n = this->next_entries_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, this->next_entries(i), false, target);
  }

  // optional bool removed = 8 [default = false];
  if (has_removed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->removed(), target);
  }

  // optional .mozc.user_history_predictor.UserHistory.Entry.EntryType entry_type = 9 [default = DEFAULT_ENTRY];
  if (has_entry_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->entry_type(), target);
  }

  // optional bool bigram_boost = 20 [default = false];
  if (has_bigram_boost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(20, this->bigram_boost(), target);
  }

  // optional bool spelling_correction = 21 [default = false];
  if (has_spelling_correction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(21, this->spelling_correction(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mozc.user_history_predictor.UserHistory.Entry)
  return target;
}

int UserHistory_Entry::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:mozc.user_history_predictor.UserHistory.Entry)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 191u) {
    // optional string key = 1 [default = ""];
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // optional string value = 2 [default = ""];
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

    // optional string description = 6 [default = ""];
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }

    // optional uint32 suggestion_freq = 3 [default = 0];
    if (has_suggestion_freq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->suggestion_freq());
    }

    // optional uint32 conversion_freq = 5 [default = 0];
    if (has_conversion_freq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->conversion_freq());
    }

    // optional uint64 last_access_time = 4 [default = 0];
    if (has_last_access_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->last_access_time());
    }

    // optional bool bigram_boost = 20 [default = false];
    if (has_bigram_boost()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[8 / 32] & 1792u) {
    // optional bool spelling_correction = 21 [default = false];
    if (has_spelling_correction()) {
      total_size += 2 + 1;
    }

    // optional bool removed = 8 [default = false];
    if (has_removed()) {
      total_size += 1 + 1;
    }

    // optional .mozc.user_history_predictor.UserHistory.Entry.EntryType entry_type = 9 [default = DEFAULT_ENTRY];
    if (has_entry_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->entry_type());
    }

  }
  // repeated .mozc.user_history_predictor.UserHistory.NextEntry next_entries = 7;
  total_size += 1 * this->next_entries_size();
  for (int i = 0; i < this->next_entries_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->next_entries(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserHistory_Entry::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mozc.user_history_predictor.UserHistory.Entry)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const UserHistory_Entry* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const UserHistory_Entry>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mozc.user_history_predictor.UserHistory.Entry)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mozc.user_history_predictor.UserHistory.Entry)
    MergeFrom(*source);
  }
}

void UserHistory_Entry::MergeFrom(const UserHistory_Entry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mozc.user_history_predictor.UserHistory.Entry)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  next_entries_.MergeFrom(from.next_entries_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_has_key();
      key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
    }
    if (from.has_value()) {
      set_has_value();
      value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
    }
    if (from.has_description()) {
      set_has_description();
      description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
    }
    if (from.has_suggestion_freq()) {
      set_suggestion_freq(from.suggestion_freq());
    }
    if (from.has_conversion_freq()) {
      set_conversion_freq(from.conversion_freq());
    }
    if (from.has_last_access_time()) {
      set_last_access_time(from.last_access_time());
    }
    if (from.has_bigram_boost()) {
      set_bigram_boost(from.bigram_boost());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_spelling_correction()) {
      set_spelling_correction(from.spelling_correction());
    }
    if (from.has_removed()) {
      set_removed(from.removed());
    }
    if (from.has_entry_type()) {
      set_entry_type(from.entry_type());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void UserHistory_Entry::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mozc.user_history_predictor.UserHistory.Entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserHistory_Entry::CopyFrom(const UserHistory_Entry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mozc.user_history_predictor.UserHistory.Entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserHistory_Entry::IsInitialized() const {

  return true;
}

void UserHistory_Entry::Swap(UserHistory_Entry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserHistory_Entry::InternalSwap(UserHistory_Entry* other) {
  key_.Swap(&other->key_);
  value_.Swap(&other->value_);
  description_.Swap(&other->description_);
  std::swap(suggestion_freq_, other->suggestion_freq_);
  std::swap(conversion_freq_, other->conversion_freq_);
  std::swap(last_access_time_, other->last_access_time_);
  next_entries_.UnsafeArenaSwap(&other->next_entries_);
  std::swap(bigram_boost_, other->bigram_boost_);
  std::swap(spelling_correction_, other->spelling_correction_);
  std::swap(removed_, other->removed_);
  std::swap(entry_type_, other->entry_type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserHistory_Entry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserHistory_Entry_descriptor_;
  metadata.reflection = UserHistory_Entry_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserHistory::kEntriesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserHistory::UserHistory()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mozc.user_history_predictor.UserHistory)
}

void UserHistory::InitAsDefaultInstance() {
}

UserHistory::UserHistory(const UserHistory& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mozc.user_history_predictor.UserHistory)
}

void UserHistory::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserHistory::~UserHistory() {
  // @@protoc_insertion_point(destructor:mozc.user_history_predictor.UserHistory)
  SharedDtor();
}

void UserHistory::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UserHistory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserHistory::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserHistory_descriptor_;
}

const UserHistory& UserHistory::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_prediction_2fuser_5fhistory_5fpredictor_2eproto();
  return *default_instance_;
}

UserHistory* UserHistory::default_instance_ = NULL;

UserHistory* UserHistory::New(::google::protobuf::Arena* arena) const {
  UserHistory* n = new UserHistory;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UserHistory::Clear() {
// @@protoc_insertion_point(message_clear_start:mozc.user_history_predictor.UserHistory)
  entries_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool UserHistory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mozc.user_history_predictor.UserHistory)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .mozc.user_history_predictor.UserHistory.Entry entries = 6;
      case 6: {
        if (tag == 50) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_entries:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_entries()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_loop_entries;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mozc.user_history_predictor.UserHistory)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mozc.user_history_predictor.UserHistory)
  return false;
#undef DO_
}

void UserHistory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mozc.user_history_predictor.UserHistory)
  // repeated .mozc.user_history_predictor.UserHistory.Entry entries = 6;
  for (unsigned int i = 0, n = this->entries_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->entries(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mozc.user_history_predictor.UserHistory)
}

::google::protobuf::uint8* UserHistory::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mozc.user_history_predictor.UserHistory)
  // repeated .mozc.user_history_predictor.UserHistory.Entry entries = 6;
  for (unsigned int i = 0, n = this->entries_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, this->entries(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mozc.user_history_predictor.UserHistory)
  return target;
}

int UserHistory::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:mozc.user_history_predictor.UserHistory)
  int total_size = 0;

  // repeated .mozc.user_history_predictor.UserHistory.Entry entries = 6;
  total_size += 1 * this->entries_size();
  for (int i = 0; i < this->entries_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->entries(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserHistory::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mozc.user_history_predictor.UserHistory)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const UserHistory* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const UserHistory>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mozc.user_history_predictor.UserHistory)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mozc.user_history_predictor.UserHistory)
    MergeFrom(*source);
  }
}

void UserHistory::MergeFrom(const UserHistory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mozc.user_history_predictor.UserHistory)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  entries_.MergeFrom(from.entries_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void UserHistory::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mozc.user_history_predictor.UserHistory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserHistory::CopyFrom(const UserHistory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mozc.user_history_predictor.UserHistory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserHistory::IsInitialized() const {

  return true;
}

void UserHistory::Swap(UserHistory* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserHistory::InternalSwap(UserHistory* other) {
  entries_.UnsafeArenaSwap(&other->entries_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserHistory::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserHistory_descriptor_;
  metadata.reflection = UserHistory_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserHistory_NextEntry

// optional uint32 entry_fp = 1 [default = 0];
bool UserHistory_NextEntry::has_entry_fp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UserHistory_NextEntry::set_has_entry_fp() {
  _has_bits_[0] |= 0x00000001u;
}
void UserHistory_NextEntry::clear_has_entry_fp() {
  _has_bits_[0] &= ~0x00000001u;
}
void UserHistory_NextEntry::clear_entry_fp() {
  entry_fp_ = 0u;
  clear_has_entry_fp();
}
 ::google::protobuf::uint32 UserHistory_NextEntry::entry_fp() const {
  // @@protoc_insertion_point(field_get:mozc.user_history_predictor.UserHistory.NextEntry.entry_fp)
  return entry_fp_;
}
 void UserHistory_NextEntry::set_entry_fp(::google::protobuf::uint32 value) {
  set_has_entry_fp();
  entry_fp_ = value;
  // @@protoc_insertion_point(field_set:mozc.user_history_predictor.UserHistory.NextEntry.entry_fp)
}

// -------------------------------------------------------------------

// UserHistory_Entry

// optional string key = 1 [default = ""];
bool UserHistory_Entry::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UserHistory_Entry::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
void UserHistory_Entry::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
void UserHistory_Entry::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
 const ::std::string& UserHistory_Entry::key() const {
  // @@protoc_insertion_point(field_get:mozc.user_history_predictor.UserHistory.Entry.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UserHistory_Entry::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mozc.user_history_predictor.UserHistory.Entry.key)
}
 void UserHistory_Entry::set_key(const char* value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mozc.user_history_predictor.UserHistory.Entry.key)
}
 void UserHistory_Entry::set_key(const char* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mozc.user_history_predictor.UserHistory.Entry.key)
}
 ::std::string* UserHistory_Entry::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:mozc.user_history_predictor.UserHistory.Entry.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* UserHistory_Entry::release_key() {
  // @@protoc_insertion_point(field_release:mozc.user_history_predictor.UserHistory.Entry.key)
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UserHistory_Entry::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:mozc.user_history_predictor.UserHistory.Entry.key)
}

// optional string value = 2 [default = ""];
bool UserHistory_Entry::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void UserHistory_Entry::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
void UserHistory_Entry::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
void UserHistory_Entry::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}
 const ::std::string& UserHistory_Entry::value() const {
  // @@protoc_insertion_point(field_get:mozc.user_history_predictor.UserHistory.Entry.value)
  return value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UserHistory_Entry::set_value(const ::std::string& value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mozc.user_history_predictor.UserHistory.Entry.value)
}
 void UserHistory_Entry::set_value(const char* value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mozc.user_history_predictor.UserHistory.Entry.value)
}
 void UserHistory_Entry::set_value(const char* value, size_t size) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mozc.user_history_predictor.UserHistory.Entry.value)
}
 ::std::string* UserHistory_Entry::mutable_value() {
  set_has_value();
  // @@protoc_insertion_point(field_mutable:mozc.user_history_predictor.UserHistory.Entry.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* UserHistory_Entry::release_value() {
  // @@protoc_insertion_point(field_release:mozc.user_history_predictor.UserHistory.Entry.value)
  clear_has_value();
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UserHistory_Entry::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    set_has_value();
  } else {
    clear_has_value();
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:mozc.user_history_predictor.UserHistory.Entry.value)
}

// optional string description = 6 [default = ""];
bool UserHistory_Entry::has_description() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void UserHistory_Entry::set_has_description() {
  _has_bits_[0] |= 0x00000004u;
}
void UserHistory_Entry::clear_has_description() {
  _has_bits_[0] &= ~0x00000004u;
}
void UserHistory_Entry::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_description();
}
 const ::std::string& UserHistory_Entry::description() const {
  // @@protoc_insertion_point(field_get:mozc.user_history_predictor.UserHistory.Entry.description)
  return description_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UserHistory_Entry::set_description(const ::std::string& value) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mozc.user_history_predictor.UserHistory.Entry.description)
}
 void UserHistory_Entry::set_description(const char* value) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mozc.user_history_predictor.UserHistory.Entry.description)
}
 void UserHistory_Entry::set_description(const char* value, size_t size) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mozc.user_history_predictor.UserHistory.Entry.description)
}
 ::std::string* UserHistory_Entry::mutable_description() {
  set_has_description();
  // @@protoc_insertion_point(field_mutable:mozc.user_history_predictor.UserHistory.Entry.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* UserHistory_Entry::release_description() {
  // @@protoc_insertion_point(field_release:mozc.user_history_predictor.UserHistory.Entry.description)
  clear_has_description();
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UserHistory_Entry::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    set_has_description();
  } else {
    clear_has_description();
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:mozc.user_history_predictor.UserHistory.Entry.description)
}

// optional uint32 suggestion_freq = 3 [default = 0];
bool UserHistory_Entry::has_suggestion_freq() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void UserHistory_Entry::set_has_suggestion_freq() {
  _has_bits_[0] |= 0x00000008u;
}
void UserHistory_Entry::clear_has_suggestion_freq() {
  _has_bits_[0] &= ~0x00000008u;
}
void UserHistory_Entry::clear_suggestion_freq() {
  suggestion_freq_ = 0u;
  clear_has_suggestion_freq();
}
 ::google::protobuf::uint32 UserHistory_Entry::suggestion_freq() const {
  // @@protoc_insertion_point(field_get:mozc.user_history_predictor.UserHistory.Entry.suggestion_freq)
  return suggestion_freq_;
}
 void UserHistory_Entry::set_suggestion_freq(::google::protobuf::uint32 value) {
  set_has_suggestion_freq();
  suggestion_freq_ = value;
  // @@protoc_insertion_point(field_set:mozc.user_history_predictor.UserHistory.Entry.suggestion_freq)
}

// optional uint32 conversion_freq = 5 [default = 0];
bool UserHistory_Entry::has_conversion_freq() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void UserHistory_Entry::set_has_conversion_freq() {
  _has_bits_[0] |= 0x00000010u;
}
void UserHistory_Entry::clear_has_conversion_freq() {
  _has_bits_[0] &= ~0x00000010u;
}
void UserHistory_Entry::clear_conversion_freq() {
  conversion_freq_ = 0u;
  clear_has_conversion_freq();
}
 ::google::protobuf::uint32 UserHistory_Entry::conversion_freq() const {
  // @@protoc_insertion_point(field_get:mozc.user_history_predictor.UserHistory.Entry.conversion_freq)
  return conversion_freq_;
}
 void UserHistory_Entry::set_conversion_freq(::google::protobuf::uint32 value) {
  set_has_conversion_freq();
  conversion_freq_ = value;
  // @@protoc_insertion_point(field_set:mozc.user_history_predictor.UserHistory.Entry.conversion_freq)
}

// optional uint64 last_access_time = 4 [default = 0];
bool UserHistory_Entry::has_last_access_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void UserHistory_Entry::set_has_last_access_time() {
  _has_bits_[0] |= 0x00000020u;
}
void UserHistory_Entry::clear_has_last_access_time() {
  _has_bits_[0] &= ~0x00000020u;
}
void UserHistory_Entry::clear_last_access_time() {
  last_access_time_ = GOOGLE_ULONGLONG(0);
  clear_has_last_access_time();
}
 ::google::protobuf::uint64 UserHistory_Entry::last_access_time() const {
  // @@protoc_insertion_point(field_get:mozc.user_history_predictor.UserHistory.Entry.last_access_time)
  return last_access_time_;
}
 void UserHistory_Entry::set_last_access_time(::google::protobuf::uint64 value) {
  set_has_last_access_time();
  last_access_time_ = value;
  // @@protoc_insertion_point(field_set:mozc.user_history_predictor.UserHistory.Entry.last_access_time)
}

// repeated .mozc.user_history_predictor.UserHistory.NextEntry next_entries = 7;
int UserHistory_Entry::next_entries_size() const {
  return next_entries_.size();
}
void UserHistory_Entry::clear_next_entries() {
  next_entries_.Clear();
}
const ::mozc::user_history_predictor::UserHistory_NextEntry& UserHistory_Entry::next_entries(int index) const {
  // @@protoc_insertion_point(field_get:mozc.user_history_predictor.UserHistory.Entry.next_entries)
  return next_entries_.Get(index);
}
::mozc::user_history_predictor::UserHistory_NextEntry* UserHistory_Entry::mutable_next_entries(int index) {
  // @@protoc_insertion_point(field_mutable:mozc.user_history_predictor.UserHistory.Entry.next_entries)
  return next_entries_.Mutable(index);
}
::mozc::user_history_predictor::UserHistory_NextEntry* UserHistory_Entry::add_next_entries() {
  // @@protoc_insertion_point(field_add:mozc.user_history_predictor.UserHistory.Entry.next_entries)
  return next_entries_.Add();
}
::google::protobuf::RepeatedPtrField< ::mozc::user_history_predictor::UserHistory_NextEntry >*
UserHistory_Entry::mutable_next_entries() {
  // @@protoc_insertion_point(field_mutable_list:mozc.user_history_predictor.UserHistory.Entry.next_entries)
  return &next_entries_;
}
const ::google::protobuf::RepeatedPtrField< ::mozc::user_history_predictor::UserHistory_NextEntry >&
UserHistory_Entry::next_entries() const {
  // @@protoc_insertion_point(field_list:mozc.user_history_predictor.UserHistory.Entry.next_entries)
  return next_entries_;
}

// optional bool bigram_boost = 20 [default = false];
bool UserHistory_Entry::has_bigram_boost() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void UserHistory_Entry::set_has_bigram_boost() {
  _has_bits_[0] |= 0x00000080u;
}
void UserHistory_Entry::clear_has_bigram_boost() {
  _has_bits_[0] &= ~0x00000080u;
}
void UserHistory_Entry::clear_bigram_boost() {
  bigram_boost_ = false;
  clear_has_bigram_boost();
}
 bool UserHistory_Entry::bigram_boost() const {
  // @@protoc_insertion_point(field_get:mozc.user_history_predictor.UserHistory.Entry.bigram_boost)
  return bigram_boost_;
}
 void UserHistory_Entry::set_bigram_boost(bool value) {
  set_has_bigram_boost();
  bigram_boost_ = value;
  // @@protoc_insertion_point(field_set:mozc.user_history_predictor.UserHistory.Entry.bigram_boost)
}

// optional bool spelling_correction = 21 [default = false];
bool UserHistory_Entry::has_spelling_correction() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void UserHistory_Entry::set_has_spelling_correction() {
  _has_bits_[0] |= 0x00000100u;
}
void UserHistory_Entry::clear_has_spelling_correction() {
  _has_bits_[0] &= ~0x00000100u;
}
void UserHistory_Entry::clear_spelling_correction() {
  spelling_correction_ = false;
  clear_has_spelling_correction();
}
 bool UserHistory_Entry::spelling_correction() const {
  // @@protoc_insertion_point(field_get:mozc.user_history_predictor.UserHistory.Entry.spelling_correction)
  return spelling_correction_;
}
 void UserHistory_Entry::set_spelling_correction(bool value) {
  set_has_spelling_correction();
  spelling_correction_ = value;
  // @@protoc_insertion_point(field_set:mozc.user_history_predictor.UserHistory.Entry.spelling_correction)
}

// optional bool removed = 8 [default = false];
bool UserHistory_Entry::has_removed() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void UserHistory_Entry::set_has_removed() {
  _has_bits_[0] |= 0x00000200u;
}
void UserHistory_Entry::clear_has_removed() {
  _has_bits_[0] &= ~0x00000200u;
}
void UserHistory_Entry::clear_removed() {
  removed_ = false;
  clear_has_removed();
}
 bool UserHistory_Entry::removed() const {
  // @@protoc_insertion_point(field_get:mozc.user_history_predictor.UserHistory.Entry.removed)
  return removed_;
}
 void UserHistory_Entry::set_removed(bool value) {
  set_has_removed();
  removed_ = value;
  // @@protoc_insertion_point(field_set:mozc.user_history_predictor.UserHistory.Entry.removed)
}

// optional .mozc.user_history_predictor.UserHistory.Entry.EntryType entry_type = 9 [default = DEFAULT_ENTRY];
bool UserHistory_Entry::has_entry_type() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void UserHistory_Entry::set_has_entry_type() {
  _has_bits_[0] |= 0x00000400u;
}
void UserHistory_Entry::clear_has_entry_type() {
  _has_bits_[0] &= ~0x00000400u;
}
void UserHistory_Entry::clear_entry_type() {
  entry_type_ = 0;
  clear_has_entry_type();
}
 ::mozc::user_history_predictor::UserHistory_Entry_EntryType UserHistory_Entry::entry_type() const {
  // @@protoc_insertion_point(field_get:mozc.user_history_predictor.UserHistory.Entry.entry_type)
  return static_cast< ::mozc::user_history_predictor::UserHistory_Entry_EntryType >(entry_type_);
}
 void UserHistory_Entry::set_entry_type(::mozc::user_history_predictor::UserHistory_Entry_EntryType value) {
  assert(::mozc::user_history_predictor::UserHistory_Entry_EntryType_IsValid(value));
  set_has_entry_type();
  entry_type_ = value;
  // @@protoc_insertion_point(field_set:mozc.user_history_predictor.UserHistory.Entry.entry_type)
}

// -------------------------------------------------------------------

// UserHistory

// repeated .mozc.user_history_predictor.UserHistory.Entry entries = 6;
int UserHistory::entries_size() const {
  return entries_.size();
}
void UserHistory::clear_entries() {
  entries_.Clear();
}
const ::mozc::user_history_predictor::UserHistory_Entry& UserHistory::entries(int index) const {
  // @@protoc_insertion_point(field_get:mozc.user_history_predictor.UserHistory.entries)
  return entries_.Get(index);
}
::mozc::user_history_predictor::UserHistory_Entry* UserHistory::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:mozc.user_history_predictor.UserHistory.entries)
  return entries_.Mutable(index);
}
::mozc::user_history_predictor::UserHistory_Entry* UserHistory::add_entries() {
  // @@protoc_insertion_point(field_add:mozc.user_history_predictor.UserHistory.entries)
  return entries_.Add();
}
::google::protobuf::RepeatedPtrField< ::mozc::user_history_predictor::UserHistory_Entry >*
UserHistory::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:mozc.user_history_predictor.UserHistory.entries)
  return &entries_;
}
const ::google::protobuf::RepeatedPtrField< ::mozc::user_history_predictor::UserHistory_Entry >&
UserHistory::entries() const {
  // @@protoc_insertion_point(field_list:mozc.user_history_predictor.UserHistory.entries)
  return entries_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace user_history_predictor
}  // namespace mozc

// @@protoc_insertion_point(global_scope)
