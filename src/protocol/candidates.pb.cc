// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protocol/candidates.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "protocol/candidates.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace mozc {
namespace commands {

namespace {

const ::google::protobuf::Descriptor* Annotation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Annotation_reflection_ = NULL;
const ::google::protobuf::Descriptor* Information_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Information_reflection_ = NULL;
const ::google::protobuf::Descriptor* InformationList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InformationList_reflection_ = NULL;
const ::google::protobuf::Descriptor* Footer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Footer_reflection_ = NULL;
const ::google::protobuf::Descriptor* CandidateWord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CandidateWord_reflection_ = NULL;
const ::google::protobuf::Descriptor* CandidateList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CandidateList_reflection_ = NULL;
const ::google::protobuf::Descriptor* Candidates_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Candidates_reflection_ = NULL;
const ::google::protobuf::Descriptor* Candidates_Candidate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Candidates_Candidate_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Candidates_Direction_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Category_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DisplayType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_protocol_2fcandidates_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_protocol_2fcandidates_2eproto() {
  protobuf_AddDesc_protocol_2fcandidates_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "protocol/candidates.proto");
  GOOGLE_CHECK(file != NULL);
  Annotation_descriptor_ = file->message_type(0);
  static const int Annotation_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Annotation, prefix_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Annotation, suffix_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Annotation, description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Annotation, shortcut_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Annotation, deletable_),
  };
  Annotation_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Annotation_descriptor_,
      Annotation::default_instance_,
      Annotation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Annotation, _has_bits_[0]),
      -1,
      -1,
      sizeof(Annotation),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Annotation, _internal_metadata_),
      -1);
  Information_descriptor_ = file->message_type(1);
  static const int Information_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Information, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Information, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Information, description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Information, candidate_id_),
  };
  Information_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Information_descriptor_,
      Information::default_instance_,
      Information_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Information, _has_bits_[0]),
      -1,
      -1,
      sizeof(Information),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Information, _internal_metadata_),
      -1);
  InformationList_descriptor_ = file->message_type(2);
  static const int InformationList_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InformationList, focused_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InformationList, information_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InformationList, category_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InformationList, display_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InformationList, delay_),
  };
  InformationList_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      InformationList_descriptor_,
      InformationList::default_instance_,
      InformationList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InformationList, _has_bits_[0]),
      -1,
      -1,
      sizeof(InformationList),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InformationList, _internal_metadata_),
      -1);
  Footer_descriptor_ = file->message_type(3);
  static const int Footer_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Footer, label_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Footer, index_visible_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Footer, logo_visible_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Footer, sub_label_),
  };
  Footer_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Footer_descriptor_,
      Footer::default_instance_,
      Footer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Footer, _has_bits_[0]),
      -1,
      -1,
      sizeof(Footer),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Footer, _internal_metadata_),
      -1);
  CandidateWord_descriptor_ = file->message_type(4);
  static const int CandidateWord_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CandidateWord, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CandidateWord, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CandidateWord, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CandidateWord, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CandidateWord, annotation_),
  };
  CandidateWord_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CandidateWord_descriptor_,
      CandidateWord::default_instance_,
      CandidateWord_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CandidateWord, _has_bits_[0]),
      -1,
      -1,
      sizeof(CandidateWord),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CandidateWord, _internal_metadata_),
      -1);
  CandidateList_descriptor_ = file->message_type(5);
  static const int CandidateList_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CandidateList, focused_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CandidateList, candidates_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CandidateList, category_),
  };
  CandidateList_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CandidateList_descriptor_,
      CandidateList::default_instance_,
      CandidateList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CandidateList, _has_bits_[0]),
      -1,
      -1,
      sizeof(CandidateList),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CandidateList, _internal_metadata_),
      -1);
  Candidates_descriptor_ = file->message_type(6);
  static const int Candidates_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Candidates, focused_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Candidates, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Candidates, candidate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Candidates, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Candidates, subcandidates_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Candidates, usages_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Candidates, category_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Candidates, display_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Candidates, footer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Candidates, direction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Candidates, page_size_),
  };
  Candidates_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Candidates_descriptor_,
      Candidates::default_instance_,
      Candidates_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Candidates, _has_bits_[0]),
      -1,
      -1,
      sizeof(Candidates),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Candidates, _internal_metadata_),
      -1);
  Candidates_Candidate_descriptor_ = Candidates_descriptor_->nested_type(0);
  static const int Candidates_Candidate_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Candidates_Candidate, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Candidates_Candidate, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Candidates_Candidate, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Candidates_Candidate, annotation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Candidates_Candidate, information_id_),
  };
  Candidates_Candidate_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Candidates_Candidate_descriptor_,
      Candidates_Candidate::default_instance_,
      Candidates_Candidate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Candidates_Candidate, _has_bits_[0]),
      -1,
      -1,
      sizeof(Candidates_Candidate),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Candidates_Candidate, _internal_metadata_),
      -1);
  Candidates_Direction_descriptor_ = Candidates_descriptor_->enum_type(0);
  Category_descriptor_ = file->enum_type(0);
  DisplayType_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_protocol_2fcandidates_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Annotation_descriptor_, &Annotation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Information_descriptor_, &Information::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      InformationList_descriptor_, &InformationList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Footer_descriptor_, &Footer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CandidateWord_descriptor_, &CandidateWord::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CandidateList_descriptor_, &CandidateList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Candidates_descriptor_, &Candidates::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Candidates_Candidate_descriptor_, &Candidates_Candidate::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_protocol_2fcandidates_2eproto() {
  delete Annotation::default_instance_;
  delete Annotation_reflection_;
  delete Information::default_instance_;
  delete Information_reflection_;
  delete InformationList::default_instance_;
  delete InformationList_reflection_;
  delete Footer::default_instance_;
  delete Footer_reflection_;
  delete CandidateWord::default_instance_;
  delete CandidateWord_reflection_;
  delete CandidateList::default_instance_;
  delete CandidateList_reflection_;
  delete Candidates::default_instance_;
  delete Candidates_reflection_;
  delete Candidates_Candidate::default_instance_;
  delete Candidates_Candidate_reflection_;
}

void protobuf_AddDesc_protocol_2fcandidates_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_protocol_2fcandidates_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\031protocol/candidates.proto\022\rmozc.comman"
    "ds\"m\n\nAnnotation\022\016\n\006prefix\030\001 \001(\t\022\016\n\006suff"
    "ix\030\002 \001(\t\022\023\n\013description\030\003 \001(\t\022\020\n\010shortcu"
    "t\030\004 \001(\t\022\030\n\tdeletable\030\005 \001(\010:\005false\"S\n\013Inf"
    "ormation\022\n\n\002id\030\001 \001(\005\022\r\n\005title\030\002 \001(\t\022\023\n\013d"
    "escription\030\003 \001(\t\022\024\n\014candidate_id\030\004 \003(\005\"\337"
    "\001\n\017InformationList\022\025\n\rfocused_index\030\001 \001("
    "\r\022/\n\013information\030\002 \003(\0132\032.mozc.commands.I"
    "nformation\0225\n\010category\030\003 \001(\0162\027.mozc.comm"
    "ands.Category:\nCONVERSION\0229\n\014display_typ"
    "e\030\004 \001(\0162\032.mozc.commands.DisplayType:\007CAS"
    "CADE\022\022\n\005delay\030\005 \001(\r:\003500\"e\n\006Footer\022\r\n\005la"
    "bel\030\001 \001(\t\022\034\n\rindex_visible\030\002 \001(\010:\005false\022"
    "\033\n\014logo_visible\030\003 \001(\010:\005false\022\021\n\tsub_labe"
    "l\030\004 \001(\t\"u\n\rCandidateWord\022\n\n\002id\030\001 \001(\005\022\r\n\005"
    "index\030\002 \001(\r\022\013\n\003key\030\003 \001(\t\022\r\n\005value\030\004 \001(\t\022"
    "-\n\nannotation\030\005 \001(\0132\031.mozc.commands.Anno"
    "tation\"\217\001\n\rCandidateList\022\025\n\rfocused_inde"
    "x\030\001 \001(\r\0220\n\ncandidates\030\002 \003(\0132\034.mozc.comma"
    "nds.CandidateWord\0225\n\010category\030\003 \001(\0162\027.mo"
    "zc.commands.Category:\nCONVERSION\"\206\005\n\nCan"
    "didates\022\025\n\rfocused_index\030\001 \001(\r\022\014\n\004size\030\002"
    " \002(\r\0226\n\tcandidate\030\003 \003(\n2#.mozc.commands."
    "Candidates.Candidate\022\020\n\010position\030\006 \002(\r\0220"
    "\n\rsubcandidates\030\010 \001(\0132\031.mozc.commands.Ca"
    "ndidates\022.\n\006usages\030\n \001(\0132\036.mozc.commands"
    ".InformationList\0225\n\010category\030\013 \001(\0162\027.moz"
    "c.commands.Category:\nCONVERSION\0226\n\014displ"
    "ay_type\030\014 \001(\0162\032.mozc.commands.DisplayTyp"
    "e:\004MAIN\022%\n\006footer\030\r \001(\0132\025.mozc.commands."
    "Footer\022@\n\tdirection\030\016 \001(\0162#.mozc.command"
    "s.Candidates.Direction:\010VERTICAL\022\024\n\tpage"
    "_size\030\022 \001(\r:\0019\032|\n\tCandidate\022\r\n\005index\030\004 \002"
    "(\r\022\r\n\005value\030\005 \002(\t\022\n\n\002id\030\t \001(\005\022-\n\nannotat"
    "ion\030\007 \001(\0132\031.mozc.commands.Annotation\022\026\n\016"
    "information_id\030\n \001(\005\")\n\tDirection\022\014\n\010VER"
    "TICAL\020\000\022\016\n\nHORIZONTAL\020\001J\004\010\017\020\020J\004\010\020\020\021J\004\010\021\020"
    "\022*Z\n\010Category\022\016\n\nCONVERSION\020\000\022\016\n\nPREDICT"
    "ION\020\001\022\016\n\nSUGGESTION\020\002\022\023\n\017TRANSLITERATION"
    "\020\003\022\t\n\005USAGE\020\004*$\n\013DisplayType\022\010\n\004MAIN\020\000\022\013"
    "\n\007CASCADE\020\001BA\n.org.mozc.android.inputmet"
    "hod.japanese.protobufB\017ProtoCandidates", 1678);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "protocol/candidates.proto", &protobuf_RegisterTypes);
  Annotation::default_instance_ = new Annotation();
  Information::default_instance_ = new Information();
  InformationList::default_instance_ = new InformationList();
  Footer::default_instance_ = new Footer();
  CandidateWord::default_instance_ = new CandidateWord();
  CandidateList::default_instance_ = new CandidateList();
  Candidates::default_instance_ = new Candidates();
  Candidates_Candidate::default_instance_ = new Candidates_Candidate();
  Annotation::default_instance_->InitAsDefaultInstance();
  Information::default_instance_->InitAsDefaultInstance();
  InformationList::default_instance_->InitAsDefaultInstance();
  Footer::default_instance_->InitAsDefaultInstance();
  CandidateWord::default_instance_->InitAsDefaultInstance();
  CandidateList::default_instance_->InitAsDefaultInstance();
  Candidates::default_instance_->InitAsDefaultInstance();
  Candidates_Candidate::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_protocol_2fcandidates_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_protocol_2fcandidates_2eproto {
  StaticDescriptorInitializer_protocol_2fcandidates_2eproto() {
    protobuf_AddDesc_protocol_2fcandidates_2eproto();
  }
} static_descriptor_initializer_protocol_2fcandidates_2eproto_;
const ::google::protobuf::EnumDescriptor* Category_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Category_descriptor_;
}
bool Category_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DisplayType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DisplayType_descriptor_;
}
bool DisplayType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Annotation::kPrefixFieldNumber;
const int Annotation::kSuffixFieldNumber;
const int Annotation::kDescriptionFieldNumber;
const int Annotation::kShortcutFieldNumber;
const int Annotation::kDeletableFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Annotation::Annotation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mozc.commands.Annotation)
}

void Annotation::InitAsDefaultInstance() {
}

Annotation::Annotation(const Annotation& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mozc.commands.Annotation)
}

void Annotation::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  prefix_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  suffix_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  shortcut_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  deletable_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Annotation::~Annotation() {
  // @@protoc_insertion_point(destructor:mozc.commands.Annotation)
  SharedDtor();
}

void Annotation::SharedDtor() {
  prefix_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  suffix_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  shortcut_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Annotation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Annotation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Annotation_descriptor_;
}

const Annotation& Annotation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2fcandidates_2eproto();
  return *default_instance_;
}

Annotation* Annotation::default_instance_ = NULL;

Annotation* Annotation::New(::google::protobuf::Arena* arena) const {
  Annotation* n = new Annotation;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Annotation::Clear() {
// @@protoc_insertion_point(message_clear_start:mozc.commands.Annotation)
  if (_has_bits_[0 / 32] & 31u) {
    if (has_prefix()) {
      prefix_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_suffix()) {
      suffix_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_description()) {
      description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_shortcut()) {
      shortcut_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    deletable_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Annotation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mozc.commands.Annotation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string prefix = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_prefix()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->prefix().data(), this->prefix().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mozc.commands.Annotation.prefix");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_suffix;
        break;
      }

      // optional string suffix = 2;
      case 2: {
        if (tag == 18) {
         parse_suffix:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_suffix()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->suffix().data(), this->suffix().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mozc.commands.Annotation.suffix");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_description;
        break;
      }

      // optional string description = 3;
      case 3: {
        if (tag == 26) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mozc.commands.Annotation.description");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_shortcut;
        break;
      }

      // optional string shortcut = 4;
      case 4: {
        if (tag == 34) {
         parse_shortcut:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_shortcut()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->shortcut().data(), this->shortcut().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mozc.commands.Annotation.shortcut");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_deletable;
        break;
      }

      // optional bool deletable = 5 [default = false];
      case 5: {
        if (tag == 40) {
         parse_deletable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &deletable_)));
          set_has_deletable();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mozc.commands.Annotation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mozc.commands.Annotation)
  return false;
#undef DO_
}

void Annotation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mozc.commands.Annotation)
  // optional string prefix = 1;
  if (has_prefix()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->prefix().data(), this->prefix().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mozc.commands.Annotation.prefix");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->prefix(), output);
  }

  // optional string suffix = 2;
  if (has_suffix()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->suffix().data(), this->suffix().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mozc.commands.Annotation.suffix");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->suffix(), output);
  }

  // optional string description = 3;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mozc.commands.Annotation.description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->description(), output);
  }

  // optional string shortcut = 4;
  if (has_shortcut()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->shortcut().data(), this->shortcut().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mozc.commands.Annotation.shortcut");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->shortcut(), output);
  }

  // optional bool deletable = 5 [default = false];
  if (has_deletable()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->deletable(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mozc.commands.Annotation)
}

::google::protobuf::uint8* Annotation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mozc.commands.Annotation)
  // optional string prefix = 1;
  if (has_prefix()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->prefix().data(), this->prefix().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mozc.commands.Annotation.prefix");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->prefix(), target);
  }

  // optional string suffix = 2;
  if (has_suffix()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->suffix().data(), this->suffix().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mozc.commands.Annotation.suffix");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->suffix(), target);
  }

  // optional string description = 3;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mozc.commands.Annotation.description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->description(), target);
  }

  // optional string shortcut = 4;
  if (has_shortcut()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->shortcut().data(), this->shortcut().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mozc.commands.Annotation.shortcut");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->shortcut(), target);
  }

  // optional bool deletable = 5 [default = false];
  if (has_deletable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->deletable(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mozc.commands.Annotation)
  return target;
}

int Annotation::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:mozc.commands.Annotation)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 31u) {
    // optional string prefix = 1;
    if (has_prefix()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->prefix());
    }

    // optional string suffix = 2;
    if (has_suffix()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->suffix());
    }

    // optional string description = 3;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }

    // optional string shortcut = 4;
    if (has_shortcut()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->shortcut());
    }

    // optional bool deletable = 5 [default = false];
    if (has_deletable()) {
      total_size += 1 + 1;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Annotation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mozc.commands.Annotation)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Annotation* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Annotation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mozc.commands.Annotation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mozc.commands.Annotation)
    MergeFrom(*source);
  }
}

void Annotation::MergeFrom(const Annotation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mozc.commands.Annotation)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_prefix()) {
      set_has_prefix();
      prefix_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.prefix_);
    }
    if (from.has_suffix()) {
      set_has_suffix();
      suffix_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.suffix_);
    }
    if (from.has_description()) {
      set_has_description();
      description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
    }
    if (from.has_shortcut()) {
      set_has_shortcut();
      shortcut_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.shortcut_);
    }
    if (from.has_deletable()) {
      set_deletable(from.deletable());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Annotation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mozc.commands.Annotation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Annotation::CopyFrom(const Annotation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mozc.commands.Annotation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Annotation::IsInitialized() const {

  return true;
}

void Annotation::Swap(Annotation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Annotation::InternalSwap(Annotation* other) {
  prefix_.Swap(&other->prefix_);
  suffix_.Swap(&other->suffix_);
  description_.Swap(&other->description_);
  shortcut_.Swap(&other->shortcut_);
  std::swap(deletable_, other->deletable_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Annotation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Annotation_descriptor_;
  metadata.reflection = Annotation_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Annotation

// optional string prefix = 1;
bool Annotation::has_prefix() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Annotation::set_has_prefix() {
  _has_bits_[0] |= 0x00000001u;
}
void Annotation::clear_has_prefix() {
  _has_bits_[0] &= ~0x00000001u;
}
void Annotation::clear_prefix() {
  prefix_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_prefix();
}
 const ::std::string& Annotation::prefix() const {
  // @@protoc_insertion_point(field_get:mozc.commands.Annotation.prefix)
  return prefix_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Annotation::set_prefix(const ::std::string& value) {
  set_has_prefix();
  prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mozc.commands.Annotation.prefix)
}
 void Annotation::set_prefix(const char* value) {
  set_has_prefix();
  prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mozc.commands.Annotation.prefix)
}
 void Annotation::set_prefix(const char* value, size_t size) {
  set_has_prefix();
  prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mozc.commands.Annotation.prefix)
}
 ::std::string* Annotation::mutable_prefix() {
  set_has_prefix();
  // @@protoc_insertion_point(field_mutable:mozc.commands.Annotation.prefix)
  return prefix_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Annotation::release_prefix() {
  // @@protoc_insertion_point(field_release:mozc.commands.Annotation.prefix)
  clear_has_prefix();
  return prefix_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Annotation::set_allocated_prefix(::std::string* prefix) {
  if (prefix != NULL) {
    set_has_prefix();
  } else {
    clear_has_prefix();
  }
  prefix_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), prefix);
  // @@protoc_insertion_point(field_set_allocated:mozc.commands.Annotation.prefix)
}

// optional string suffix = 2;
bool Annotation::has_suffix() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Annotation::set_has_suffix() {
  _has_bits_[0] |= 0x00000002u;
}
void Annotation::clear_has_suffix() {
  _has_bits_[0] &= ~0x00000002u;
}
void Annotation::clear_suffix() {
  suffix_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_suffix();
}
 const ::std::string& Annotation::suffix() const {
  // @@protoc_insertion_point(field_get:mozc.commands.Annotation.suffix)
  return suffix_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Annotation::set_suffix(const ::std::string& value) {
  set_has_suffix();
  suffix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mozc.commands.Annotation.suffix)
}
 void Annotation::set_suffix(const char* value) {
  set_has_suffix();
  suffix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mozc.commands.Annotation.suffix)
}
 void Annotation::set_suffix(const char* value, size_t size) {
  set_has_suffix();
  suffix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mozc.commands.Annotation.suffix)
}
 ::std::string* Annotation::mutable_suffix() {
  set_has_suffix();
  // @@protoc_insertion_point(field_mutable:mozc.commands.Annotation.suffix)
  return suffix_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Annotation::release_suffix() {
  // @@protoc_insertion_point(field_release:mozc.commands.Annotation.suffix)
  clear_has_suffix();
  return suffix_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Annotation::set_allocated_suffix(::std::string* suffix) {
  if (suffix != NULL) {
    set_has_suffix();
  } else {
    clear_has_suffix();
  }
  suffix_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), suffix);
  // @@protoc_insertion_point(field_set_allocated:mozc.commands.Annotation.suffix)
}

// optional string description = 3;
bool Annotation::has_description() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Annotation::set_has_description() {
  _has_bits_[0] |= 0x00000004u;
}
void Annotation::clear_has_description() {
  _has_bits_[0] &= ~0x00000004u;
}
void Annotation::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_description();
}
 const ::std::string& Annotation::description() const {
  // @@protoc_insertion_point(field_get:mozc.commands.Annotation.description)
  return description_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Annotation::set_description(const ::std::string& value) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mozc.commands.Annotation.description)
}
 void Annotation::set_description(const char* value) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mozc.commands.Annotation.description)
}
 void Annotation::set_description(const char* value, size_t size) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mozc.commands.Annotation.description)
}
 ::std::string* Annotation::mutable_description() {
  set_has_description();
  // @@protoc_insertion_point(field_mutable:mozc.commands.Annotation.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Annotation::release_description() {
  // @@protoc_insertion_point(field_release:mozc.commands.Annotation.description)
  clear_has_description();
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Annotation::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    set_has_description();
  } else {
    clear_has_description();
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:mozc.commands.Annotation.description)
}

// optional string shortcut = 4;
bool Annotation::has_shortcut() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Annotation::set_has_shortcut() {
  _has_bits_[0] |= 0x00000008u;
}
void Annotation::clear_has_shortcut() {
  _has_bits_[0] &= ~0x00000008u;
}
void Annotation::clear_shortcut() {
  shortcut_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_shortcut();
}
 const ::std::string& Annotation::shortcut() const {
  // @@protoc_insertion_point(field_get:mozc.commands.Annotation.shortcut)
  return shortcut_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Annotation::set_shortcut(const ::std::string& value) {
  set_has_shortcut();
  shortcut_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mozc.commands.Annotation.shortcut)
}
 void Annotation::set_shortcut(const char* value) {
  set_has_shortcut();
  shortcut_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mozc.commands.Annotation.shortcut)
}
 void Annotation::set_shortcut(const char* value, size_t size) {
  set_has_shortcut();
  shortcut_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mozc.commands.Annotation.shortcut)
}
 ::std::string* Annotation::mutable_shortcut() {
  set_has_shortcut();
  // @@protoc_insertion_point(field_mutable:mozc.commands.Annotation.shortcut)
  return shortcut_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Annotation::release_shortcut() {
  // @@protoc_insertion_point(field_release:mozc.commands.Annotation.shortcut)
  clear_has_shortcut();
  return shortcut_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Annotation::set_allocated_shortcut(::std::string* shortcut) {
  if (shortcut != NULL) {
    set_has_shortcut();
  } else {
    clear_has_shortcut();
  }
  shortcut_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), shortcut);
  // @@protoc_insertion_point(field_set_allocated:mozc.commands.Annotation.shortcut)
}

// optional bool deletable = 5 [default = false];
bool Annotation::has_deletable() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Annotation::set_has_deletable() {
  _has_bits_[0] |= 0x00000010u;
}
void Annotation::clear_has_deletable() {
  _has_bits_[0] &= ~0x00000010u;
}
void Annotation::clear_deletable() {
  deletable_ = false;
  clear_has_deletable();
}
 bool Annotation::deletable() const {
  // @@protoc_insertion_point(field_get:mozc.commands.Annotation.deletable)
  return deletable_;
}
 void Annotation::set_deletable(bool value) {
  set_has_deletable();
  deletable_ = value;
  // @@protoc_insertion_point(field_set:mozc.commands.Annotation.deletable)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Information::kIdFieldNumber;
const int Information::kTitleFieldNumber;
const int Information::kDescriptionFieldNumber;
const int Information::kCandidateIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Information::Information()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mozc.commands.Information)
}

void Information::InitAsDefaultInstance() {
}

Information::Information(const Information& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mozc.commands.Information)
}

void Information::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0;
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Information::~Information() {
  // @@protoc_insertion_point(destructor:mozc.commands.Information)
  SharedDtor();
}

void Information::SharedDtor() {
  title_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Information::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Information::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Information_descriptor_;
}

const Information& Information::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2fcandidates_2eproto();
  return *default_instance_;
}

Information* Information::default_instance_ = NULL;

Information* Information::New(::google::protobuf::Arena* arena) const {
  Information* n = new Information;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Information::Clear() {
// @@protoc_insertion_point(message_clear_start:mozc.commands.Information)
  if (_has_bits_[0 / 32] & 7u) {
    id_ = 0;
    if (has_title()) {
      title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_description()) {
      description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  candidate_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Information::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mozc.commands.Information)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_title;
        break;
      }

      // optional string title = 2;
      case 2: {
        if (tag == 18) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mozc.commands.Information.title");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_description;
        break;
      }

      // optional string description = 3;
      case 3: {
        if (tag == 26) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mozc.commands.Information.description");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_candidate_id;
        break;
      }

      // repeated int32 candidate_id = 4;
      case 4: {
        if (tag == 32) {
         parse_candidate_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_candidate_id())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_candidate_id())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_candidate_id;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mozc.commands.Information)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mozc.commands.Information)
  return false;
#undef DO_
}

void Information::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mozc.commands.Information)
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional string title = 2;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mozc.commands.Information.title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->title(), output);
  }

  // optional string description = 3;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mozc.commands.Information.description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->description(), output);
  }

  // repeated int32 candidate_id = 4;
  for (int i = 0; i < this->candidate_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->candidate_id(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mozc.commands.Information)
}

::google::protobuf::uint8* Information::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mozc.commands.Information)
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional string title = 2;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mozc.commands.Information.title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->title(), target);
  }

  // optional string description = 3;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mozc.commands.Information.description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->description(), target);
  }

  // repeated int32 candidate_id = 4;
  for (int i = 0; i < this->candidate_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->candidate_id(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mozc.commands.Information)
  return target;
}

int Information::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:mozc.commands.Information)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional string title = 2;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // optional string description = 3;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }

  }
  // repeated int32 candidate_id = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->candidate_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->candidate_id(i));
    }
    total_size += 1 * this->candidate_id_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Information::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mozc.commands.Information)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Information* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Information>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mozc.commands.Information)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mozc.commands.Information)
    MergeFrom(*source);
  }
}

void Information::MergeFrom(const Information& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mozc.commands.Information)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  candidate_id_.MergeFrom(from.candidate_id_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_title()) {
      set_has_title();
      title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
    }
    if (from.has_description()) {
      set_has_description();
      description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Information::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mozc.commands.Information)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Information::CopyFrom(const Information& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mozc.commands.Information)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Information::IsInitialized() const {

  return true;
}

void Information::Swap(Information* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Information::InternalSwap(Information* other) {
  std::swap(id_, other->id_);
  title_.Swap(&other->title_);
  description_.Swap(&other->description_);
  candidate_id_.UnsafeArenaSwap(&other->candidate_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Information::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Information_descriptor_;
  metadata.reflection = Information_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Information

// optional int32 id = 1;
bool Information::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Information::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void Information::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void Information::clear_id() {
  id_ = 0;
  clear_has_id();
}
 ::google::protobuf::int32 Information::id() const {
  // @@protoc_insertion_point(field_get:mozc.commands.Information.id)
  return id_;
}
 void Information::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:mozc.commands.Information.id)
}

// optional string title = 2;
bool Information::has_title() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Information::set_has_title() {
  _has_bits_[0] |= 0x00000002u;
}
void Information::clear_has_title() {
  _has_bits_[0] &= ~0x00000002u;
}
void Information::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_title();
}
 const ::std::string& Information::title() const {
  // @@protoc_insertion_point(field_get:mozc.commands.Information.title)
  return title_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Information::set_title(const ::std::string& value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mozc.commands.Information.title)
}
 void Information::set_title(const char* value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mozc.commands.Information.title)
}
 void Information::set_title(const char* value, size_t size) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mozc.commands.Information.title)
}
 ::std::string* Information::mutable_title() {
  set_has_title();
  // @@protoc_insertion_point(field_mutable:mozc.commands.Information.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Information::release_title() {
  // @@protoc_insertion_point(field_release:mozc.commands.Information.title)
  clear_has_title();
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Information::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    set_has_title();
  } else {
    clear_has_title();
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:mozc.commands.Information.title)
}

// optional string description = 3;
bool Information::has_description() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Information::set_has_description() {
  _has_bits_[0] |= 0x00000004u;
}
void Information::clear_has_description() {
  _has_bits_[0] &= ~0x00000004u;
}
void Information::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_description();
}
 const ::std::string& Information::description() const {
  // @@protoc_insertion_point(field_get:mozc.commands.Information.description)
  return description_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Information::set_description(const ::std::string& value) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mozc.commands.Information.description)
}
 void Information::set_description(const char* value) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mozc.commands.Information.description)
}
 void Information::set_description(const char* value, size_t size) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mozc.commands.Information.description)
}
 ::std::string* Information::mutable_description() {
  set_has_description();
  // @@protoc_insertion_point(field_mutable:mozc.commands.Information.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Information::release_description() {
  // @@protoc_insertion_point(field_release:mozc.commands.Information.description)
  clear_has_description();
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Information::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    set_has_description();
  } else {
    clear_has_description();
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:mozc.commands.Information.description)
}

// repeated int32 candidate_id = 4;
int Information::candidate_id_size() const {
  return candidate_id_.size();
}
void Information::clear_candidate_id() {
  candidate_id_.Clear();
}
 ::google::protobuf::int32 Information::candidate_id(int index) const {
  // @@protoc_insertion_point(field_get:mozc.commands.Information.candidate_id)
  return candidate_id_.Get(index);
}
 void Information::set_candidate_id(int index, ::google::protobuf::int32 value) {
  candidate_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:mozc.commands.Information.candidate_id)
}
 void Information::add_candidate_id(::google::protobuf::int32 value) {
  candidate_id_.Add(value);
  // @@protoc_insertion_point(field_add:mozc.commands.Information.candidate_id)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Information::candidate_id() const {
  // @@protoc_insertion_point(field_list:mozc.commands.Information.candidate_id)
  return candidate_id_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Information::mutable_candidate_id() {
  // @@protoc_insertion_point(field_mutable_list:mozc.commands.Information.candidate_id)
  return &candidate_id_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InformationList::kFocusedIndexFieldNumber;
const int InformationList::kInformationFieldNumber;
const int InformationList::kCategoryFieldNumber;
const int InformationList::kDisplayTypeFieldNumber;
const int InformationList::kDelayFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InformationList::InformationList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mozc.commands.InformationList)
}

void InformationList::InitAsDefaultInstance() {
}

InformationList::InformationList(const InformationList& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mozc.commands.InformationList)
}

void InformationList::SharedCtor() {
  _cached_size_ = 0;
  focused_index_ = 0u;
  category_ = 0;
  display_type_ = 1;
  delay_ = 500u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InformationList::~InformationList() {
  // @@protoc_insertion_point(destructor:mozc.commands.InformationList)
  SharedDtor();
}

void InformationList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void InformationList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InformationList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InformationList_descriptor_;
}

const InformationList& InformationList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2fcandidates_2eproto();
  return *default_instance_;
}

InformationList* InformationList::default_instance_ = NULL;

InformationList* InformationList::New(::google::protobuf::Arena* arena) const {
  InformationList* n = new InformationList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InformationList::Clear() {
// @@protoc_insertion_point(message_clear_start:mozc.commands.InformationList)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(InformationList, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<InformationList*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 29u) {
    ZR_(focused_index_, category_);
    display_type_ = 1;
    delay_ = 500u;
  }

#undef ZR_HELPER_
#undef ZR_

  information_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool InformationList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mozc.commands.InformationList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 focused_index = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &focused_index_)));
          set_has_focused_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_information;
        break;
      }

      // repeated .mozc.commands.Information information = 2;
      case 2: {
        if (tag == 18) {
         parse_information:
          DO_(input->IncrementRecursionDepth());
         parse_loop_information:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_information()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_information;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(24)) goto parse_category;
        break;
      }

      // optional .mozc.commands.Category category = 3 [default = CONVERSION];
      case 3: {
        if (tag == 24) {
         parse_category:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mozc::commands::Category_IsValid(value)) {
            set_category(static_cast< ::mozc::commands::Category >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_display_type;
        break;
      }

      // optional .mozc.commands.DisplayType display_type = 4 [default = CASCADE];
      case 4: {
        if (tag == 32) {
         parse_display_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mozc::commands::DisplayType_IsValid(value)) {
            set_display_type(static_cast< ::mozc::commands::DisplayType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_delay;
        break;
      }

      // optional uint32 delay = 5 [default = 500];
      case 5: {
        if (tag == 40) {
         parse_delay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &delay_)));
          set_has_delay();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mozc.commands.InformationList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mozc.commands.InformationList)
  return false;
#undef DO_
}

void InformationList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mozc.commands.InformationList)
  // optional uint32 focused_index = 1;
  if (has_focused_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->focused_index(), output);
  }

  // repeated .mozc.commands.Information information = 2;
  for (unsigned int i = 0, n = this->information_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->information(i), output);
  }

  // optional .mozc.commands.Category category = 3 [default = CONVERSION];
  if (has_category()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->category(), output);
  }

  // optional .mozc.commands.DisplayType display_type = 4 [default = CASCADE];
  if (has_display_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->display_type(), output);
  }

  // optional uint32 delay = 5 [default = 500];
  if (has_delay()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->delay(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mozc.commands.InformationList)
}

::google::protobuf::uint8* InformationList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mozc.commands.InformationList)
  // optional uint32 focused_index = 1;
  if (has_focused_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->focused_index(), target);
  }

  // repeated .mozc.commands.Information information = 2;
  for (unsigned int i = 0, n = this->information_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->information(i), false, target);
  }

  // optional .mozc.commands.Category category = 3 [default = CONVERSION];
  if (has_category()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->category(), target);
  }

  // optional .mozc.commands.DisplayType display_type = 4 [default = CASCADE];
  if (has_display_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->display_type(), target);
  }

  // optional uint32 delay = 5 [default = 500];
  if (has_delay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->delay(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mozc.commands.InformationList)
  return target;
}

int InformationList::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:mozc.commands.InformationList)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 29u) {
    // optional uint32 focused_index = 1;
    if (has_focused_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->focused_index());
    }

    // optional .mozc.commands.Category category = 3 [default = CONVERSION];
    if (has_category()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->category());
    }

    // optional .mozc.commands.DisplayType display_type = 4 [default = CASCADE];
    if (has_display_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->display_type());
    }

    // optional uint32 delay = 5 [default = 500];
    if (has_delay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->delay());
    }

  }
  // repeated .mozc.commands.Information information = 2;
  total_size += 1 * this->information_size();
  for (int i = 0; i < this->information_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->information(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InformationList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mozc.commands.InformationList)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const InformationList* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const InformationList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mozc.commands.InformationList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mozc.commands.InformationList)
    MergeFrom(*source);
  }
}

void InformationList::MergeFrom(const InformationList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mozc.commands.InformationList)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  information_.MergeFrom(from.information_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_focused_index()) {
      set_focused_index(from.focused_index());
    }
    if (from.has_category()) {
      set_category(from.category());
    }
    if (from.has_display_type()) {
      set_display_type(from.display_type());
    }
    if (from.has_delay()) {
      set_delay(from.delay());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void InformationList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mozc.commands.InformationList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InformationList::CopyFrom(const InformationList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mozc.commands.InformationList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InformationList::IsInitialized() const {

  return true;
}

void InformationList::Swap(InformationList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InformationList::InternalSwap(InformationList* other) {
  std::swap(focused_index_, other->focused_index_);
  information_.UnsafeArenaSwap(&other->information_);
  std::swap(category_, other->category_);
  std::swap(display_type_, other->display_type_);
  std::swap(delay_, other->delay_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InformationList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InformationList_descriptor_;
  metadata.reflection = InformationList_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InformationList

// optional uint32 focused_index = 1;
bool InformationList::has_focused_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void InformationList::set_has_focused_index() {
  _has_bits_[0] |= 0x00000001u;
}
void InformationList::clear_has_focused_index() {
  _has_bits_[0] &= ~0x00000001u;
}
void InformationList::clear_focused_index() {
  focused_index_ = 0u;
  clear_has_focused_index();
}
 ::google::protobuf::uint32 InformationList::focused_index() const {
  // @@protoc_insertion_point(field_get:mozc.commands.InformationList.focused_index)
  return focused_index_;
}
 void InformationList::set_focused_index(::google::protobuf::uint32 value) {
  set_has_focused_index();
  focused_index_ = value;
  // @@protoc_insertion_point(field_set:mozc.commands.InformationList.focused_index)
}

// repeated .mozc.commands.Information information = 2;
int InformationList::information_size() const {
  return information_.size();
}
void InformationList::clear_information() {
  information_.Clear();
}
const ::mozc::commands::Information& InformationList::information(int index) const {
  // @@protoc_insertion_point(field_get:mozc.commands.InformationList.information)
  return information_.Get(index);
}
::mozc::commands::Information* InformationList::mutable_information(int index) {
  // @@protoc_insertion_point(field_mutable:mozc.commands.InformationList.information)
  return information_.Mutable(index);
}
::mozc::commands::Information* InformationList::add_information() {
  // @@protoc_insertion_point(field_add:mozc.commands.InformationList.information)
  return information_.Add();
}
::google::protobuf::RepeatedPtrField< ::mozc::commands::Information >*
InformationList::mutable_information() {
  // @@protoc_insertion_point(field_mutable_list:mozc.commands.InformationList.information)
  return &information_;
}
const ::google::protobuf::RepeatedPtrField< ::mozc::commands::Information >&
InformationList::information() const {
  // @@protoc_insertion_point(field_list:mozc.commands.InformationList.information)
  return information_;
}

// optional .mozc.commands.Category category = 3 [default = CONVERSION];
bool InformationList::has_category() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void InformationList::set_has_category() {
  _has_bits_[0] |= 0x00000004u;
}
void InformationList::clear_has_category() {
  _has_bits_[0] &= ~0x00000004u;
}
void InformationList::clear_category() {
  category_ = 0;
  clear_has_category();
}
 ::mozc::commands::Category InformationList::category() const {
  // @@protoc_insertion_point(field_get:mozc.commands.InformationList.category)
  return static_cast< ::mozc::commands::Category >(category_);
}
 void InformationList::set_category(::mozc::commands::Category value) {
  assert(::mozc::commands::Category_IsValid(value));
  set_has_category();
  category_ = value;
  // @@protoc_insertion_point(field_set:mozc.commands.InformationList.category)
}

// optional .mozc.commands.DisplayType display_type = 4 [default = CASCADE];
bool InformationList::has_display_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void InformationList::set_has_display_type() {
  _has_bits_[0] |= 0x00000008u;
}
void InformationList::clear_has_display_type() {
  _has_bits_[0] &= ~0x00000008u;
}
void InformationList::clear_display_type() {
  display_type_ = 1;
  clear_has_display_type();
}
 ::mozc::commands::DisplayType InformationList::display_type() const {
  // @@protoc_insertion_point(field_get:mozc.commands.InformationList.display_type)
  return static_cast< ::mozc::commands::DisplayType >(display_type_);
}
 void InformationList::set_display_type(::mozc::commands::DisplayType value) {
  assert(::mozc::commands::DisplayType_IsValid(value));
  set_has_display_type();
  display_type_ = value;
  // @@protoc_insertion_point(field_set:mozc.commands.InformationList.display_type)
}

// optional uint32 delay = 5 [default = 500];
bool InformationList::has_delay() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void InformationList::set_has_delay() {
  _has_bits_[0] |= 0x00000010u;
}
void InformationList::clear_has_delay() {
  _has_bits_[0] &= ~0x00000010u;
}
void InformationList::clear_delay() {
  delay_ = 500u;
  clear_has_delay();
}
 ::google::protobuf::uint32 InformationList::delay() const {
  // @@protoc_insertion_point(field_get:mozc.commands.InformationList.delay)
  return delay_;
}
 void InformationList::set_delay(::google::protobuf::uint32 value) {
  set_has_delay();
  delay_ = value;
  // @@protoc_insertion_point(field_set:mozc.commands.InformationList.delay)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Footer::kLabelFieldNumber;
const int Footer::kIndexVisibleFieldNumber;
const int Footer::kLogoVisibleFieldNumber;
const int Footer::kSubLabelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Footer::Footer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mozc.commands.Footer)
}

void Footer::InitAsDefaultInstance() {
}

Footer::Footer(const Footer& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mozc.commands.Footer)
}

void Footer::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  label_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  index_visible_ = false;
  logo_visible_ = false;
  sub_label_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Footer::~Footer() {
  // @@protoc_insertion_point(destructor:mozc.commands.Footer)
  SharedDtor();
}

void Footer::SharedDtor() {
  label_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sub_label_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Footer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Footer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Footer_descriptor_;
}

const Footer& Footer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2fcandidates_2eproto();
  return *default_instance_;
}

Footer* Footer::default_instance_ = NULL;

Footer* Footer::New(::google::protobuf::Arena* arena) const {
  Footer* n = new Footer;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Footer::Clear() {
// @@protoc_insertion_point(message_clear_start:mozc.commands.Footer)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Footer, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Footer*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 15u) {
    ZR_(index_visible_, logo_visible_);
    if (has_label()) {
      label_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_sub_label()) {
      sub_label_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Footer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mozc.commands.Footer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string label = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_label()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->label().data(), this->label().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mozc.commands.Footer.label");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_index_visible;
        break;
      }

      // optional bool index_visible = 2 [default = false];
      case 2: {
        if (tag == 16) {
         parse_index_visible:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &index_visible_)));
          set_has_index_visible();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_logo_visible;
        break;
      }

      // optional bool logo_visible = 3 [default = false];
      case 3: {
        if (tag == 24) {
         parse_logo_visible:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &logo_visible_)));
          set_has_logo_visible();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_sub_label;
        break;
      }

      // optional string sub_label = 4;
      case 4: {
        if (tag == 34) {
         parse_sub_label:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sub_label()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sub_label().data(), this->sub_label().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mozc.commands.Footer.sub_label");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mozc.commands.Footer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mozc.commands.Footer)
  return false;
#undef DO_
}

void Footer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mozc.commands.Footer)
  // optional string label = 1;
  if (has_label()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->label().data(), this->label().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mozc.commands.Footer.label");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->label(), output);
  }

  // optional bool index_visible = 2 [default = false];
  if (has_index_visible()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->index_visible(), output);
  }

  // optional bool logo_visible = 3 [default = false];
  if (has_logo_visible()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->logo_visible(), output);
  }

  // optional string sub_label = 4;
  if (has_sub_label()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sub_label().data(), this->sub_label().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mozc.commands.Footer.sub_label");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->sub_label(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mozc.commands.Footer)
}

::google::protobuf::uint8* Footer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mozc.commands.Footer)
  // optional string label = 1;
  if (has_label()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->label().data(), this->label().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mozc.commands.Footer.label");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->label(), target);
  }

  // optional bool index_visible = 2 [default = false];
  if (has_index_visible()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->index_visible(), target);
  }

  // optional bool logo_visible = 3 [default = false];
  if (has_logo_visible()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->logo_visible(), target);
  }

  // optional string sub_label = 4;
  if (has_sub_label()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sub_label().data(), this->sub_label().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mozc.commands.Footer.sub_label");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->sub_label(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mozc.commands.Footer)
  return target;
}

int Footer::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:mozc.commands.Footer)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 15u) {
    // optional string label = 1;
    if (has_label()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->label());
    }

    // optional bool index_visible = 2 [default = false];
    if (has_index_visible()) {
      total_size += 1 + 1;
    }

    // optional bool logo_visible = 3 [default = false];
    if (has_logo_visible()) {
      total_size += 1 + 1;
    }

    // optional string sub_label = 4;
    if (has_sub_label()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sub_label());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Footer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mozc.commands.Footer)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Footer* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Footer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mozc.commands.Footer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mozc.commands.Footer)
    MergeFrom(*source);
  }
}

void Footer::MergeFrom(const Footer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mozc.commands.Footer)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_label()) {
      set_has_label();
      label_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.label_);
    }
    if (from.has_index_visible()) {
      set_index_visible(from.index_visible());
    }
    if (from.has_logo_visible()) {
      set_logo_visible(from.logo_visible());
    }
    if (from.has_sub_label()) {
      set_has_sub_label();
      sub_label_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sub_label_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Footer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mozc.commands.Footer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Footer::CopyFrom(const Footer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mozc.commands.Footer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Footer::IsInitialized() const {

  return true;
}

void Footer::Swap(Footer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Footer::InternalSwap(Footer* other) {
  label_.Swap(&other->label_);
  std::swap(index_visible_, other->index_visible_);
  std::swap(logo_visible_, other->logo_visible_);
  sub_label_.Swap(&other->sub_label_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Footer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Footer_descriptor_;
  metadata.reflection = Footer_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Footer

// optional string label = 1;
bool Footer::has_label() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Footer::set_has_label() {
  _has_bits_[0] |= 0x00000001u;
}
void Footer::clear_has_label() {
  _has_bits_[0] &= ~0x00000001u;
}
void Footer::clear_label() {
  label_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_label();
}
 const ::std::string& Footer::label() const {
  // @@protoc_insertion_point(field_get:mozc.commands.Footer.label)
  return label_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Footer::set_label(const ::std::string& value) {
  set_has_label();
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mozc.commands.Footer.label)
}
 void Footer::set_label(const char* value) {
  set_has_label();
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mozc.commands.Footer.label)
}
 void Footer::set_label(const char* value, size_t size) {
  set_has_label();
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mozc.commands.Footer.label)
}
 ::std::string* Footer::mutable_label() {
  set_has_label();
  // @@protoc_insertion_point(field_mutable:mozc.commands.Footer.label)
  return label_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Footer::release_label() {
  // @@protoc_insertion_point(field_release:mozc.commands.Footer.label)
  clear_has_label();
  return label_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Footer::set_allocated_label(::std::string* label) {
  if (label != NULL) {
    set_has_label();
  } else {
    clear_has_label();
  }
  label_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), label);
  // @@protoc_insertion_point(field_set_allocated:mozc.commands.Footer.label)
}

// optional bool index_visible = 2 [default = false];
bool Footer::has_index_visible() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Footer::set_has_index_visible() {
  _has_bits_[0] |= 0x00000002u;
}
void Footer::clear_has_index_visible() {
  _has_bits_[0] &= ~0x00000002u;
}
void Footer::clear_index_visible() {
  index_visible_ = false;
  clear_has_index_visible();
}
 bool Footer::index_visible() const {
  // @@protoc_insertion_point(field_get:mozc.commands.Footer.index_visible)
  return index_visible_;
}
 void Footer::set_index_visible(bool value) {
  set_has_index_visible();
  index_visible_ = value;
  // @@protoc_insertion_point(field_set:mozc.commands.Footer.index_visible)
}

// optional bool logo_visible = 3 [default = false];
bool Footer::has_logo_visible() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Footer::set_has_logo_visible() {
  _has_bits_[0] |= 0x00000004u;
}
void Footer::clear_has_logo_visible() {
  _has_bits_[0] &= ~0x00000004u;
}
void Footer::clear_logo_visible() {
  logo_visible_ = false;
  clear_has_logo_visible();
}
 bool Footer::logo_visible() const {
  // @@protoc_insertion_point(field_get:mozc.commands.Footer.logo_visible)
  return logo_visible_;
}
 void Footer::set_logo_visible(bool value) {
  set_has_logo_visible();
  logo_visible_ = value;
  // @@protoc_insertion_point(field_set:mozc.commands.Footer.logo_visible)
}

// optional string sub_label = 4;
bool Footer::has_sub_label() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Footer::set_has_sub_label() {
  _has_bits_[0] |= 0x00000008u;
}
void Footer::clear_has_sub_label() {
  _has_bits_[0] &= ~0x00000008u;
}
void Footer::clear_sub_label() {
  sub_label_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sub_label();
}
 const ::std::string& Footer::sub_label() const {
  // @@protoc_insertion_point(field_get:mozc.commands.Footer.sub_label)
  return sub_label_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Footer::set_sub_label(const ::std::string& value) {
  set_has_sub_label();
  sub_label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mozc.commands.Footer.sub_label)
}
 void Footer::set_sub_label(const char* value) {
  set_has_sub_label();
  sub_label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mozc.commands.Footer.sub_label)
}
 void Footer::set_sub_label(const char* value, size_t size) {
  set_has_sub_label();
  sub_label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mozc.commands.Footer.sub_label)
}
 ::std::string* Footer::mutable_sub_label() {
  set_has_sub_label();
  // @@protoc_insertion_point(field_mutable:mozc.commands.Footer.sub_label)
  return sub_label_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Footer::release_sub_label() {
  // @@protoc_insertion_point(field_release:mozc.commands.Footer.sub_label)
  clear_has_sub_label();
  return sub_label_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Footer::set_allocated_sub_label(::std::string* sub_label) {
  if (sub_label != NULL) {
    set_has_sub_label();
  } else {
    clear_has_sub_label();
  }
  sub_label_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sub_label);
  // @@protoc_insertion_point(field_set_allocated:mozc.commands.Footer.sub_label)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CandidateWord::kIdFieldNumber;
const int CandidateWord::kIndexFieldNumber;
const int CandidateWord::kKeyFieldNumber;
const int CandidateWord::kValueFieldNumber;
const int CandidateWord::kAnnotationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CandidateWord::CandidateWord()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mozc.commands.CandidateWord)
}

void CandidateWord::InitAsDefaultInstance() {
  annotation_ = const_cast< ::mozc::commands::Annotation*>(&::mozc::commands::Annotation::default_instance());
}

CandidateWord::CandidateWord(const CandidateWord& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mozc.commands.CandidateWord)
}

void CandidateWord::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0;
  index_ = 0u;
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  annotation_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CandidateWord::~CandidateWord() {
  // @@protoc_insertion_point(destructor:mozc.commands.CandidateWord)
  SharedDtor();
}

void CandidateWord::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete annotation_;
  }
}

void CandidateWord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CandidateWord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CandidateWord_descriptor_;
}

const CandidateWord& CandidateWord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2fcandidates_2eproto();
  return *default_instance_;
}

CandidateWord* CandidateWord::default_instance_ = NULL;

CandidateWord* CandidateWord::New(::google::protobuf::Arena* arena) const {
  CandidateWord* n = new CandidateWord;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CandidateWord::Clear() {
// @@protoc_insertion_point(message_clear_start:mozc.commands.CandidateWord)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(CandidateWord, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CandidateWord*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 31u) {
    ZR_(id_, index_);
    if (has_key()) {
      key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_value()) {
      value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_annotation()) {
      if (annotation_ != NULL) annotation_->::mozc::commands::Annotation::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CandidateWord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mozc.commands.CandidateWord)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_index;
        break;
      }

      // optional uint32 index = 2;
      case 2: {
        if (tag == 16) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_key;
        break;
      }

      // optional string key = 3;
      case 3: {
        if (tag == 26) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mozc.commands.CandidateWord.key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_value;
        break;
      }

      // optional string value = 4;
      case 4: {
        if (tag == 34) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mozc.commands.CandidateWord.value");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_annotation;
        break;
      }

      // optional .mozc.commands.Annotation annotation = 5;
      case 5: {
        if (tag == 42) {
         parse_annotation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_annotation()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mozc.commands.CandidateWord)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mozc.commands.CandidateWord)
  return false;
#undef DO_
}

void CandidateWord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mozc.commands.CandidateWord)
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional uint32 index = 2;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->index(), output);
  }

  // optional string key = 3;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mozc.commands.CandidateWord.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->key(), output);
  }

  // optional string value = 4;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mozc.commands.CandidateWord.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->value(), output);
  }

  // optional .mozc.commands.Annotation annotation = 5;
  if (has_annotation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->annotation_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mozc.commands.CandidateWord)
}

::google::protobuf::uint8* CandidateWord::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mozc.commands.CandidateWord)
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional uint32 index = 2;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->index(), target);
  }

  // optional string key = 3;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mozc.commands.CandidateWord.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->key(), target);
  }

  // optional string value = 4;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mozc.commands.CandidateWord.value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->value(), target);
  }

  // optional .mozc.commands.Annotation annotation = 5;
  if (has_annotation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->annotation_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mozc.commands.CandidateWord)
  return target;
}

int CandidateWord::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:mozc.commands.CandidateWord)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 31u) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional uint32 index = 2;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }

    // optional string key = 3;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // optional string value = 4;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

    // optional .mozc.commands.Annotation annotation = 5;
    if (has_annotation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->annotation_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CandidateWord::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mozc.commands.CandidateWord)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const CandidateWord* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CandidateWord>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mozc.commands.CandidateWord)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mozc.commands.CandidateWord)
    MergeFrom(*source);
  }
}

void CandidateWord::MergeFrom(const CandidateWord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mozc.commands.CandidateWord)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_key()) {
      set_has_key();
      key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
    }
    if (from.has_value()) {
      set_has_value();
      value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
    }
    if (from.has_annotation()) {
      mutable_annotation()->::mozc::commands::Annotation::MergeFrom(from.annotation());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CandidateWord::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mozc.commands.CandidateWord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CandidateWord::CopyFrom(const CandidateWord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mozc.commands.CandidateWord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CandidateWord::IsInitialized() const {

  return true;
}

void CandidateWord::Swap(CandidateWord* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CandidateWord::InternalSwap(CandidateWord* other) {
  std::swap(id_, other->id_);
  std::swap(index_, other->index_);
  key_.Swap(&other->key_);
  value_.Swap(&other->value_);
  std::swap(annotation_, other->annotation_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CandidateWord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CandidateWord_descriptor_;
  metadata.reflection = CandidateWord_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CandidateWord

// optional int32 id = 1;
bool CandidateWord::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CandidateWord::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CandidateWord::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CandidateWord::clear_id() {
  id_ = 0;
  clear_has_id();
}
 ::google::protobuf::int32 CandidateWord::id() const {
  // @@protoc_insertion_point(field_get:mozc.commands.CandidateWord.id)
  return id_;
}
 void CandidateWord::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:mozc.commands.CandidateWord.id)
}

// optional uint32 index = 2;
bool CandidateWord::has_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CandidateWord::set_has_index() {
  _has_bits_[0] |= 0x00000002u;
}
void CandidateWord::clear_has_index() {
  _has_bits_[0] &= ~0x00000002u;
}
void CandidateWord::clear_index() {
  index_ = 0u;
  clear_has_index();
}
 ::google::protobuf::uint32 CandidateWord::index() const {
  // @@protoc_insertion_point(field_get:mozc.commands.CandidateWord.index)
  return index_;
}
 void CandidateWord::set_index(::google::protobuf::uint32 value) {
  set_has_index();
  index_ = value;
  // @@protoc_insertion_point(field_set:mozc.commands.CandidateWord.index)
}

// optional string key = 3;
bool CandidateWord::has_key() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CandidateWord::set_has_key() {
  _has_bits_[0] |= 0x00000004u;
}
void CandidateWord::clear_has_key() {
  _has_bits_[0] &= ~0x00000004u;
}
void CandidateWord::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
 const ::std::string& CandidateWord::key() const {
  // @@protoc_insertion_point(field_get:mozc.commands.CandidateWord.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CandidateWord::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mozc.commands.CandidateWord.key)
}
 void CandidateWord::set_key(const char* value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mozc.commands.CandidateWord.key)
}
 void CandidateWord::set_key(const char* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mozc.commands.CandidateWord.key)
}
 ::std::string* CandidateWord::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:mozc.commands.CandidateWord.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CandidateWord::release_key() {
  // @@protoc_insertion_point(field_release:mozc.commands.CandidateWord.key)
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CandidateWord::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:mozc.commands.CandidateWord.key)
}

// optional string value = 4;
bool CandidateWord::has_value() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CandidateWord::set_has_value() {
  _has_bits_[0] |= 0x00000008u;
}
void CandidateWord::clear_has_value() {
  _has_bits_[0] &= ~0x00000008u;
}
void CandidateWord::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}
 const ::std::string& CandidateWord::value() const {
  // @@protoc_insertion_point(field_get:mozc.commands.CandidateWord.value)
  return value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CandidateWord::set_value(const ::std::string& value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mozc.commands.CandidateWord.value)
}
 void CandidateWord::set_value(const char* value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mozc.commands.CandidateWord.value)
}
 void CandidateWord::set_value(const char* value, size_t size) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mozc.commands.CandidateWord.value)
}
 ::std::string* CandidateWord::mutable_value() {
  set_has_value();
  // @@protoc_insertion_point(field_mutable:mozc.commands.CandidateWord.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CandidateWord::release_value() {
  // @@protoc_insertion_point(field_release:mozc.commands.CandidateWord.value)
  clear_has_value();
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CandidateWord::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    set_has_value();
  } else {
    clear_has_value();
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:mozc.commands.CandidateWord.value)
}

// optional .mozc.commands.Annotation annotation = 5;
bool CandidateWord::has_annotation() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CandidateWord::set_has_annotation() {
  _has_bits_[0] |= 0x00000010u;
}
void CandidateWord::clear_has_annotation() {
  _has_bits_[0] &= ~0x00000010u;
}
void CandidateWord::clear_annotation() {
  if (annotation_ != NULL) annotation_->::mozc::commands::Annotation::Clear();
  clear_has_annotation();
}
const ::mozc::commands::Annotation& CandidateWord::annotation() const {
  // @@protoc_insertion_point(field_get:mozc.commands.CandidateWord.annotation)
  return annotation_ != NULL ? *annotation_ : *default_instance_->annotation_;
}
::mozc::commands::Annotation* CandidateWord::mutable_annotation() {
  set_has_annotation();
  if (annotation_ == NULL) {
    annotation_ = new ::mozc::commands::Annotation;
  }
  // @@protoc_insertion_point(field_mutable:mozc.commands.CandidateWord.annotation)
  return annotation_;
}
::mozc::commands::Annotation* CandidateWord::release_annotation() {
  // @@protoc_insertion_point(field_release:mozc.commands.CandidateWord.annotation)
  clear_has_annotation();
  ::mozc::commands::Annotation* temp = annotation_;
  annotation_ = NULL;
  return temp;
}
void CandidateWord::set_allocated_annotation(::mozc::commands::Annotation* annotation) {
  delete annotation_;
  annotation_ = annotation;
  if (annotation) {
    set_has_annotation();
  } else {
    clear_has_annotation();
  }
  // @@protoc_insertion_point(field_set_allocated:mozc.commands.CandidateWord.annotation)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CandidateList::kFocusedIndexFieldNumber;
const int CandidateList::kCandidatesFieldNumber;
const int CandidateList::kCategoryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CandidateList::CandidateList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mozc.commands.CandidateList)
}

void CandidateList::InitAsDefaultInstance() {
}

CandidateList::CandidateList(const CandidateList& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mozc.commands.CandidateList)
}

void CandidateList::SharedCtor() {
  _cached_size_ = 0;
  focused_index_ = 0u;
  category_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CandidateList::~CandidateList() {
  // @@protoc_insertion_point(destructor:mozc.commands.CandidateList)
  SharedDtor();
}

void CandidateList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CandidateList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CandidateList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CandidateList_descriptor_;
}

const CandidateList& CandidateList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2fcandidates_2eproto();
  return *default_instance_;
}

CandidateList* CandidateList::default_instance_ = NULL;

CandidateList* CandidateList::New(::google::protobuf::Arena* arena) const {
  CandidateList* n = new CandidateList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CandidateList::Clear() {
// @@protoc_insertion_point(message_clear_start:mozc.commands.CandidateList)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(CandidateList, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CandidateList*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(focused_index_, category_);

#undef ZR_HELPER_
#undef ZR_

  candidates_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CandidateList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mozc.commands.CandidateList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 focused_index = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &focused_index_)));
          set_has_focused_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_candidates;
        break;
      }

      // repeated .mozc.commands.CandidateWord candidates = 2;
      case 2: {
        if (tag == 18) {
         parse_candidates:
          DO_(input->IncrementRecursionDepth());
         parse_loop_candidates:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_candidates()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_candidates;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(24)) goto parse_category;
        break;
      }

      // optional .mozc.commands.Category category = 3 [default = CONVERSION];
      case 3: {
        if (tag == 24) {
         parse_category:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mozc::commands::Category_IsValid(value)) {
            set_category(static_cast< ::mozc::commands::Category >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mozc.commands.CandidateList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mozc.commands.CandidateList)
  return false;
#undef DO_
}

void CandidateList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mozc.commands.CandidateList)
  // optional uint32 focused_index = 1;
  if (has_focused_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->focused_index(), output);
  }

  // repeated .mozc.commands.CandidateWord candidates = 2;
  for (unsigned int i = 0, n = this->candidates_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->candidates(i), output);
  }

  // optional .mozc.commands.Category category = 3 [default = CONVERSION];
  if (has_category()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->category(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mozc.commands.CandidateList)
}

::google::protobuf::uint8* CandidateList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mozc.commands.CandidateList)
  // optional uint32 focused_index = 1;
  if (has_focused_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->focused_index(), target);
  }

  // repeated .mozc.commands.CandidateWord candidates = 2;
  for (unsigned int i = 0, n = this->candidates_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->candidates(i), false, target);
  }

  // optional .mozc.commands.Category category = 3 [default = CONVERSION];
  if (has_category()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->category(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mozc.commands.CandidateList)
  return target;
}

int CandidateList::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:mozc.commands.CandidateList)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 5u) {
    // optional uint32 focused_index = 1;
    if (has_focused_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->focused_index());
    }

    // optional .mozc.commands.Category category = 3 [default = CONVERSION];
    if (has_category()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->category());
    }

  }
  // repeated .mozc.commands.CandidateWord candidates = 2;
  total_size += 1 * this->candidates_size();
  for (int i = 0; i < this->candidates_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->candidates(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CandidateList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mozc.commands.CandidateList)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const CandidateList* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CandidateList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mozc.commands.CandidateList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mozc.commands.CandidateList)
    MergeFrom(*source);
  }
}

void CandidateList::MergeFrom(const CandidateList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mozc.commands.CandidateList)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  candidates_.MergeFrom(from.candidates_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_focused_index()) {
      set_focused_index(from.focused_index());
    }
    if (from.has_category()) {
      set_category(from.category());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CandidateList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mozc.commands.CandidateList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CandidateList::CopyFrom(const CandidateList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mozc.commands.CandidateList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CandidateList::IsInitialized() const {

  return true;
}

void CandidateList::Swap(CandidateList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CandidateList::InternalSwap(CandidateList* other) {
  std::swap(focused_index_, other->focused_index_);
  candidates_.UnsafeArenaSwap(&other->candidates_);
  std::swap(category_, other->category_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CandidateList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CandidateList_descriptor_;
  metadata.reflection = CandidateList_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CandidateList

// optional uint32 focused_index = 1;
bool CandidateList::has_focused_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CandidateList::set_has_focused_index() {
  _has_bits_[0] |= 0x00000001u;
}
void CandidateList::clear_has_focused_index() {
  _has_bits_[0] &= ~0x00000001u;
}
void CandidateList::clear_focused_index() {
  focused_index_ = 0u;
  clear_has_focused_index();
}
 ::google::protobuf::uint32 CandidateList::focused_index() const {
  // @@protoc_insertion_point(field_get:mozc.commands.CandidateList.focused_index)
  return focused_index_;
}
 void CandidateList::set_focused_index(::google::protobuf::uint32 value) {
  set_has_focused_index();
  focused_index_ = value;
  // @@protoc_insertion_point(field_set:mozc.commands.CandidateList.focused_index)
}

// repeated .mozc.commands.CandidateWord candidates = 2;
int CandidateList::candidates_size() const {
  return candidates_.size();
}
void CandidateList::clear_candidates() {
  candidates_.Clear();
}
const ::mozc::commands::CandidateWord& CandidateList::candidates(int index) const {
  // @@protoc_insertion_point(field_get:mozc.commands.CandidateList.candidates)
  return candidates_.Get(index);
}
::mozc::commands::CandidateWord* CandidateList::mutable_candidates(int index) {
  // @@protoc_insertion_point(field_mutable:mozc.commands.CandidateList.candidates)
  return candidates_.Mutable(index);
}
::mozc::commands::CandidateWord* CandidateList::add_candidates() {
  // @@protoc_insertion_point(field_add:mozc.commands.CandidateList.candidates)
  return candidates_.Add();
}
::google::protobuf::RepeatedPtrField< ::mozc::commands::CandidateWord >*
CandidateList::mutable_candidates() {
  // @@protoc_insertion_point(field_mutable_list:mozc.commands.CandidateList.candidates)
  return &candidates_;
}
const ::google::protobuf::RepeatedPtrField< ::mozc::commands::CandidateWord >&
CandidateList::candidates() const {
  // @@protoc_insertion_point(field_list:mozc.commands.CandidateList.candidates)
  return candidates_;
}

// optional .mozc.commands.Category category = 3 [default = CONVERSION];
bool CandidateList::has_category() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CandidateList::set_has_category() {
  _has_bits_[0] |= 0x00000004u;
}
void CandidateList::clear_has_category() {
  _has_bits_[0] &= ~0x00000004u;
}
void CandidateList::clear_category() {
  category_ = 0;
  clear_has_category();
}
 ::mozc::commands::Category CandidateList::category() const {
  // @@protoc_insertion_point(field_get:mozc.commands.CandidateList.category)
  return static_cast< ::mozc::commands::Category >(category_);
}
 void CandidateList::set_category(::mozc::commands::Category value) {
  assert(::mozc::commands::Category_IsValid(value));
  set_has_category();
  category_ = value;
  // @@protoc_insertion_point(field_set:mozc.commands.CandidateList.category)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* Candidates_Direction_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Candidates_Direction_descriptor_;
}
bool Candidates_Direction_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Candidates_Direction Candidates::VERTICAL;
const Candidates_Direction Candidates::HORIZONTAL;
const Candidates_Direction Candidates::Direction_MIN;
const Candidates_Direction Candidates::Direction_MAX;
const int Candidates::Direction_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Candidates_Candidate::kIndexFieldNumber;
const int Candidates_Candidate::kValueFieldNumber;
const int Candidates_Candidate::kIdFieldNumber;
const int Candidates_Candidate::kAnnotationFieldNumber;
const int Candidates_Candidate::kInformationIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Candidates_Candidate::Candidates_Candidate()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mozc.commands.Candidates.Candidate)
}

void Candidates_Candidate::InitAsDefaultInstance() {
  annotation_ = const_cast< ::mozc::commands::Annotation*>(&::mozc::commands::Annotation::default_instance());
}

Candidates_Candidate::Candidates_Candidate(const Candidates_Candidate& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mozc.commands.Candidates.Candidate)
}

void Candidates_Candidate::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  index_ = 0u;
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = 0;
  annotation_ = NULL;
  information_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Candidates_Candidate::~Candidates_Candidate() {
  // @@protoc_insertion_point(destructor:mozc.commands.Candidates.Candidate)
  SharedDtor();
}

void Candidates_Candidate::SharedDtor() {
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete annotation_;
  }
}

void Candidates_Candidate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Candidates_Candidate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Candidates_Candidate_descriptor_;
}

const Candidates_Candidate& Candidates_Candidate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2fcandidates_2eproto();
  return *default_instance_;
}

Candidates_Candidate* Candidates_Candidate::default_instance_ = NULL;

Candidates_Candidate* Candidates_Candidate::New(::google::protobuf::Arena* arena) const {
  Candidates_Candidate* n = new Candidates_Candidate;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Candidates_Candidate::Clear() {
// @@protoc_insertion_point(message_clear_start:mozc.commands.Candidates.Candidate)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Candidates_Candidate, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Candidates_Candidate*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 31u) {
    ZR_(index_, id_);
    if (has_value()) {
      value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_annotation()) {
      if (annotation_ != NULL) annotation_->::mozc::commands::Annotation::Clear();
    }
    information_id_ = 0;
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Candidates_Candidate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mozc.commands.Candidates.Candidate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 index = 4;
      case 4: {
        if (tag == 32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_value;
        break;
      }

      // required string value = 5;
      case 5: {
        if (tag == 42) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mozc.commands.Candidates.Candidate.value");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_annotation;
        break;
      }

      // optional .mozc.commands.Annotation annotation = 7;
      case 7: {
        if (tag == 58) {
         parse_annotation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_annotation()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_id;
        break;
      }

      // optional int32 id = 9;
      case 9: {
        if (tag == 72) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_information_id;
        break;
      }

      // optional int32 information_id = 10;
      case 10: {
        if (tag == 80) {
         parse_information_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &information_id_)));
          set_has_information_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mozc.commands.Candidates.Candidate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mozc.commands.Candidates.Candidate)
  return false;
#undef DO_
}

void Candidates_Candidate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mozc.commands.Candidates.Candidate)
  // required uint32 index = 4;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->index(), output);
  }

  // required string value = 5;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mozc.commands.Candidates.Candidate.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->value(), output);
  }

  // optional .mozc.commands.Annotation annotation = 7;
  if (has_annotation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->annotation_, output);
  }

  // optional int32 id = 9;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->id(), output);
  }

  // optional int32 information_id = 10;
  if (has_information_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->information_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mozc.commands.Candidates.Candidate)
}

::google::protobuf::uint8* Candidates_Candidate::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mozc.commands.Candidates.Candidate)
  // required uint32 index = 4;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->index(), target);
  }

  // required string value = 5;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mozc.commands.Candidates.Candidate.value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->value(), target);
  }

  // optional .mozc.commands.Annotation annotation = 7;
  if (has_annotation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->annotation_, false, target);
  }

  // optional int32 id = 9;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->id(), target);
  }

  // optional int32 information_id = 10;
  if (has_information_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->information_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mozc.commands.Candidates.Candidate)
  return target;
}

int Candidates_Candidate::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:mozc.commands.Candidates.Candidate)
  int total_size = 0;

  if (has_index()) {
    // required uint32 index = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->index());
  }

  if (has_value()) {
    // required string value = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->value());
  }

  return total_size;
}
int Candidates_Candidate::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:mozc.commands.Candidates.Candidate)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 index = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->index());

    // required string value = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->value());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[2 / 32] & 28u) {
    // optional int32 id = 9;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional .mozc.commands.Annotation annotation = 7;
    if (has_annotation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->annotation_);
    }

    // optional int32 information_id = 10;
    if (has_information_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->information_id());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Candidates_Candidate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mozc.commands.Candidates.Candidate)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Candidates_Candidate* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Candidates_Candidate>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mozc.commands.Candidates.Candidate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mozc.commands.Candidates.Candidate)
    MergeFrom(*source);
  }
}

void Candidates_Candidate::MergeFrom(const Candidates_Candidate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mozc.commands.Candidates.Candidate)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_value()) {
      set_has_value();
      value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_annotation()) {
      mutable_annotation()->::mozc::commands::Annotation::MergeFrom(from.annotation());
    }
    if (from.has_information_id()) {
      set_information_id(from.information_id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Candidates_Candidate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mozc.commands.Candidates.Candidate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Candidates_Candidate::CopyFrom(const Candidates_Candidate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mozc.commands.Candidates.Candidate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Candidates_Candidate::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Candidates_Candidate::Swap(Candidates_Candidate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Candidates_Candidate::InternalSwap(Candidates_Candidate* other) {
  std::swap(index_, other->index_);
  value_.Swap(&other->value_);
  std::swap(id_, other->id_);
  std::swap(annotation_, other->annotation_);
  std::swap(information_id_, other->information_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Candidates_Candidate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Candidates_Candidate_descriptor_;
  metadata.reflection = Candidates_Candidate_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Candidates::kFocusedIndexFieldNumber;
const int Candidates::kSizeFieldNumber;
const int Candidates::kCandidateFieldNumber;
const int Candidates::kPositionFieldNumber;
const int Candidates::kSubcandidatesFieldNumber;
const int Candidates::kUsagesFieldNumber;
const int Candidates::kCategoryFieldNumber;
const int Candidates::kDisplayTypeFieldNumber;
const int Candidates::kFooterFieldNumber;
const int Candidates::kDirectionFieldNumber;
const int Candidates::kPageSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Candidates::Candidates()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mozc.commands.Candidates)
}

void Candidates::InitAsDefaultInstance() {
  subcandidates_ = const_cast< ::mozc::commands::Candidates*>(&::mozc::commands::Candidates::default_instance());
  usages_ = const_cast< ::mozc::commands::InformationList*>(&::mozc::commands::InformationList::default_instance());
  footer_ = const_cast< ::mozc::commands::Footer*>(&::mozc::commands::Footer::default_instance());
}

Candidates::Candidates(const Candidates& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mozc.commands.Candidates)
}

void Candidates::SharedCtor() {
  _cached_size_ = 0;
  focused_index_ = 0u;
  size_ = 0u;
  position_ = 0u;
  subcandidates_ = NULL;
  usages_ = NULL;
  category_ = 0;
  display_type_ = 0;
  footer_ = NULL;
  direction_ = 0;
  page_size_ = 9u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Candidates::~Candidates() {
  // @@protoc_insertion_point(destructor:mozc.commands.Candidates)
  SharedDtor();
}

void Candidates::SharedDtor() {
  if (this != default_instance_) {
    delete subcandidates_;
    delete usages_;
    delete footer_;
  }
}

void Candidates::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Candidates::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Candidates_descriptor_;
}

const Candidates& Candidates::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2fcandidates_2eproto();
  return *default_instance_;
}

Candidates* Candidates::default_instance_ = NULL;

Candidates* Candidates::New(::google::protobuf::Arena* arena) const {
  Candidates* n = new Candidates;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Candidates::Clear() {
// @@protoc_insertion_point(message_clear_start:mozc.commands.Candidates)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Candidates, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Candidates*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 251u) {
    ZR_(focused_index_, size_);
    ZR_(position_, category_);
    if (has_subcandidates()) {
      if (subcandidates_ != NULL) subcandidates_->::mozc::commands::Candidates::Clear();
    }
    if (has_usages()) {
      if (usages_ != NULL) usages_->::mozc::commands::InformationList::Clear();
    }
    display_type_ = 0;
  }
  if (_has_bits_[8 / 32] & 1792u) {
    if (has_footer()) {
      if (footer_ != NULL) footer_->::mozc::commands::Footer::Clear();
    }
    direction_ = 0;
    page_size_ = 9u;
  }

#undef ZR_HELPER_
#undef ZR_

  candidate_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Candidates::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mozc.commands.Candidates)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 focused_index = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &focused_index_)));
          set_has_focused_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_size;
        break;
      }

      // required uint32 size = 2;
      case 2: {
        if (tag == 16) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(27)) goto parse_candidate;
        break;
      }

      // repeated group Candidate = 3 { ... };
      case 3: {
        if (tag == 27) {
         parse_candidate:
          DO_(input->IncrementRecursionDepth());
         parse_loop_candidate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadGroupNoVirtualNoRecursionDepth(
                3, input, add_candidate()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(27)) goto parse_loop_candidate;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(48)) goto parse_position;
        break;
      }

      // required uint32 position = 6;
      case 6: {
        if (tag == 48) {
         parse_position:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &position_)));
          set_has_position();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_subcandidates;
        break;
      }

      // optional .mozc.commands.Candidates subcandidates = 8;
      case 8: {
        if (tag == 66) {
         parse_subcandidates:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_subcandidates()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_usages;
        break;
      }

      // optional .mozc.commands.InformationList usages = 10;
      case 10: {
        if (tag == 82) {
         parse_usages:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_usages()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_category;
        break;
      }

      // optional .mozc.commands.Category category = 11 [default = CONVERSION];
      case 11: {
        if (tag == 88) {
         parse_category:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mozc::commands::Category_IsValid(value)) {
            set_category(static_cast< ::mozc::commands::Category >(value));
          } else {
            mutable_unknown_fields()->AddVarint(11, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_display_type;
        break;
      }

      // optional .mozc.commands.DisplayType display_type = 12 [default = MAIN];
      case 12: {
        if (tag == 96) {
         parse_display_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mozc::commands::DisplayType_IsValid(value)) {
            set_display_type(static_cast< ::mozc::commands::DisplayType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(12, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_footer;
        break;
      }

      // optional .mozc.commands.Footer footer = 13;
      case 13: {
        if (tag == 106) {
         parse_footer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_footer()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_direction;
        break;
      }

      // optional .mozc.commands.Candidates.Direction direction = 14 [default = VERTICAL];
      case 14: {
        if (tag == 112) {
         parse_direction:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mozc::commands::Candidates_Direction_IsValid(value)) {
            set_direction(static_cast< ::mozc::commands::Candidates_Direction >(value));
          } else {
            mutable_unknown_fields()->AddVarint(14, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_page_size;
        break;
      }

      // optional uint32 page_size = 18 [default = 9];
      case 18: {
        if (tag == 144) {
         parse_page_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &page_size_)));
          set_has_page_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mozc.commands.Candidates)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mozc.commands.Candidates)
  return false;
#undef DO_
}

void Candidates::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mozc.commands.Candidates)
  // optional uint32 focused_index = 1;
  if (has_focused_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->focused_index(), output);
  }

  // required uint32 size = 2;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->size(), output);
  }

  // repeated group Candidate = 3 { ... };
  for (unsigned int i = 0, n = this->candidate_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteGroupMaybeToArray(
      3, this->candidate(i), output);
  }

  // required uint32 position = 6;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->position(), output);
  }

  // optional .mozc.commands.Candidates subcandidates = 8;
  if (has_subcandidates()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->subcandidates_, output);
  }

  // optional .mozc.commands.InformationList usages = 10;
  if (has_usages()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->usages_, output);
  }

  // optional .mozc.commands.Category category = 11 [default = CONVERSION];
  if (has_category()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->category(), output);
  }

  // optional .mozc.commands.DisplayType display_type = 12 [default = MAIN];
  if (has_display_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      12, this->display_type(), output);
  }

  // optional .mozc.commands.Footer footer = 13;
  if (has_footer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, *this->footer_, output);
  }

  // optional .mozc.commands.Candidates.Direction direction = 14 [default = VERTICAL];
  if (has_direction()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      14, this->direction(), output);
  }

  // optional uint32 page_size = 18 [default = 9];
  if (has_page_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->page_size(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mozc.commands.Candidates)
}

::google::protobuf::uint8* Candidates::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mozc.commands.Candidates)
  // optional uint32 focused_index = 1;
  if (has_focused_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->focused_index(), target);
  }

  // required uint32 size = 2;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->size(), target);
  }

  // repeated group Candidate = 3 { ... };
  for (unsigned int i = 0, n = this->candidate_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteGroupNoVirtualToArray(
        3, this->candidate(i), false, target);
  }

  // required uint32 position = 6;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->position(), target);
  }

  // optional .mozc.commands.Candidates subcandidates = 8;
  if (has_subcandidates()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->subcandidates_, false, target);
  }

  // optional .mozc.commands.InformationList usages = 10;
  if (has_usages()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *this->usages_, false, target);
  }

  // optional .mozc.commands.Category category = 11 [default = CONVERSION];
  if (has_category()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      11, this->category(), target);
  }

  // optional .mozc.commands.DisplayType display_type = 12 [default = MAIN];
  if (has_display_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      12, this->display_type(), target);
  }

  // optional .mozc.commands.Footer footer = 13;
  if (has_footer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        13, *this->footer_, false, target);
  }

  // optional .mozc.commands.Candidates.Direction direction = 14 [default = VERTICAL];
  if (has_direction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      14, this->direction(), target);
  }

  // optional uint32 page_size = 18 [default = 9];
  if (has_page_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->page_size(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mozc.commands.Candidates)
  return target;
}

int Candidates::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:mozc.commands.Candidates)
  int total_size = 0;

  if (has_size()) {
    // required uint32 size = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->size());
  }

  if (has_position()) {
    // required uint32 position = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->position());
  }

  return total_size;
}
int Candidates::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:mozc.commands.Candidates)
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000000a) ^ 0x0000000a) == 0) {  // All required fields are present.
    // required uint32 size = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->size());

    // required uint32 position = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->position());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 241u) {
    // optional uint32 focused_index = 1;
    if (has_focused_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->focused_index());
    }

    // optional .mozc.commands.Candidates subcandidates = 8;
    if (has_subcandidates()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->subcandidates_);
    }

    // optional .mozc.commands.InformationList usages = 10;
    if (has_usages()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->usages_);
    }

    // optional .mozc.commands.Category category = 11 [default = CONVERSION];
    if (has_category()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->category());
    }

    // optional .mozc.commands.DisplayType display_type = 12 [default = MAIN];
    if (has_display_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->display_type());
    }

  }
  if (_has_bits_[8 / 32] & 1792u) {
    // optional .mozc.commands.Footer footer = 13;
    if (has_footer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->footer_);
    }

    // optional .mozc.commands.Candidates.Direction direction = 14 [default = VERTICAL];
    if (has_direction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->direction());
    }

    // optional uint32 page_size = 18 [default = 9];
    if (has_page_size()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->page_size());
    }

  }
  // repeated group Candidate = 3 { ... };
  total_size += 2 * this->candidate_size();
  for (int i = 0; i < this->candidate_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::GroupSizeNoVirtual(
        this->candidate(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Candidates::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mozc.commands.Candidates)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Candidates* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Candidates>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mozc.commands.Candidates)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mozc.commands.Candidates)
    MergeFrom(*source);
  }
}

void Candidates::MergeFrom(const Candidates& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mozc.commands.Candidates)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  candidate_.MergeFrom(from.candidate_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_focused_index()) {
      set_focused_index(from.focused_index());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
    if (from.has_position()) {
      set_position(from.position());
    }
    if (from.has_subcandidates()) {
      mutable_subcandidates()->::mozc::commands::Candidates::MergeFrom(from.subcandidates());
    }
    if (from.has_usages()) {
      mutable_usages()->::mozc::commands::InformationList::MergeFrom(from.usages());
    }
    if (from.has_category()) {
      set_category(from.category());
    }
    if (from.has_display_type()) {
      set_display_type(from.display_type());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_footer()) {
      mutable_footer()->::mozc::commands::Footer::MergeFrom(from.footer());
    }
    if (from.has_direction()) {
      set_direction(from.direction());
    }
    if (from.has_page_size()) {
      set_page_size(from.page_size());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Candidates::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mozc.commands.Candidates)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Candidates::CopyFrom(const Candidates& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mozc.commands.Candidates)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Candidates::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000a) != 0x0000000a) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->candidate())) return false;
  if (has_subcandidates()) {
    if (!this->subcandidates_->IsInitialized()) return false;
  }
  return true;
}

void Candidates::Swap(Candidates* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Candidates::InternalSwap(Candidates* other) {
  std::swap(focused_index_, other->focused_index_);
  std::swap(size_, other->size_);
  candidate_.UnsafeArenaSwap(&other->candidate_);
  std::swap(position_, other->position_);
  std::swap(subcandidates_, other->subcandidates_);
  std::swap(usages_, other->usages_);
  std::swap(category_, other->category_);
  std::swap(display_type_, other->display_type_);
  std::swap(footer_, other->footer_);
  std::swap(direction_, other->direction_);
  std::swap(page_size_, other->page_size_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Candidates::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Candidates_descriptor_;
  metadata.reflection = Candidates_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Candidates_Candidate

// required uint32 index = 4;
bool Candidates_Candidate::has_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Candidates_Candidate::set_has_index() {
  _has_bits_[0] |= 0x00000001u;
}
void Candidates_Candidate::clear_has_index() {
  _has_bits_[0] &= ~0x00000001u;
}
void Candidates_Candidate::clear_index() {
  index_ = 0u;
  clear_has_index();
}
 ::google::protobuf::uint32 Candidates_Candidate::index() const {
  // @@protoc_insertion_point(field_get:mozc.commands.Candidates.Candidate.index)
  return index_;
}
 void Candidates_Candidate::set_index(::google::protobuf::uint32 value) {
  set_has_index();
  index_ = value;
  // @@protoc_insertion_point(field_set:mozc.commands.Candidates.Candidate.index)
}

// required string value = 5;
bool Candidates_Candidate::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Candidates_Candidate::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
void Candidates_Candidate::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
void Candidates_Candidate::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}
 const ::std::string& Candidates_Candidate::value() const {
  // @@protoc_insertion_point(field_get:mozc.commands.Candidates.Candidate.value)
  return value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Candidates_Candidate::set_value(const ::std::string& value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mozc.commands.Candidates.Candidate.value)
}
 void Candidates_Candidate::set_value(const char* value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mozc.commands.Candidates.Candidate.value)
}
 void Candidates_Candidate::set_value(const char* value, size_t size) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mozc.commands.Candidates.Candidate.value)
}
 ::std::string* Candidates_Candidate::mutable_value() {
  set_has_value();
  // @@protoc_insertion_point(field_mutable:mozc.commands.Candidates.Candidate.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Candidates_Candidate::release_value() {
  // @@protoc_insertion_point(field_release:mozc.commands.Candidates.Candidate.value)
  clear_has_value();
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Candidates_Candidate::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    set_has_value();
  } else {
    clear_has_value();
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:mozc.commands.Candidates.Candidate.value)
}

// optional int32 id = 9;
bool Candidates_Candidate::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Candidates_Candidate::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
void Candidates_Candidate::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void Candidates_Candidate::clear_id() {
  id_ = 0;
  clear_has_id();
}
 ::google::protobuf::int32 Candidates_Candidate::id() const {
  // @@protoc_insertion_point(field_get:mozc.commands.Candidates.Candidate.id)
  return id_;
}
 void Candidates_Candidate::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:mozc.commands.Candidates.Candidate.id)
}

// optional .mozc.commands.Annotation annotation = 7;
bool Candidates_Candidate::has_annotation() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Candidates_Candidate::set_has_annotation() {
  _has_bits_[0] |= 0x00000008u;
}
void Candidates_Candidate::clear_has_annotation() {
  _has_bits_[0] &= ~0x00000008u;
}
void Candidates_Candidate::clear_annotation() {
  if (annotation_ != NULL) annotation_->::mozc::commands::Annotation::Clear();
  clear_has_annotation();
}
const ::mozc::commands::Annotation& Candidates_Candidate::annotation() const {
  // @@protoc_insertion_point(field_get:mozc.commands.Candidates.Candidate.annotation)
  return annotation_ != NULL ? *annotation_ : *default_instance_->annotation_;
}
::mozc::commands::Annotation* Candidates_Candidate::mutable_annotation() {
  set_has_annotation();
  if (annotation_ == NULL) {
    annotation_ = new ::mozc::commands::Annotation;
  }
  // @@protoc_insertion_point(field_mutable:mozc.commands.Candidates.Candidate.annotation)
  return annotation_;
}
::mozc::commands::Annotation* Candidates_Candidate::release_annotation() {
  // @@protoc_insertion_point(field_release:mozc.commands.Candidates.Candidate.annotation)
  clear_has_annotation();
  ::mozc::commands::Annotation* temp = annotation_;
  annotation_ = NULL;
  return temp;
}
void Candidates_Candidate::set_allocated_annotation(::mozc::commands::Annotation* annotation) {
  delete annotation_;
  annotation_ = annotation;
  if (annotation) {
    set_has_annotation();
  } else {
    clear_has_annotation();
  }
  // @@protoc_insertion_point(field_set_allocated:mozc.commands.Candidates.Candidate.annotation)
}

// optional int32 information_id = 10;
bool Candidates_Candidate::has_information_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Candidates_Candidate::set_has_information_id() {
  _has_bits_[0] |= 0x00000010u;
}
void Candidates_Candidate::clear_has_information_id() {
  _has_bits_[0] &= ~0x00000010u;
}
void Candidates_Candidate::clear_information_id() {
  information_id_ = 0;
  clear_has_information_id();
}
 ::google::protobuf::int32 Candidates_Candidate::information_id() const {
  // @@protoc_insertion_point(field_get:mozc.commands.Candidates.Candidate.information_id)
  return information_id_;
}
 void Candidates_Candidate::set_information_id(::google::protobuf::int32 value) {
  set_has_information_id();
  information_id_ = value;
  // @@protoc_insertion_point(field_set:mozc.commands.Candidates.Candidate.information_id)
}

// -------------------------------------------------------------------

// Candidates

// optional uint32 focused_index = 1;
bool Candidates::has_focused_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Candidates::set_has_focused_index() {
  _has_bits_[0] |= 0x00000001u;
}
void Candidates::clear_has_focused_index() {
  _has_bits_[0] &= ~0x00000001u;
}
void Candidates::clear_focused_index() {
  focused_index_ = 0u;
  clear_has_focused_index();
}
 ::google::protobuf::uint32 Candidates::focused_index() const {
  // @@protoc_insertion_point(field_get:mozc.commands.Candidates.focused_index)
  return focused_index_;
}
 void Candidates::set_focused_index(::google::protobuf::uint32 value) {
  set_has_focused_index();
  focused_index_ = value;
  // @@protoc_insertion_point(field_set:mozc.commands.Candidates.focused_index)
}

// required uint32 size = 2;
bool Candidates::has_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Candidates::set_has_size() {
  _has_bits_[0] |= 0x00000002u;
}
void Candidates::clear_has_size() {
  _has_bits_[0] &= ~0x00000002u;
}
void Candidates::clear_size() {
  size_ = 0u;
  clear_has_size();
}
 ::google::protobuf::uint32 Candidates::size() const {
  // @@protoc_insertion_point(field_get:mozc.commands.Candidates.size)
  return size_;
}
 void Candidates::set_size(::google::protobuf::uint32 value) {
  set_has_size();
  size_ = value;
  // @@protoc_insertion_point(field_set:mozc.commands.Candidates.size)
}

// repeated group Candidate = 3 { ... };
int Candidates::candidate_size() const {
  return candidate_.size();
}
void Candidates::clear_candidate() {
  candidate_.Clear();
}
const ::mozc::commands::Candidates_Candidate& Candidates::candidate(int index) const {
  // @@protoc_insertion_point(field_get:mozc.commands.Candidates.candidate)
  return candidate_.Get(index);
}
::mozc::commands::Candidates_Candidate* Candidates::mutable_candidate(int index) {
  // @@protoc_insertion_point(field_mutable:mozc.commands.Candidates.candidate)
  return candidate_.Mutable(index);
}
::mozc::commands::Candidates_Candidate* Candidates::add_candidate() {
  // @@protoc_insertion_point(field_add:mozc.commands.Candidates.candidate)
  return candidate_.Add();
}
::google::protobuf::RepeatedPtrField< ::mozc::commands::Candidates_Candidate >*
Candidates::mutable_candidate() {
  // @@protoc_insertion_point(field_mutable_list:mozc.commands.Candidates.candidate)
  return &candidate_;
}
const ::google::protobuf::RepeatedPtrField< ::mozc::commands::Candidates_Candidate >&
Candidates::candidate() const {
  // @@protoc_insertion_point(field_list:mozc.commands.Candidates.candidate)
  return candidate_;
}

// required uint32 position = 6;
bool Candidates::has_position() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Candidates::set_has_position() {
  _has_bits_[0] |= 0x00000008u;
}
void Candidates::clear_has_position() {
  _has_bits_[0] &= ~0x00000008u;
}
void Candidates::clear_position() {
  position_ = 0u;
  clear_has_position();
}
 ::google::protobuf::uint32 Candidates::position() const {
  // @@protoc_insertion_point(field_get:mozc.commands.Candidates.position)
  return position_;
}
 void Candidates::set_position(::google::protobuf::uint32 value) {
  set_has_position();
  position_ = value;
  // @@protoc_insertion_point(field_set:mozc.commands.Candidates.position)
}

// optional .mozc.commands.Candidates subcandidates = 8;
bool Candidates::has_subcandidates() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Candidates::set_has_subcandidates() {
  _has_bits_[0] |= 0x00000010u;
}
void Candidates::clear_has_subcandidates() {
  _has_bits_[0] &= ~0x00000010u;
}
void Candidates::clear_subcandidates() {
  if (subcandidates_ != NULL) subcandidates_->::mozc::commands::Candidates::Clear();
  clear_has_subcandidates();
}
const ::mozc::commands::Candidates& Candidates::subcandidates() const {
  // @@protoc_insertion_point(field_get:mozc.commands.Candidates.subcandidates)
  return subcandidates_ != NULL ? *subcandidates_ : *default_instance_->subcandidates_;
}
::mozc::commands::Candidates* Candidates::mutable_subcandidates() {
  set_has_subcandidates();
  if (subcandidates_ == NULL) {
    subcandidates_ = new ::mozc::commands::Candidates;
  }
  // @@protoc_insertion_point(field_mutable:mozc.commands.Candidates.subcandidates)
  return subcandidates_;
}
::mozc::commands::Candidates* Candidates::release_subcandidates() {
  // @@protoc_insertion_point(field_release:mozc.commands.Candidates.subcandidates)
  clear_has_subcandidates();
  ::mozc::commands::Candidates* temp = subcandidates_;
  subcandidates_ = NULL;
  return temp;
}
void Candidates::set_allocated_subcandidates(::mozc::commands::Candidates* subcandidates) {
  delete subcandidates_;
  subcandidates_ = subcandidates;
  if (subcandidates) {
    set_has_subcandidates();
  } else {
    clear_has_subcandidates();
  }
  // @@protoc_insertion_point(field_set_allocated:mozc.commands.Candidates.subcandidates)
}

// optional .mozc.commands.InformationList usages = 10;
bool Candidates::has_usages() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Candidates::set_has_usages() {
  _has_bits_[0] |= 0x00000020u;
}
void Candidates::clear_has_usages() {
  _has_bits_[0] &= ~0x00000020u;
}
void Candidates::clear_usages() {
  if (usages_ != NULL) usages_->::mozc::commands::InformationList::Clear();
  clear_has_usages();
}
const ::mozc::commands::InformationList& Candidates::usages() const {
  // @@protoc_insertion_point(field_get:mozc.commands.Candidates.usages)
  return usages_ != NULL ? *usages_ : *default_instance_->usages_;
}
::mozc::commands::InformationList* Candidates::mutable_usages() {
  set_has_usages();
  if (usages_ == NULL) {
    usages_ = new ::mozc::commands::InformationList;
  }
  // @@protoc_insertion_point(field_mutable:mozc.commands.Candidates.usages)
  return usages_;
}
::mozc::commands::InformationList* Candidates::release_usages() {
  // @@protoc_insertion_point(field_release:mozc.commands.Candidates.usages)
  clear_has_usages();
  ::mozc::commands::InformationList* temp = usages_;
  usages_ = NULL;
  return temp;
}
void Candidates::set_allocated_usages(::mozc::commands::InformationList* usages) {
  delete usages_;
  usages_ = usages;
  if (usages) {
    set_has_usages();
  } else {
    clear_has_usages();
  }
  // @@protoc_insertion_point(field_set_allocated:mozc.commands.Candidates.usages)
}

// optional .mozc.commands.Category category = 11 [default = CONVERSION];
bool Candidates::has_category() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Candidates::set_has_category() {
  _has_bits_[0] |= 0x00000040u;
}
void Candidates::clear_has_category() {
  _has_bits_[0] &= ~0x00000040u;
}
void Candidates::clear_category() {
  category_ = 0;
  clear_has_category();
}
 ::mozc::commands::Category Candidates::category() const {
  // @@protoc_insertion_point(field_get:mozc.commands.Candidates.category)
  return static_cast< ::mozc::commands::Category >(category_);
}
 void Candidates::set_category(::mozc::commands::Category value) {
  assert(::mozc::commands::Category_IsValid(value));
  set_has_category();
  category_ = value;
  // @@protoc_insertion_point(field_set:mozc.commands.Candidates.category)
}

// optional .mozc.commands.DisplayType display_type = 12 [default = MAIN];
bool Candidates::has_display_type() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Candidates::set_has_display_type() {
  _has_bits_[0] |= 0x00000080u;
}
void Candidates::clear_has_display_type() {
  _has_bits_[0] &= ~0x00000080u;
}
void Candidates::clear_display_type() {
  display_type_ = 0;
  clear_has_display_type();
}
 ::mozc::commands::DisplayType Candidates::display_type() const {
  // @@protoc_insertion_point(field_get:mozc.commands.Candidates.display_type)
  return static_cast< ::mozc::commands::DisplayType >(display_type_);
}
 void Candidates::set_display_type(::mozc::commands::DisplayType value) {
  assert(::mozc::commands::DisplayType_IsValid(value));
  set_has_display_type();
  display_type_ = value;
  // @@protoc_insertion_point(field_set:mozc.commands.Candidates.display_type)
}

// optional .mozc.commands.Footer footer = 13;
bool Candidates::has_footer() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Candidates::set_has_footer() {
  _has_bits_[0] |= 0x00000100u;
}
void Candidates::clear_has_footer() {
  _has_bits_[0] &= ~0x00000100u;
}
void Candidates::clear_footer() {
  if (footer_ != NULL) footer_->::mozc::commands::Footer::Clear();
  clear_has_footer();
}
const ::mozc::commands::Footer& Candidates::footer() const {
  // @@protoc_insertion_point(field_get:mozc.commands.Candidates.footer)
  return footer_ != NULL ? *footer_ : *default_instance_->footer_;
}
::mozc::commands::Footer* Candidates::mutable_footer() {
  set_has_footer();
  if (footer_ == NULL) {
    footer_ = new ::mozc::commands::Footer;
  }
  // @@protoc_insertion_point(field_mutable:mozc.commands.Candidates.footer)
  return footer_;
}
::mozc::commands::Footer* Candidates::release_footer() {
  // @@protoc_insertion_point(field_release:mozc.commands.Candidates.footer)
  clear_has_footer();
  ::mozc::commands::Footer* temp = footer_;
  footer_ = NULL;
  return temp;
}
void Candidates::set_allocated_footer(::mozc::commands::Footer* footer) {
  delete footer_;
  footer_ = footer;
  if (footer) {
    set_has_footer();
  } else {
    clear_has_footer();
  }
  // @@protoc_insertion_point(field_set_allocated:mozc.commands.Candidates.footer)
}

// optional .mozc.commands.Candidates.Direction direction = 14 [default = VERTICAL];
bool Candidates::has_direction() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void Candidates::set_has_direction() {
  _has_bits_[0] |= 0x00000200u;
}
void Candidates::clear_has_direction() {
  _has_bits_[0] &= ~0x00000200u;
}
void Candidates::clear_direction() {
  direction_ = 0;
  clear_has_direction();
}
 ::mozc::commands::Candidates_Direction Candidates::direction() const {
  // @@protoc_insertion_point(field_get:mozc.commands.Candidates.direction)
  return static_cast< ::mozc::commands::Candidates_Direction >(direction_);
}
 void Candidates::set_direction(::mozc::commands::Candidates_Direction value) {
  assert(::mozc::commands::Candidates_Direction_IsValid(value));
  set_has_direction();
  direction_ = value;
  // @@protoc_insertion_point(field_set:mozc.commands.Candidates.direction)
}

// optional uint32 page_size = 18 [default = 9];
bool Candidates::has_page_size() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void Candidates::set_has_page_size() {
  _has_bits_[0] |= 0x00000400u;
}
void Candidates::clear_has_page_size() {
  _has_bits_[0] &= ~0x00000400u;
}
void Candidates::clear_page_size() {
  page_size_ = 9u;
  clear_has_page_size();
}
 ::google::protobuf::uint32 Candidates::page_size() const {
  // @@protoc_insertion_point(field_get:mozc.commands.Candidates.page_size)
  return page_size_;
}
 void Candidates::set_page_size(::google::protobuf::uint32 value) {
  set_has_page_size();
  page_size_ = value;
  // @@protoc_insertion_point(field_set:mozc.commands.Candidates.page_size)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace commands
}  // namespace mozc

// @@protoc_insertion_point(global_scope)
