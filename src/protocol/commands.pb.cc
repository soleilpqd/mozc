// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protocol/commands.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "protocol/commands.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace mozc {
namespace commands {

namespace {

const ::google::protobuf::Descriptor* KeyEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KeyEvent_reflection_ = NULL;
const ::google::protobuf::Descriptor* KeyEvent_ProbableKeyEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KeyEvent_ProbableKeyEvent_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* KeyEvent_SpecialKey_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* KeyEvent_ModifierKey_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* KeyEvent_InputStyle_descriptor_ = NULL;
const ::google::protobuf::Descriptor* GenericStorageEntry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GenericStorageEntry_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* GenericStorageEntry_StorageType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* SessionCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SessionCommand_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* SessionCommand_CommandType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SessionCommand_UsageStatsEvent_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Context_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Context_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Context_InputFieldType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Capability_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Capability_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Capability_TextDeletionCapabilityType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Request_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Request_SpecialRomanjiTable_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Request_SpaceOnAlphanumeric_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Request_EmojiCarrierType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Request_RewriterCapability_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Request_CrossingEdgeBehavior_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Request_LanguageAwareInputBehavior_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ApplicationInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ApplicationInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Input_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Input_reflection_ = NULL;
const ::google::protobuf::Descriptor* Input_TouchPosition_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Input_TouchPosition_reflection_ = NULL;
const ::google::protobuf::Descriptor* Input_TouchEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Input_TouchEvent_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Input_CommandType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Input_TouchAction_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Result_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Result_ResultType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Preedit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Preedit_reflection_ = NULL;
const ::google::protobuf::Descriptor* Preedit_Segment_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Preedit_Segment_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Preedit_Segment_Annotation_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Status_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Status_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeletionRange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeletionRange_reflection_ = NULL;
const ::google::protobuf::Descriptor* Output_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Output_reflection_ = NULL;
const ::google::protobuf::Descriptor* Output_Callback_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Output_Callback_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Output_PreeditMethod_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Output_ErrorCode_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Output_ToolMode_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Command_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Command_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandList_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CompositionMode_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_protocol_2fcommands_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_protocol_2fcommands_2eproto() {
  protobuf_AddDesc_protocol_2fcommands_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "protocol/commands.proto");
  GOOGLE_CHECK(file != NULL);
  KeyEvent_descriptor_ = file->message_type(0);
  static const int KeyEvent_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyEvent, key_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyEvent, modifiers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyEvent, special_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyEvent, modifier_keys_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyEvent, key_string_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyEvent, input_style_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyEvent, mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyEvent, probable_key_event_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyEvent, activated_),
  };
  KeyEvent_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      KeyEvent_descriptor_,
      KeyEvent::default_instance_,
      KeyEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyEvent, _has_bits_[0]),
      -1,
      -1,
      sizeof(KeyEvent),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyEvent, _internal_metadata_),
      -1);
  KeyEvent_ProbableKeyEvent_descriptor_ = KeyEvent_descriptor_->nested_type(0);
  static const int KeyEvent_ProbableKeyEvent_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyEvent_ProbableKeyEvent, key_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyEvent_ProbableKeyEvent, special_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyEvent_ProbableKeyEvent, modifier_keys_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyEvent_ProbableKeyEvent, probability_),
  };
  KeyEvent_ProbableKeyEvent_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      KeyEvent_ProbableKeyEvent_descriptor_,
      KeyEvent_ProbableKeyEvent::default_instance_,
      KeyEvent_ProbableKeyEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyEvent_ProbableKeyEvent, _has_bits_[0]),
      -1,
      -1,
      sizeof(KeyEvent_ProbableKeyEvent),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyEvent_ProbableKeyEvent, _internal_metadata_),
      -1);
  KeyEvent_SpecialKey_descriptor_ = KeyEvent_descriptor_->enum_type(0);
  KeyEvent_ModifierKey_descriptor_ = KeyEvent_descriptor_->enum_type(1);
  KeyEvent_InputStyle_descriptor_ = KeyEvent_descriptor_->enum_type(2);
  GenericStorageEntry_descriptor_ = file->message_type(1);
  static const int GenericStorageEntry_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenericStorageEntry, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenericStorageEntry, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenericStorageEntry, value_),
  };
  GenericStorageEntry_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GenericStorageEntry_descriptor_,
      GenericStorageEntry::default_instance_,
      GenericStorageEntry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenericStorageEntry, _has_bits_[0]),
      -1,
      -1,
      sizeof(GenericStorageEntry),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenericStorageEntry, _internal_metadata_),
      -1);
  GenericStorageEntry_StorageType_descriptor_ = GenericStorageEntry_descriptor_->enum_type(0);
  SessionCommand_descriptor_ = file->message_type(2);
  static const int SessionCommand_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionCommand, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionCommand, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionCommand, composition_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionCommand, text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionCommand, cursor_position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionCommand, usage_stats_event_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionCommand, usage_stats_event_int_value_),
  };
  SessionCommand_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SessionCommand_descriptor_,
      SessionCommand::default_instance_,
      SessionCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionCommand, _has_bits_[0]),
      -1,
      -1,
      sizeof(SessionCommand),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionCommand, _internal_metadata_),
      -1);
  SessionCommand_CommandType_descriptor_ = SessionCommand_descriptor_->enum_type(0);
  SessionCommand_UsageStatsEvent_descriptor_ = SessionCommand_descriptor_->enum_type(1);
  Context_descriptor_ = file->message_type(3);
  static const int Context_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Context, preceding_text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Context, following_text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Context, suppress_suggestion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Context, input_field_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Context, revision_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Context, experimental_features_),
  };
  Context_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Context_descriptor_,
      Context::default_instance_,
      Context_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Context, _has_bits_[0]),
      -1,
      -1,
      sizeof(Context),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Context, _internal_metadata_),
      -1);
  Context_InputFieldType_descriptor_ = Context_descriptor_->enum_type(0);
  Capability_descriptor_ = file->message_type(4);
  static const int Capability_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Capability, text_deletion_),
  };
  Capability_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Capability_descriptor_,
      Capability::default_instance_,
      Capability_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Capability, _has_bits_[0]),
      -1,
      -1,
      sizeof(Capability),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Capability, _internal_metadata_),
      -1);
  Capability_TextDeletionCapabilityType_descriptor_ = Capability_descriptor_->enum_type(0);
  Request_descriptor_ = file->message_type(5);
  static const int Request_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, zero_query_suggestion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, mixed_conversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, special_romanji_table_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, space_on_alphanumeric_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, keyboard_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, update_input_mode_from_surrounding_text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, kana_modifier_insensitive_conversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, auto_partial_suggestion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, available_emoji_carrier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, emoji_rewriter_capability_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, crossing_edge_behavior_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, language_aware_input_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, candidate_page_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, candidates_size_limit_),
  };
  Request_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Request_descriptor_,
      Request::default_instance_,
      Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, _has_bits_[0]),
      -1,
      -1,
      sizeof(Request),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, _internal_metadata_),
      -1);
  Request_SpecialRomanjiTable_descriptor_ = Request_descriptor_->enum_type(0);
  Request_SpaceOnAlphanumeric_descriptor_ = Request_descriptor_->enum_type(1);
  Request_EmojiCarrierType_descriptor_ = Request_descriptor_->enum_type(2);
  Request_RewriterCapability_descriptor_ = Request_descriptor_->enum_type(3);
  Request_CrossingEdgeBehavior_descriptor_ = Request_descriptor_->enum_type(4);
  Request_LanguageAwareInputBehavior_descriptor_ = Request_descriptor_->enum_type(5);
  ApplicationInfo_descriptor_ = file->message_type(6);
  static const int ApplicationInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplicationInfo, process_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplicationInfo, thread_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplicationInfo, timezone_offset_),
  };
  ApplicationInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ApplicationInfo_descriptor_,
      ApplicationInfo::default_instance_,
      ApplicationInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplicationInfo, _has_bits_[0]),
      -1,
      -1,
      sizeof(ApplicationInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplicationInfo, _internal_metadata_),
      -1);
  Input_descriptor_ = file->message_type(7);
  static const int Input_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Input, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Input, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Input, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Input, command_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Input, config_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Input, context_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Input, capability_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Input, application_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Input, request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Input, storage_entry_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Input, touch_events_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Input, user_dictionary_command_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Input, request_suggestion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Input, engine_reload_request_),
  };
  Input_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Input_descriptor_,
      Input::default_instance_,
      Input_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Input, _has_bits_[0]),
      -1,
      -1,
      sizeof(Input),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Input, _internal_metadata_),
      -1);
  Input_TouchPosition_descriptor_ = Input_descriptor_->nested_type(0);
  static const int Input_TouchPosition_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Input_TouchPosition, action_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Input_TouchPosition, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Input_TouchPosition, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Input_TouchPosition, timestamp_),
  };
  Input_TouchPosition_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Input_TouchPosition_descriptor_,
      Input_TouchPosition::default_instance_,
      Input_TouchPosition_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Input_TouchPosition, _has_bits_[0]),
      -1,
      -1,
      sizeof(Input_TouchPosition),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Input_TouchPosition, _internal_metadata_),
      -1);
  Input_TouchEvent_descriptor_ = Input_descriptor_->nested_type(1);
  static const int Input_TouchEvent_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Input_TouchEvent, source_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Input_TouchEvent, stroke_),
  };
  Input_TouchEvent_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Input_TouchEvent_descriptor_,
      Input_TouchEvent::default_instance_,
      Input_TouchEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Input_TouchEvent, _has_bits_[0]),
      -1,
      -1,
      sizeof(Input_TouchEvent),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Input_TouchEvent, _internal_metadata_),
      -1);
  Input_CommandType_descriptor_ = Input_descriptor_->enum_type(0);
  Input_TouchAction_descriptor_ = Input_descriptor_->enum_type(1);
  Result_descriptor_ = file->message_type(8);
  static const int Result_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Result, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Result, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Result, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Result, cursor_offset_),
  };
  Result_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Result_descriptor_,
      Result::default_instance_,
      Result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Result, _has_bits_[0]),
      -1,
      -1,
      sizeof(Result),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Result, _internal_metadata_),
      -1);
  Result_ResultType_descriptor_ = Result_descriptor_->enum_type(0);
  Preedit_descriptor_ = file->message_type(9);
  static const int Preedit_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Preedit, cursor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Preedit, segment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Preedit, highlighted_position_),
  };
  Preedit_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Preedit_descriptor_,
      Preedit::default_instance_,
      Preedit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Preedit, _has_bits_[0]),
      -1,
      -1,
      sizeof(Preedit),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Preedit, _internal_metadata_),
      -1);
  Preedit_Segment_descriptor_ = Preedit_descriptor_->nested_type(0);
  static const int Preedit_Segment_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Preedit_Segment, annotation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Preedit_Segment, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Preedit_Segment, value_length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Preedit_Segment, key_),
  };
  Preedit_Segment_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Preedit_Segment_descriptor_,
      Preedit_Segment::default_instance_,
      Preedit_Segment_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Preedit_Segment, _has_bits_[0]),
      -1,
      -1,
      sizeof(Preedit_Segment),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Preedit_Segment, _internal_metadata_),
      -1);
  Preedit_Segment_Annotation_descriptor_ = Preedit_Segment_descriptor_->enum_type(0);
  Status_descriptor_ = file->message_type(10);
  static const int Status_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Status, activated_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Status, mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Status, comeback_mode_),
  };
  Status_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Status_descriptor_,
      Status::default_instance_,
      Status_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Status, _has_bits_[0]),
      -1,
      -1,
      sizeof(Status),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Status, _internal_metadata_),
      -1);
  DeletionRange_descriptor_ = file->message_type(11);
  static const int DeletionRange_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeletionRange, offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeletionRange, length_),
  };
  DeletionRange_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DeletionRange_descriptor_,
      DeletionRange::default_instance_,
      DeletionRange_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeletionRange, _has_bits_[0]),
      -1,
      -1,
      sizeof(DeletionRange),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeletionRange, _internal_metadata_),
      -1);
  Output_descriptor_ = file->message_type(12);
  static const int Output_offsets_[19] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Output, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Output, mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Output, consumed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Output, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Output, preedit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Output, candidates_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Output, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Output, url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Output, config_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Output, preedit_method_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Output, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Output, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Output, all_candidate_words_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Output, deletion_range_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Output, launch_tool_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Output, callback_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Output, storage_entry_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Output, user_dictionary_command_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Output, engine_reload_response_),
  };
  Output_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Output_descriptor_,
      Output::default_instance_,
      Output_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Output, _has_bits_[0]),
      -1,
      -1,
      sizeof(Output),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Output, _internal_metadata_),
      -1);
  Output_Callback_descriptor_ = Output_descriptor_->nested_type(0);
  static const int Output_Callback_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Output_Callback, session_command_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Output_Callback, delay_millisec_),
  };
  Output_Callback_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Output_Callback_descriptor_,
      Output_Callback::default_instance_,
      Output_Callback_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Output_Callback, _has_bits_[0]),
      -1,
      -1,
      sizeof(Output_Callback),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Output_Callback, _internal_metadata_),
      -1);
  Output_PreeditMethod_descriptor_ = Output_descriptor_->enum_type(0);
  Output_ErrorCode_descriptor_ = Output_descriptor_->enum_type(1);
  Output_ToolMode_descriptor_ = Output_descriptor_->enum_type(2);
  Command_descriptor_ = file->message_type(13);
  static const int Command_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, input_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, output_),
  };
  Command_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Command_descriptor_,
      Command::default_instance_,
      Command_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, _has_bits_[0]),
      -1,
      -1,
      sizeof(Command),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, _internal_metadata_),
      -1);
  CommandList_descriptor_ = file->message_type(14);
  static const int CommandList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandList, commands_),
  };
  CommandList_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CommandList_descriptor_,
      CommandList::default_instance_,
      CommandList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandList, _has_bits_[0]),
      -1,
      -1,
      sizeof(CommandList),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandList, _internal_metadata_),
      -1);
  CompositionMode_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_protocol_2fcommands_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      KeyEvent_descriptor_, &KeyEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      KeyEvent_ProbableKeyEvent_descriptor_, &KeyEvent_ProbableKeyEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GenericStorageEntry_descriptor_, &GenericStorageEntry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SessionCommand_descriptor_, &SessionCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Context_descriptor_, &Context::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Capability_descriptor_, &Capability::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Request_descriptor_, &Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ApplicationInfo_descriptor_, &ApplicationInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Input_descriptor_, &Input::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Input_TouchPosition_descriptor_, &Input_TouchPosition::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Input_TouchEvent_descriptor_, &Input_TouchEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Result_descriptor_, &Result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Preedit_descriptor_, &Preedit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Preedit_Segment_descriptor_, &Preedit_Segment::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Status_descriptor_, &Status::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DeletionRange_descriptor_, &DeletionRange::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Output_descriptor_, &Output::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Output_Callback_descriptor_, &Output_Callback::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Command_descriptor_, &Command::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CommandList_descriptor_, &CommandList::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_protocol_2fcommands_2eproto() {
  delete KeyEvent::default_instance_;
  delete KeyEvent_reflection_;
  delete KeyEvent_ProbableKeyEvent::default_instance_;
  delete KeyEvent_ProbableKeyEvent_reflection_;
  delete GenericStorageEntry::default_instance_;
  delete GenericStorageEntry_reflection_;
  delete SessionCommand::default_instance_;
  delete SessionCommand_reflection_;
  delete Context::default_instance_;
  delete Context_reflection_;
  delete Capability::default_instance_;
  delete Capability_reflection_;
  delete Request::default_instance_;
  delete Request_reflection_;
  delete ApplicationInfo::default_instance_;
  delete ApplicationInfo_reflection_;
  delete Input::default_instance_;
  delete Input_reflection_;
  delete Input_TouchPosition::default_instance_;
  delete Input_TouchPosition_reflection_;
  delete Input_TouchEvent::default_instance_;
  delete Input_TouchEvent_reflection_;
  delete Result::default_instance_;
  delete Result_reflection_;
  delete Preedit::default_instance_;
  delete Preedit_reflection_;
  delete Preedit_Segment::default_instance_;
  delete Preedit_Segment_reflection_;
  delete Status::default_instance_;
  delete Status_reflection_;
  delete DeletionRange::default_instance_;
  delete DeletionRange_reflection_;
  delete Output::default_instance_;
  delete Output_reflection_;
  delete Output_Callback::default_instance_;
  delete Output_Callback_reflection_;
  delete Command::default_instance_;
  delete Command_reflection_;
  delete CommandList::default_instance_;
  delete CommandList_reflection_;
}

void protobuf_AddDesc_protocol_2fcommands_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_protocol_2fcommands_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::mozc::commands::protobuf_AddDesc_protocol_2fcandidates_2eproto();
  ::mozc::config::protobuf_AddDesc_protocol_2fconfig_2eproto();
  ::mozc::protobuf_AddDesc_protocol_2fengine_5fbuilder_2eproto();
  ::mozc::user_dictionary::protobuf_AddDesc_protocol_2fuser_5fdictionary_5fstorage_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\027protocol/commands.proto\022\rmozc.commands"
    "\032\031protocol/candidates.proto\032\025protocol/co"
    "nfig.proto\032\035protocol/engine_builder.prot"
    "o\032&protocol/user_dictionary_storage.prot"
    "o\"\276\r\n\010KeyEvent\022\020\n\010key_code\030\001 \001(\r\022\021\n\tmodi"
    "fiers\030\002 \001(\r\0227\n\013special_key\030\003 \001(\0162\".mozc."
    "commands.KeyEvent.SpecialKey\022:\n\rmodifier"
    "_keys\030\004 \003(\0162#.mozc.commands.KeyEvent.Mod"
    "ifierKey\022\022\n\nkey_string\030\005 \001(\t\022D\n\013input_st"
    "yle\030\006 \001(\0162\".mozc.commands.KeyEvent.Input"
    "Style:\013FOLLOW_MODE\022,\n\004mode\030\007 \001(\0162\036.mozc."
    "commands.CompositionMode\022D\n\022probable_key"
    "_event\030\010 \003(\0132(.mozc.commands.KeyEvent.Pr"
    "obableKeyEvent\022\021\n\tactivated\030\t \001(\010\032\256\001\n\020Pr"
    "obableKeyEvent\022\020\n\010key_code\030\001 \001(\r\0227\n\013spec"
    "ial_key\030\003 \001(\0162\".mozc.commands.KeyEvent.S"
    "pecialKey\022:\n\rmodifier_keys\030\004 \003(\0162#.mozc."
    "commands.KeyEvent.ModifierKey\022\023\n\013probabi"
    "lity\030\n \001(\001\"\225\007\n\nSpecialKey\022\021\n\rNO_SPECIALK"
    "EY\020\000\022\t\n\005DIGIT\020\001\022\006\n\002ON\020\002\022\007\n\003OFF\020\003\022\t\n\005SPAC"
    "E\020\004\022\t\n\005ENTER\020\005\022\010\n\004LEFT\020\006\022\t\n\005RIGHT\020\007\022\006\n\002U"
    "P\020\010\022\010\n\004DOWN\020\t\022\n\n\006ESCAPE\020\n\022\007\n\003DEL\020\013\022\r\n\tBA"
    "CKSPACE\020\014\022\n\n\006HENKAN\020\r\022\014\n\010MUHENKAN\020\016\022\010\n\004K"
    "ANA\020\017\022\010\n\004HOME\020\020\022\007\n\003END\020\021\022\007\n\003TAB\020\022\022\006\n\002F1\020"
    "\023\022\006\n\002F2\020\024\022\006\n\002F3\020\025\022\006\n\002F4\020\026\022\006\n\002F5\020\027\022\006\n\002F6\020"
    "\030\022\006\n\002F7\020\031\022\006\n\002F8\020\032\022\006\n\002F9\020\033\022\007\n\003F10\020\034\022\007\n\003F1"
    "1\020\035\022\007\n\003F12\020\036\022\013\n\007PAGE_UP\020\037\022\r\n\tPAGE_DOWN\020 "
    "\022\n\n\006INSERT\020!\022\007\n\003F13\020\"\022\007\n\003F14\020#\022\007\n\003F15\020$\022"
    "\007\n\003F16\020%\022\007\n\003F17\020&\022\007\n\003F18\020\'\022\007\n\003F19\020(\022\007\n\003F"
    "20\020)\022\007\n\003F21\020*\022\007\n\003F22\020+\022\007\n\003F23\020,\022\007\n\003F24\020-"
    "\022\010\n\004EISU\020.\022\013\n\007NUMPAD0\020/\022\013\n\007NUMPAD1\0200\022\013\n\007"
    "NUMPAD2\0201\022\013\n\007NUMPAD3\0202\022\013\n\007NUMPAD4\0203\022\013\n\007N"
    "UMPAD5\0204\022\013\n\007NUMPAD6\0205\022\013\n\007NUMPAD7\0206\022\013\n\007NU"
    "MPAD8\0207\022\013\n\007NUMPAD9\0208\022\014\n\010MULTIPLY\0209\022\007\n\003AD"
    "D\020:\022\r\n\tSEPARATOR\020;\022\014\n\010SUBTRACT\020<\022\013\n\007DECI"
    "MAL\020=\022\n\n\006DIVIDE\020>\022\n\n\006EQUALS\020\?\022\016\n\nTEXT_IN"
    "PUT\020@\022\013\n\007HANKAKU\020A\022\t\n\005KANJI\020B\022\014\n\010KATAKAN"
    "A\020C\022\r\n\tCAPS_LOCK\020D\022\021\n\rUNDEFINED_KEY\020E\022\t\n"
    "\005COMMA\020F\022\t\n\005CLEAR\020G\022\020\n\014VIRTUAL_LEFT\020H\022\021\n"
    "\rVIRTUAL_RIGHT\020I\022\021\n\rVIRTUAL_ENTER\020J\022\016\n\nV"
    "IRTUAL_UP\020K\022\020\n\014VIRTUAL_DOWN\020L\022\023\n\017NUM_SPE"
    "CIALKEYS\020M\"\261\001\n\013ModifierKey\022\010\n\004CTRL\020\001\022\007\n\003"
    "ALT\020\002\022\t\n\005SHIFT\020\004\022\014\n\010KEY_DOWN\020\010\022\n\n\006KEY_UP"
    "\020\020\022\r\n\tLEFT_CTRL\020 \022\014\n\010LEFT_ALT\020@\022\017\n\nLEFT_"
    "SHIFT\020\200\001\022\017\n\nRIGHT_CTRL\020\200\002\022\016\n\tRIGHT_ALT\020\200"
    "\004\022\020\n\013RIGHT_SHIFT\020\200\010\022\t\n\004CAPS\020\200\020\":\n\nInputS"
    "tyle\022\017\n\013FOLLOW_MODE\020\000\022\t\n\005AS_IS\020\001\022\020\n\014DIRE"
    "CT_INPUT\020\002\"\273\001\n\023GenericStorageEntry\022<\n\004ty"
    "pe\030\001 \001(\0162..mozc.commands.GenericStorageE"
    "ntry.StorageType\022\013\n\003key\030\002 \001(\t\022\r\n\005value\030\003"
    " \003(\014\"J\n\013StorageType\022\022\n\016SYMBOL_HISTORY\020\000\022"
    "\024\n\020EMOTICON_HISTORY\020\001\022\021\n\rEMOJI_HISTORY\020\002"
    "\"\311\016\n\016SessionCommand\0227\n\004type\030\001 \002(\0162).mozc"
    ".commands.SessionCommand.CommandType\022\n\n\002"
    "id\030\002 \001(\005\0228\n\020composition_mode\030\003 \001(\0162\036.moz"
    "c.commands.CompositionMode\022\014\n\004text\030\004 \001(\t"
    "\022\027\n\017cursor_position\030\005 \001(\r\022H\n\021usage_stats"
    "_event\030\007 \001(\0162-.mozc.commands.SessionComm"
    "and.UsageStatsEvent\022#\n\033usage_stats_event"
    "_int_value\030\t \001(\005\"\227\004\n\013CommandType\022\n\n\006REVE"
    "RT\020\001\022\n\n\006SUBMIT\020\002\022\024\n\020SELECT_CANDIDATE\020\003\022\027"
    "\n\023HIGHLIGHT_CANDIDATE\020\004\022\025\n\021SWITCH_INPUT_"
    "MODE\020\005\022\016\n\nGET_STATUS\020\006\022\024\n\020SUBMIT_CANDIDA"
    "TE\020\007\022\023\n\017CONVERT_REVERSE\020\010\022\010\n\004UNDO\020\t\022\021\n\rR"
    "ESET_CONTEXT\020\n\022\017\n\013MOVE_CURSOR\020\013\022\033\n\027SWITC"
    "H_INPUT_FIELD_TYPE\020\014\022\025\n\021USAGE_STATS_EVEN"
    "T\020\r\022\022\n\016UNDO_OR_REWIND\020\016\022\025\n\021EXPAND_SUGGES"
    "TION\020\017\022 \n\034OBSOLETE_SEND_CARET_LOCATION\020\020"
    "\022&\n\"OBSOLETE_SEND_LANGUAGE_BAR_COMMAND\020\021"
    "\022\035\n\031OBSOLETE_GET_ASYNC_RESULT\020\022\022\023\n\017COMMI"
    "T_RAW_TEXT\020\023\022\025\n\021CONVERT_PREV_PAGE\020\024\022\025\n\021C"
    "ONVERT_NEXT_PAGE\020\025\022\017\n\013TURN_ON_IME\020\026\022\020\n\014T"
    "URN_OFF_IME\020\027\022\023\n\017NUM_OF_COMMANDS\020\030\"\365\007\n\017U"
    "sageStatsEvent\022\030\n\024INFOLIST_WINDOW_SHOW\020\001"
    "\022\030\n\024INFOLIST_WINDOW_HIDE\020\002\022\032\n\026HANDWRITIN"
    "G_OPEN_EVENT\020\003\022\034\n\030HANDWRITING_COMMIT_EVE"
    "NT\020\004\022 \n\034CHARACTER_PALETTE_OPEN_EVENT\020\005\022\""
    "\n\036CHARACTER_PALETTE_COMMIT_EVENT\020\006\022&\n\"SO"
    "FTWARE_KEYBOARD_LAYOUT_LANDSCAPE\020\007\022%\n!SO"
    "FTWARE_KEYBOARD_LAYOUT_PORTRAIT\020\010\022\035\n\031SUB"
    "MITTED_CANDIDATE_ROW_0\020\t\022\035\n\031SUBMITTED_CA"
    "NDIDATE_ROW_1\020\n\022\035\n\031SUBMITTED_CANDIDATE_R"
    "OW_2\020\013\022\035\n\031SUBMITTED_CANDIDATE_ROW_3\020\014\022\035\n"
    "\031SUBMITTED_CANDIDATE_ROW_4\020\r\022\035\n\031SUBMITTE"
    "D_CANDIDATE_ROW_5\020\016\022\035\n\031SUBMITTED_CANDIDA"
    "TE_ROW_6\020\017\022\035\n\031SUBMITTED_CANDIDATE_ROW_7\020"
    "\020\022\035\n\031SUBMITTED_CANDIDATE_ROW_8\020\021\022\035\n\031SUBM"
    "ITTED_CANDIDATE_ROW_9\020\022\022 \n\034SUBMITTED_CAN"
    "DIDATE_ROW_GE10\020\023\022\027\n\023KEYBOARD_FOLD_EVENT"
    "\020\024\022\031\n\025KEYBOARD_EXPAND_EVENT\020\025\022(\n$MUSHROO"
    "M_SELECTION_DIALOG_OPEN_EVENT\020\026\022*\n&SOFTW"
    "ARE_KEYBOARD_HEIGHT_DIP_LANDSCAPE\020\027\022)\n%S"
    "OFTWARE_KEYBOARD_HEIGHT_DIP_PORTRAIT\020\030\0229"
    "\n5SOFTWARE_KEYBOARD_LAYOUT_ADJUSTMENT_EN"
    "ABLED_LANDSCAPE\020\031\0228\n4SOFTWARE_KEYBOARD_L"
    "AYOUT_ADJUSTMENT_ENABLED_PORTRAIT\020\032\022.\n*S"
    "OFTWARE_KEYBOARD_LAYOUT_ENGLISH_LANDSCAP"
    "E\020\033\022-\n)SOFTWARE_KEYBOARD_LAYOUT_ENGLISH_"
    "PORTRAIT\020\034J\004\010\006\020\007J\004\010\010\020\tJ\004\010\n\020\013\"\223\002\n\007Context"
    "\022\026\n\016preceding_text\030\001 \001(\t\022\026\n\016following_te"
    "xt\030\002 \001(\t\022\"\n\023suppress_suggestion\030\003 \001(\010:\005f"
    "alse\022\?\n\020input_field_type\030\004 \001(\0162%.mozc.co"
    "mmands.Context.InputFieldType\022\023\n\010revisio"
    "n\030\005 \001(\005:\0010\022\035\n\025experimental_features\030d \003("
    "\t\"\?\n\016InputFieldType\022\n\n\006NORMAL\020\001\022\014\n\010PASSW"
    "ORD\020\002\022\007\n\003TEL\020\003\022\n\n\006NUMBER\020\004\"\320\001\n\nCapabilit"
    "y\022h\n\rtext_deletion\030\001 \001(\01624.mozc.commands"
    ".Capability.TextDeletionCapabilityType:\033"
    "NO_TEXT_DELETION_CAPABILITY\"X\n\032TextDelet"
    "ionCapabilityType\022\037\n\033NO_TEXT_DELETION_CA"
    "PABILITY\020\000\022\031\n\025DELETE_PRECEDING_TEXT\020\001\"\342\016"
    "\n\007Request\022$\n\025zero_query_suggestion\030\001 \001(\010"
    ":\005false\022\037\n\020mixed_conversion\030\002 \001(\010:\005false"
    "\022X\n\025special_romanji_table\030\004 \001(\0162*.mozc.c"
    "ommands.Request.SpecialRomanjiTable:\rDEF"
    "AULT_TABLE\022o\n\025space_on_alphanumeric\030\006 \001("
    "\0162*.mozc.commands.Request.SpaceOnAlphanu"
    "meric:$SPACE_OR_CONVERT_KEEPING_COMPOSIT"
    "ION\022\025\n\rkeyboard_name\030\007 \001(\t\0225\n\'update_inp"
    "ut_mode_from_surrounding_text\030\010 \001(\010:\004tru"
    "e\0223\n$kana_modifier_insensitive_conversio"
    "n\030\t \001(\010:\005false\022&\n\027auto_partial_suggestio"
    "n\030\n \001(\010:\005false\022\"\n\027available_emoji_carrie"
    "r\030\013 \001(\005:\0011\022$\n\031emoji_rewriter_capability\030"
    "\014 \001(\005:\0011\022W\n\026crossing_edge_behavior\030\r \001(\016"
    "2+.mozc.commands.Request.CrossingEdgeBeh"
    "avior:\nDO_NOTHING\022p\n\024language_aware_inpu"
    "t\030\016 \001(\01621.mozc.commands.Request.Language"
    "AwareInputBehavior:\037DEFAULT_LANGUAGE_AWA"
    "RE_BEHAVIOR\022\036\n\023candidate_page_size\030\017 \001(\005"
    ":\0019\022\035\n\025candidates_size_limit\030\020 \001(\005\"\302\004\n\023S"
    "pecialRomanjiTable\022\021\n\rDEFAULT_TABLE\020\000\022\033\n"
    "\027TWELVE_KEYS_TO_HIRAGANA\020\n\022!\n\035TWELVE_KEY"
    "S_TO_HALFWIDTHASCII\020\013\022\025\n\021FLICK_TO_HIRAGA"
    "NA\020\r\022\033\n\027FLICK_TO_HALFWIDTHASCII\020\016\022\034\n\030TOG"
    "GLE_FLICK_TO_HIRAGANA\020\020\022\"\n\036TOGGLE_FLICK_"
    "TO_HALFWIDTHASCII\020\021\022\035\n\031QWERTY_MOBILE_TO_"
    "HIRAGANA\020\024\022#\n\037QWERTY_MOBILE_TO_HALFWIDTH"
    "ASCII\020\026\022\025\n\021GODAN_TO_HIRAGANA\020\036\022\033\n\027GODAN_"
    "TO_HALFWIDTHASCII\020\037\022\027\n\023NOTOUCH_TO_HIRAGA"
    "NA\020(\022\035\n\031NOTOUCH_TO_HALFWIDTHASCII\020)\022\"\n\036O"
    "BSOLETE_TWELVE_KEYS_TO_NUMBER\020\014\022\034\n\030OBSOL"
    "ETE_FLICK_TO_NUMBER\020\017\022\034\n\030OBSOLETE_GODAN_"
    "TO_NUMBER\020 \022-\n)OBSOLETE_QWERTY_MOBILE_TO"
    "_HIRAGANA_NUMBER\020\025\022#\n\037OBSOLETE_TOGGLE_FL"
    "ICK_TO_NUMBER\020\022\"w\n\023SpaceOnAlphanumeric\022("
    "\n$SPACE_OR_CONVERT_KEEPING_COMPOSITION\020\000"
    "\022*\n&SPACE_OR_CONVERT_COMMITING_COMPOSITI"
    "ON\020\001\022\n\n\006COMMIT\020\002\"[\n\020EmojiCarrierType\022\021\n\r"
    "UNICODE_EMOJI\020\001\022\020\n\014DOCOMO_EMOJI\020\002\022\022\n\016SOF"
    "TBANK_EMOJI\020\004\022\016\n\nKDDI_EMOJI\020\010\"`\n\022Rewrite"
    "rCapability\022\021\n\rNOT_AVAILABLE\020\000\022\016\n\nCONVER"
    "SION\020\001\022\016\n\nPREDICTION\020\002\022\016\n\nSUGGESTION\020\004\022\007"
    "\n\003ALL\020\007\"D\n\024CrossingEdgeBehavior\022\016\n\nDO_NO"
    "THING\020\000\022\034\n\030COMMIT_WITHOUT_CONSUMING\020\001\"}\n"
    "\032LanguageAwareInputBehavior\022#\n\037DEFAULT_L"
    "ANGUAGE_AWARE_BEHAVIOR\020\000\022\033\n\027NO_LANGUAGE_"
    "AWARE_INPUT\020\001\022\035\n\031LANGUAGE_AWARE_SUGGESTI"
    "ON\020\002J\004\010\003\020\004\"Q\n\017ApplicationInfo\022\022\n\nprocess"
    "_id\030\001 \001(\r\022\021\n\tthread_id\030\002 \001(\r\022\027\n\017timezone"
    "_offset\030\003 \001(\005\"\357\013\n\005Input\022.\n\004type\030\001 \002(\0162 ."
    "mozc.commands.Input.CommandType\022\n\n\002id\030\002 "
    "\001(\004\022$\n\003key\030\003 \001(\0132\027.mozc.commands.KeyEven"
    "t\022.\n\007command\030\004 \001(\0132\035.mozc.commands.Sessi"
    "onCommand\022#\n\006config\030\005 \001(\0132\023.mozc.config."
    "Config\022\'\n\007context\030\006 \001(\0132\026.mozc.commands."
    "Context\022-\n\ncapability\030\007 \001(\0132\031.mozc.comma"
    "nds.Capability\0228\n\020application_info\030\010 \001(\013"
    "2\036.mozc.commands.ApplicationInfo\022\'\n\007requ"
    "est\030\t \001(\0132\026.mozc.commands.Request\0229\n\rsto"
    "rage_entry\030\n \001(\0132\".mozc.commands.Generic"
    "StorageEntry\0225\n\014touch_events\030\014 \003(\0132\037.moz"
    "c.commands.Input.TouchEvent\022L\n\027user_dict"
    "ionary_command\030\r \001(\0132+.mozc.user_diction"
    "ary.UserDictionaryCommand\022 \n\022request_sug"
    "gestion\030\016 \001(\010:\004true\0228\n\025engine_reload_req"
    "uest\030\017 \001(\0132\031.mozc.EngineReloadRequest\032j\n"
    "\rTouchPosition\0220\n\006action\030\001 \001(\0162 .mozc.co"
    "mmands.Input.TouchAction\022\t\n\001x\030\002 \001(\002\022\t\n\001y"
    "\030\003 \001(\002\022\021\n\ttimestamp\030\004 \001(\003\032S\n\nTouchEvent\022"
    "\021\n\tsource_id\030\001 \001(\r\0222\n\006stroke\030\002 \003(\0132\".moz"
    "c.commands.Input.TouchPosition\"\323\004\n\013Comma"
    "ndType\022\010\n\004NONE\020\000\022\022\n\016CREATE_SESSION\020\001\022\022\n\016"
    "DELETE_SESSION\020\002\022\014\n\010SEND_KEY\020\003\022\021\n\rTEST_S"
    "END_KEY\020\004\022\020\n\014SEND_COMMAND\020\005\022\016\n\nGET_CONFI"
    "G\020\006\022\016\n\nSET_CONFIG\020\007\022\026\n\022SET_IMPOSED_CONFI"
    "G\020\026\022\017\n\013SET_REQUEST\020\021\022\r\n\tSYNC_DATA\020\010\022\014\n\010S"
    "HUTDOWN\020\t\022\n\n\006RELOAD\020\n\022\026\n\022CLEAR_USER_HIST"
    "ORY\020\013\022\031\n\025CLEAR_USER_PREDICTION\020\014\022 \n\034CLEA"
    "R_UNUSED_USER_PREDICTION\020\020\022\013\n\007CLEANUP\020\r\022"
    "\020\n\014NO_OPERATION\020\016\022\035\n\031OBSOLETE_START_CLOU"
    "D_SYNC\020\022\022\"\n\036OBSOLETE_GET_CLOUD_SYNC_STAT"
    "US\020\027\022\032\n\026OBSOLETE_ADD_AUTH_CODE\020\030\022\025\n\021INSE"
    "RT_TO_STORAGE\020\024\022\031\n\025READ_ALL_FROM_STORAGE"
    "\020\025\022\021\n\rCLEAR_STORAGE\020\031\022 \n\034SEND_USER_DICTI"
    "ONARY_COMMAND\020\032\022\036\n\032SEND_ENGINE_RELOAD_RE"
    "QUEST\020\033\022\023\n\017NUM_OF_COMMANDS\020\034\";\n\013TouchAct"
    "ion\022\016\n\nTOUCH_DOWN\020\001\022\016\n\nTOUCH_MOVE\020\002\022\014\n\010T"
    "OUCH_UP\020\003J\004\010\013\020\014\"\222\001\n\006Result\022.\n\004type\030\001 \002(\016"
    "2 .mozc.commands.Result.ResultType\022\r\n\005va"
    "lue\030\002 \002(\t\022\013\n\003key\030\003 \001(\t\022\030\n\rcursor_offset\030"
    "\004 \001(\005:\0010\"\"\n\nResultType\022\010\n\004NONE\020\000\022\n\n\006STRI"
    "NG\020\001\"\233\002\n\007Preedit\022\016\n\006cursor\030\001 \002(\r\022/\n\007segm"
    "ent\030\002 \003(\n2\036.mozc.commands.Preedit.Segmen"
    "t\022\034\n\024highlighted_position\030\003 \001(\r\032\260\001\n\007Segm"
    "ent\022=\n\nannotation\030\003 \002(\0162).mozc.commands."
    "Preedit.Segment.Annotation\022\r\n\005value\030\004 \002("
    "\t\022\024\n\014value_length\030\005 \002(\r\022\013\n\003key\030\006 \001(\t\"4\n\n"
    "Annotation\022\010\n\004NONE\020\000\022\r\n\tUNDERLINE\020\001\022\r\n\tH"
    "IGHLIGHT\020\002\"\200\001\n\006Status\022\021\n\tactivated\030\001 \001(\010"
    "\022,\n\004mode\030\002 \001(\0162\036.mozc.commands.Compositi"
    "onMode\0225\n\rcomeback_mode\030\003 \001(\0162\036.mozc.com"
    "mands.CompositionMode\"/\n\rDeletionRange\022\016"
    "\n\006offset\030\001 \001(\005\022\016\n\006length\030\002 \001(\005\"\272\t\n\006Outpu"
    "t\022\n\n\002id\030\001 \001(\004\022,\n\004mode\030\002 \001(\0162\036.mozc.comma"
    "nds.CompositionMode\022\020\n\010consumed\030\003 \001(\010\022%\n"
    "\006result\030\004 \001(\0132\025.mozc.commands.Result\022\'\n\007"
    "preedit\030\005 \001(\0132\026.mozc.commands.Preedit\022-\n"
    "\ncandidates\030\006 \001(\0132\031.mozc.commands.Candid"
    "ates\022$\n\003key\030\007 \001(\0132\027.mozc.commands.KeyEve"
    "nt\022\013\n\003url\030\010 \001(\t\022#\n\006config\030\t \001(\0132\023.mozc.c"
    "onfig.Config\022B\n\016preedit_method\030\n \001(\0162#.m"
    "ozc.commands.Output.PreeditMethod:\005ASCII"
    "\022D\n\nerror_code\030\013 \001(\0162\037.mozc.commands.Out"
    "put.ErrorCode:\017SESSION_SUCCESS\022%\n\006status"
    "\030\r \001(\0132\025.mozc.commands.Status\0229\n\023all_can"
    "didate_words\030\016 \001(\0132\034.mozc.commands.Candi"
    "dateList\0224\n\016deletion_range\030\020 \001(\0132\034.mozc."
    "commands.DeletionRange\022A\n\020launch_tool_mo"
    "de\030\021 \001(\0162\036.mozc.commands.Output.ToolMode"
    ":\007NO_TOOL\0220\n\010callback\030\022 \001(\0132\036.mozc.comma"
    "nds.Output.Callback\0229\n\rstorage_entry\030\023 \001"
    "(\0132\".mozc.commands.GenericStorageEntry\022Y"
    "\n\036user_dictionary_command_status\030\025 \001(\01321"
    ".mozc.user_dictionary.UserDictionaryComm"
    "andStatus\022:\n\026engine_reload_response\030\026 \001("
    "\0132\032.mozc.EngineReloadResponse\032Z\n\010Callbac"
    "k\0226\n\017session_command\030\001 \001(\0132\035.mozc.comman"
    "ds.SessionCommand\022\026\n\016delay_millisec\030\002 \001("
    "\r\"$\n\rPreeditMethod\022\t\n\005ASCII\020\000\022\010\n\004KANA\020\001\""
    "5\n\tErrorCode\022\023\n\017SESSION_SUCCESS\020\000\022\023\n\017SES"
    "SION_FAILURE\020\001\"Y\n\010ToolMode\022\013\n\007NO_TOOL\020\000\022"
    "\021\n\rCONFIG_DIALOG\020\001\022\023\n\017DICTIONARY_TOOL\020\002\022"
    "\030\n\024WORD_REGISTER_DIALOG\020\003J\004\010\014\020\rJ\004\010\017\020\020J\004\010"
    "\024\020\025\"U\n\007Command\022#\n\005input\030\001 \002(\0132\024.mozc.com"
    "mands.Input\022%\n\006output\030\002 \002(\0132\025.mozc.comma"
    "nds.Output\"7\n\013CommandList\022(\n\010commands\030\001 "
    "\003(\0132\026.mozc.commands.Command*\212\001\n\017Composit"
    "ionMode\022\n\n\006DIRECT\020\000\022\014\n\010HIRAGANA\020\001\022\021\n\rFUL"
    "L_KATAKANA\020\002\022\016\n\nHALF_ASCII\020\003\022\016\n\nFULL_ASC"
    "II\020\004\022\021\n\rHALF_KATAKANA\020\005\022\027\n\023NUM_OF_COMPOS"
    "ITIONS\020\006B\?\n.org.mozc.android.inputmethod"
    ".japanese.protobufB\rProtoCommands", 10113);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "protocol/commands.proto", &protobuf_RegisterTypes);
  KeyEvent::default_instance_ = new KeyEvent();
  KeyEvent_ProbableKeyEvent::default_instance_ = new KeyEvent_ProbableKeyEvent();
  GenericStorageEntry::default_instance_ = new GenericStorageEntry();
  SessionCommand::default_instance_ = new SessionCommand();
  Context::default_instance_ = new Context();
  Capability::default_instance_ = new Capability();
  Request::default_instance_ = new Request();
  ApplicationInfo::default_instance_ = new ApplicationInfo();
  Input::default_instance_ = new Input();
  Input_TouchPosition::default_instance_ = new Input_TouchPosition();
  Input_TouchEvent::default_instance_ = new Input_TouchEvent();
  Result::default_instance_ = new Result();
  Preedit::default_instance_ = new Preedit();
  Preedit_Segment::default_instance_ = new Preedit_Segment();
  Status::default_instance_ = new Status();
  DeletionRange::default_instance_ = new DeletionRange();
  Output::default_instance_ = new Output();
  Output_Callback::default_instance_ = new Output_Callback();
  Command::default_instance_ = new Command();
  CommandList::default_instance_ = new CommandList();
  KeyEvent::default_instance_->InitAsDefaultInstance();
  KeyEvent_ProbableKeyEvent::default_instance_->InitAsDefaultInstance();
  GenericStorageEntry::default_instance_->InitAsDefaultInstance();
  SessionCommand::default_instance_->InitAsDefaultInstance();
  Context::default_instance_->InitAsDefaultInstance();
  Capability::default_instance_->InitAsDefaultInstance();
  Request::default_instance_->InitAsDefaultInstance();
  ApplicationInfo::default_instance_->InitAsDefaultInstance();
  Input::default_instance_->InitAsDefaultInstance();
  Input_TouchPosition::default_instance_->InitAsDefaultInstance();
  Input_TouchEvent::default_instance_->InitAsDefaultInstance();
  Result::default_instance_->InitAsDefaultInstance();
  Preedit::default_instance_->InitAsDefaultInstance();
  Preedit_Segment::default_instance_->InitAsDefaultInstance();
  Status::default_instance_->InitAsDefaultInstance();
  DeletionRange::default_instance_->InitAsDefaultInstance();
  Output::default_instance_->InitAsDefaultInstance();
  Output_Callback::default_instance_->InitAsDefaultInstance();
  Command::default_instance_->InitAsDefaultInstance();
  CommandList::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_protocol_2fcommands_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_protocol_2fcommands_2eproto {
  StaticDescriptorInitializer_protocol_2fcommands_2eproto() {
    protobuf_AddDesc_protocol_2fcommands_2eproto();
  }
} static_descriptor_initializer_protocol_2fcommands_2eproto_;
const ::google::protobuf::EnumDescriptor* CompositionMode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CompositionMode_descriptor_;
}
bool CompositionMode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* KeyEvent_SpecialKey_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KeyEvent_SpecialKey_descriptor_;
}
bool KeyEvent_SpecialKey_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const KeyEvent_SpecialKey KeyEvent::NO_SPECIALKEY;
const KeyEvent_SpecialKey KeyEvent::DIGIT;
const KeyEvent_SpecialKey KeyEvent::ON;
const KeyEvent_SpecialKey KeyEvent::OFF;
const KeyEvent_SpecialKey KeyEvent::SPACE;
const KeyEvent_SpecialKey KeyEvent::ENTER;
const KeyEvent_SpecialKey KeyEvent::LEFT;
const KeyEvent_SpecialKey KeyEvent::RIGHT;
const KeyEvent_SpecialKey KeyEvent::UP;
const KeyEvent_SpecialKey KeyEvent::DOWN;
const KeyEvent_SpecialKey KeyEvent::ESCAPE;
const KeyEvent_SpecialKey KeyEvent::DEL;
const KeyEvent_SpecialKey KeyEvent::BACKSPACE;
const KeyEvent_SpecialKey KeyEvent::HENKAN;
const KeyEvent_SpecialKey KeyEvent::MUHENKAN;
const KeyEvent_SpecialKey KeyEvent::KANA;
const KeyEvent_SpecialKey KeyEvent::HOME;
const KeyEvent_SpecialKey KeyEvent::END;
const KeyEvent_SpecialKey KeyEvent::TAB;
const KeyEvent_SpecialKey KeyEvent::F1;
const KeyEvent_SpecialKey KeyEvent::F2;
const KeyEvent_SpecialKey KeyEvent::F3;
const KeyEvent_SpecialKey KeyEvent::F4;
const KeyEvent_SpecialKey KeyEvent::F5;
const KeyEvent_SpecialKey KeyEvent::F6;
const KeyEvent_SpecialKey KeyEvent::F7;
const KeyEvent_SpecialKey KeyEvent::F8;
const KeyEvent_SpecialKey KeyEvent::F9;
const KeyEvent_SpecialKey KeyEvent::F10;
const KeyEvent_SpecialKey KeyEvent::F11;
const KeyEvent_SpecialKey KeyEvent::F12;
const KeyEvent_SpecialKey KeyEvent::PAGE_UP;
const KeyEvent_SpecialKey KeyEvent::PAGE_DOWN;
const KeyEvent_SpecialKey KeyEvent::INSERT;
const KeyEvent_SpecialKey KeyEvent::F13;
const KeyEvent_SpecialKey KeyEvent::F14;
const KeyEvent_SpecialKey KeyEvent::F15;
const KeyEvent_SpecialKey KeyEvent::F16;
const KeyEvent_SpecialKey KeyEvent::F17;
const KeyEvent_SpecialKey KeyEvent::F18;
const KeyEvent_SpecialKey KeyEvent::F19;
const KeyEvent_SpecialKey KeyEvent::F20;
const KeyEvent_SpecialKey KeyEvent::F21;
const KeyEvent_SpecialKey KeyEvent::F22;
const KeyEvent_SpecialKey KeyEvent::F23;
const KeyEvent_SpecialKey KeyEvent::F24;
const KeyEvent_SpecialKey KeyEvent::EISU;
const KeyEvent_SpecialKey KeyEvent::NUMPAD0;
const KeyEvent_SpecialKey KeyEvent::NUMPAD1;
const KeyEvent_SpecialKey KeyEvent::NUMPAD2;
const KeyEvent_SpecialKey KeyEvent::NUMPAD3;
const KeyEvent_SpecialKey KeyEvent::NUMPAD4;
const KeyEvent_SpecialKey KeyEvent::NUMPAD5;
const KeyEvent_SpecialKey KeyEvent::NUMPAD6;
const KeyEvent_SpecialKey KeyEvent::NUMPAD7;
const KeyEvent_SpecialKey KeyEvent::NUMPAD8;
const KeyEvent_SpecialKey KeyEvent::NUMPAD9;
const KeyEvent_SpecialKey KeyEvent::MULTIPLY;
const KeyEvent_SpecialKey KeyEvent::ADD;
const KeyEvent_SpecialKey KeyEvent::SEPARATOR;
const KeyEvent_SpecialKey KeyEvent::SUBTRACT;
const KeyEvent_SpecialKey KeyEvent::DECIMAL;
const KeyEvent_SpecialKey KeyEvent::DIVIDE;
const KeyEvent_SpecialKey KeyEvent::EQUALS;
const KeyEvent_SpecialKey KeyEvent::TEXT_INPUT;
const KeyEvent_SpecialKey KeyEvent::HANKAKU;
const KeyEvent_SpecialKey KeyEvent::KANJI;
const KeyEvent_SpecialKey KeyEvent::KATAKANA;
const KeyEvent_SpecialKey KeyEvent::CAPS_LOCK;
const KeyEvent_SpecialKey KeyEvent::UNDEFINED_KEY;
const KeyEvent_SpecialKey KeyEvent::COMMA;
const KeyEvent_SpecialKey KeyEvent::CLEAR;
const KeyEvent_SpecialKey KeyEvent::VIRTUAL_LEFT;
const KeyEvent_SpecialKey KeyEvent::VIRTUAL_RIGHT;
const KeyEvent_SpecialKey KeyEvent::VIRTUAL_ENTER;
const KeyEvent_SpecialKey KeyEvent::VIRTUAL_UP;
const KeyEvent_SpecialKey KeyEvent::VIRTUAL_DOWN;
const KeyEvent_SpecialKey KeyEvent::NUM_SPECIALKEYS;
const KeyEvent_SpecialKey KeyEvent::SpecialKey_MIN;
const KeyEvent_SpecialKey KeyEvent::SpecialKey_MAX;
const int KeyEvent::SpecialKey_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* KeyEvent_ModifierKey_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KeyEvent_ModifierKey_descriptor_;
}
bool KeyEvent_ModifierKey_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
    case 32:
    case 64:
    case 128:
    case 256:
    case 512:
    case 1024:
    case 2048:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const KeyEvent_ModifierKey KeyEvent::CTRL;
const KeyEvent_ModifierKey KeyEvent::ALT;
const KeyEvent_ModifierKey KeyEvent::SHIFT;
const KeyEvent_ModifierKey KeyEvent::KEY_DOWN;
const KeyEvent_ModifierKey KeyEvent::KEY_UP;
const KeyEvent_ModifierKey KeyEvent::LEFT_CTRL;
const KeyEvent_ModifierKey KeyEvent::LEFT_ALT;
const KeyEvent_ModifierKey KeyEvent::LEFT_SHIFT;
const KeyEvent_ModifierKey KeyEvent::RIGHT_CTRL;
const KeyEvent_ModifierKey KeyEvent::RIGHT_ALT;
const KeyEvent_ModifierKey KeyEvent::RIGHT_SHIFT;
const KeyEvent_ModifierKey KeyEvent::CAPS;
const KeyEvent_ModifierKey KeyEvent::ModifierKey_MIN;
const KeyEvent_ModifierKey KeyEvent::ModifierKey_MAX;
const int KeyEvent::ModifierKey_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* KeyEvent_InputStyle_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KeyEvent_InputStyle_descriptor_;
}
bool KeyEvent_InputStyle_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const KeyEvent_InputStyle KeyEvent::FOLLOW_MODE;
const KeyEvent_InputStyle KeyEvent::AS_IS;
const KeyEvent_InputStyle KeyEvent::DIRECT_INPUT;
const KeyEvent_InputStyle KeyEvent::InputStyle_MIN;
const KeyEvent_InputStyle KeyEvent::InputStyle_MAX;
const int KeyEvent::InputStyle_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KeyEvent_ProbableKeyEvent::kKeyCodeFieldNumber;
const int KeyEvent_ProbableKeyEvent::kSpecialKeyFieldNumber;
const int KeyEvent_ProbableKeyEvent::kModifierKeysFieldNumber;
const int KeyEvent_ProbableKeyEvent::kProbabilityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KeyEvent_ProbableKeyEvent::KeyEvent_ProbableKeyEvent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mozc.commands.KeyEvent.ProbableKeyEvent)
}

void KeyEvent_ProbableKeyEvent::InitAsDefaultInstance() {
}

KeyEvent_ProbableKeyEvent::KeyEvent_ProbableKeyEvent(const KeyEvent_ProbableKeyEvent& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mozc.commands.KeyEvent.ProbableKeyEvent)
}

void KeyEvent_ProbableKeyEvent::SharedCtor() {
  _cached_size_ = 0;
  key_code_ = 0u;
  special_key_ = 0;
  probability_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KeyEvent_ProbableKeyEvent::~KeyEvent_ProbableKeyEvent() {
  // @@protoc_insertion_point(destructor:mozc.commands.KeyEvent.ProbableKeyEvent)
  SharedDtor();
}

void KeyEvent_ProbableKeyEvent::SharedDtor() {
  if (this != default_instance_) {
  }
}

void KeyEvent_ProbableKeyEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KeyEvent_ProbableKeyEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KeyEvent_ProbableKeyEvent_descriptor_;
}

const KeyEvent_ProbableKeyEvent& KeyEvent_ProbableKeyEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2fcommands_2eproto();
  return *default_instance_;
}

KeyEvent_ProbableKeyEvent* KeyEvent_ProbableKeyEvent::default_instance_ = NULL;

KeyEvent_ProbableKeyEvent* KeyEvent_ProbableKeyEvent::New(::google::protobuf::Arena* arena) const {
  KeyEvent_ProbableKeyEvent* n = new KeyEvent_ProbableKeyEvent;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void KeyEvent_ProbableKeyEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:mozc.commands.KeyEvent.ProbableKeyEvent)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(KeyEvent_ProbableKeyEvent, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<KeyEvent_ProbableKeyEvent*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 11u) {
    ZR_(key_code_, special_key_);
    probability_ = 0;
  }

#undef ZR_HELPER_
#undef ZR_

  modifier_keys_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool KeyEvent_ProbableKeyEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mozc.commands.KeyEvent.ProbableKeyEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 key_code = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &key_code_)));
          set_has_key_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_special_key;
        break;
      }

      // optional .mozc.commands.KeyEvent.SpecialKey special_key = 3;
      case 3: {
        if (tag == 24) {
         parse_special_key:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mozc::commands::KeyEvent_SpecialKey_IsValid(value)) {
            set_special_key(static_cast< ::mozc::commands::KeyEvent_SpecialKey >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_modifier_keys;
        break;
      }

      // repeated .mozc.commands.KeyEvent.ModifierKey modifier_keys = 4;
      case 4: {
        if (tag == 32) {
         parse_modifier_keys:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mozc::commands::KeyEvent_ModifierKey_IsValid(value)) {
            add_modifier_keys(static_cast< ::mozc::commands::KeyEvent_ModifierKey >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormat::ReadPackedEnumPreserveUnknowns(
                 input,
                 4,
                 ::mozc::commands::KeyEvent_ModifierKey_IsValid,
                 mutable_unknown_fields(),
                 this->mutable_modifier_keys())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_modifier_keys;
        if (input->ExpectTag(81)) goto parse_probability;
        break;
      }

      // optional double probability = 10;
      case 10: {
        if (tag == 81) {
         parse_probability:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &probability_)));
          set_has_probability();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mozc.commands.KeyEvent.ProbableKeyEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mozc.commands.KeyEvent.ProbableKeyEvent)
  return false;
#undef DO_
}

void KeyEvent_ProbableKeyEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mozc.commands.KeyEvent.ProbableKeyEvent)
  // optional uint32 key_code = 1;
  if (has_key_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->key_code(), output);
  }

  // optional .mozc.commands.KeyEvent.SpecialKey special_key = 3;
  if (has_special_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->special_key(), output);
  }

  // repeated .mozc.commands.KeyEvent.ModifierKey modifier_keys = 4;
  for (int i = 0; i < this->modifier_keys_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->modifier_keys(i), output);
  }

  // optional double probability = 10;
  if (has_probability()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->probability(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mozc.commands.KeyEvent.ProbableKeyEvent)
}

::google::protobuf::uint8* KeyEvent_ProbableKeyEvent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mozc.commands.KeyEvent.ProbableKeyEvent)
  // optional uint32 key_code = 1;
  if (has_key_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->key_code(), target);
  }

  // optional .mozc.commands.KeyEvent.SpecialKey special_key = 3;
  if (has_special_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->special_key(), target);
  }

  // repeated .mozc.commands.KeyEvent.ModifierKey modifier_keys = 4;
  for (int i = 0; i < this->modifier_keys_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->modifier_keys(i), target);
  }

  // optional double probability = 10;
  if (has_probability()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->probability(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mozc.commands.KeyEvent.ProbableKeyEvent)
  return target;
}

int KeyEvent_ProbableKeyEvent::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:mozc.commands.KeyEvent.ProbableKeyEvent)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 11u) {
    // optional uint32 key_code = 1;
    if (has_key_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->key_code());
    }

    // optional .mozc.commands.KeyEvent.SpecialKey special_key = 3;
    if (has_special_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->special_key());
    }

    // optional double probability = 10;
    if (has_probability()) {
      total_size += 1 + 8;
    }

  }
  // repeated .mozc.commands.KeyEvent.ModifierKey modifier_keys = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->modifier_keys_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->modifier_keys(i));
    }
    total_size += 1 * this->modifier_keys_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KeyEvent_ProbableKeyEvent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mozc.commands.KeyEvent.ProbableKeyEvent)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const KeyEvent_ProbableKeyEvent* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const KeyEvent_ProbableKeyEvent>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mozc.commands.KeyEvent.ProbableKeyEvent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mozc.commands.KeyEvent.ProbableKeyEvent)
    MergeFrom(*source);
  }
}

void KeyEvent_ProbableKeyEvent::MergeFrom(const KeyEvent_ProbableKeyEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mozc.commands.KeyEvent.ProbableKeyEvent)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  modifier_keys_.MergeFrom(from.modifier_keys_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key_code()) {
      set_key_code(from.key_code());
    }
    if (from.has_special_key()) {
      set_special_key(from.special_key());
    }
    if (from.has_probability()) {
      set_probability(from.probability());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void KeyEvent_ProbableKeyEvent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mozc.commands.KeyEvent.ProbableKeyEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeyEvent_ProbableKeyEvent::CopyFrom(const KeyEvent_ProbableKeyEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mozc.commands.KeyEvent.ProbableKeyEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeyEvent_ProbableKeyEvent::IsInitialized() const {

  return true;
}

void KeyEvent_ProbableKeyEvent::Swap(KeyEvent_ProbableKeyEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KeyEvent_ProbableKeyEvent::InternalSwap(KeyEvent_ProbableKeyEvent* other) {
  std::swap(key_code_, other->key_code_);
  std::swap(special_key_, other->special_key_);
  modifier_keys_.UnsafeArenaSwap(&other->modifier_keys_);
  std::swap(probability_, other->probability_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata KeyEvent_ProbableKeyEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KeyEvent_ProbableKeyEvent_descriptor_;
  metadata.reflection = KeyEvent_ProbableKeyEvent_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KeyEvent::kKeyCodeFieldNumber;
const int KeyEvent::kModifiersFieldNumber;
const int KeyEvent::kSpecialKeyFieldNumber;
const int KeyEvent::kModifierKeysFieldNumber;
const int KeyEvent::kKeyStringFieldNumber;
const int KeyEvent::kInputStyleFieldNumber;
const int KeyEvent::kModeFieldNumber;
const int KeyEvent::kProbableKeyEventFieldNumber;
const int KeyEvent::kActivatedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KeyEvent::KeyEvent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mozc.commands.KeyEvent)
}

void KeyEvent::InitAsDefaultInstance() {
}

KeyEvent::KeyEvent(const KeyEvent& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mozc.commands.KeyEvent)
}

void KeyEvent::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  key_code_ = 0u;
  modifiers_ = 0u;
  special_key_ = 0;
  key_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  input_style_ = 0;
  mode_ = 0;
  activated_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KeyEvent::~KeyEvent() {
  // @@protoc_insertion_point(destructor:mozc.commands.KeyEvent)
  SharedDtor();
}

void KeyEvent::SharedDtor() {
  key_string_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void KeyEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KeyEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KeyEvent_descriptor_;
}

const KeyEvent& KeyEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2fcommands_2eproto();
  return *default_instance_;
}

KeyEvent* KeyEvent::default_instance_ = NULL;

KeyEvent* KeyEvent::New(::google::protobuf::Arena* arena) const {
  KeyEvent* n = new KeyEvent;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void KeyEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:mozc.commands.KeyEvent)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(KeyEvent, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<KeyEvent*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 119u) {
    ZR_(key_code_, modifiers_);
    ZR_(special_key_, input_style_);
    if (has_key_string()) {
      key_string_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    mode_ = 0;
  }
  activated_ = false;

#undef ZR_HELPER_
#undef ZR_

  modifier_keys_.Clear();
  probable_key_event_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool KeyEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mozc.commands.KeyEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 key_code = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &key_code_)));
          set_has_key_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_modifiers;
        break;
      }

      // optional uint32 modifiers = 2;
      case 2: {
        if (tag == 16) {
         parse_modifiers:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &modifiers_)));
          set_has_modifiers();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_special_key;
        break;
      }

      // optional .mozc.commands.KeyEvent.SpecialKey special_key = 3;
      case 3: {
        if (tag == 24) {
         parse_special_key:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mozc::commands::KeyEvent_SpecialKey_IsValid(value)) {
            set_special_key(static_cast< ::mozc::commands::KeyEvent_SpecialKey >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_modifier_keys;
        break;
      }

      // repeated .mozc.commands.KeyEvent.ModifierKey modifier_keys = 4;
      case 4: {
        if (tag == 32) {
         parse_modifier_keys:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mozc::commands::KeyEvent_ModifierKey_IsValid(value)) {
            add_modifier_keys(static_cast< ::mozc::commands::KeyEvent_ModifierKey >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormat::ReadPackedEnumPreserveUnknowns(
                 input,
                 4,
                 ::mozc::commands::KeyEvent_ModifierKey_IsValid,
                 mutable_unknown_fields(),
                 this->mutable_modifier_keys())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_modifier_keys;
        if (input->ExpectTag(42)) goto parse_key_string;
        break;
      }

      // optional string key_string = 5;
      case 5: {
        if (tag == 42) {
         parse_key_string:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key_string()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key_string().data(), this->key_string().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mozc.commands.KeyEvent.key_string");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_input_style;
        break;
      }

      // optional .mozc.commands.KeyEvent.InputStyle input_style = 6 [default = FOLLOW_MODE];
      case 6: {
        if (tag == 48) {
         parse_input_style:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mozc::commands::KeyEvent_InputStyle_IsValid(value)) {
            set_input_style(static_cast< ::mozc::commands::KeyEvent_InputStyle >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_mode;
        break;
      }

      // optional .mozc.commands.CompositionMode mode = 7;
      case 7: {
        if (tag == 56) {
         parse_mode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mozc::commands::CompositionMode_IsValid(value)) {
            set_mode(static_cast< ::mozc::commands::CompositionMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_probable_key_event;
        break;
      }

      // repeated .mozc.commands.KeyEvent.ProbableKeyEvent probable_key_event = 8;
      case 8: {
        if (tag == 66) {
         parse_probable_key_event:
          DO_(input->IncrementRecursionDepth());
         parse_loop_probable_key_event:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_probable_key_event()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_loop_probable_key_event;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(72)) goto parse_activated;
        break;
      }

      // optional bool activated = 9;
      case 9: {
        if (tag == 72) {
         parse_activated:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &activated_)));
          set_has_activated();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mozc.commands.KeyEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mozc.commands.KeyEvent)
  return false;
#undef DO_
}

void KeyEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mozc.commands.KeyEvent)
  // optional uint32 key_code = 1;
  if (has_key_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->key_code(), output);
  }

  // optional uint32 modifiers = 2;
  if (has_modifiers()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->modifiers(), output);
  }

  // optional .mozc.commands.KeyEvent.SpecialKey special_key = 3;
  if (has_special_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->special_key(), output);
  }

  // repeated .mozc.commands.KeyEvent.ModifierKey modifier_keys = 4;
  for (int i = 0; i < this->modifier_keys_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->modifier_keys(i), output);
  }

  // optional string key_string = 5;
  if (has_key_string()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key_string().data(), this->key_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mozc.commands.KeyEvent.key_string");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->key_string(), output);
  }

  // optional .mozc.commands.KeyEvent.InputStyle input_style = 6 [default = FOLLOW_MODE];
  if (has_input_style()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->input_style(), output);
  }

  // optional .mozc.commands.CompositionMode mode = 7;
  if (has_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->mode(), output);
  }

  // repeated .mozc.commands.KeyEvent.ProbableKeyEvent probable_key_event = 8;
  for (unsigned int i = 0, n = this->probable_key_event_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->probable_key_event(i), output);
  }

  // optional bool activated = 9;
  if (has_activated()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->activated(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mozc.commands.KeyEvent)
}

::google::protobuf::uint8* KeyEvent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mozc.commands.KeyEvent)
  // optional uint32 key_code = 1;
  if (has_key_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->key_code(), target);
  }

  // optional uint32 modifiers = 2;
  if (has_modifiers()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->modifiers(), target);
  }

  // optional .mozc.commands.KeyEvent.SpecialKey special_key = 3;
  if (has_special_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->special_key(), target);
  }

  // repeated .mozc.commands.KeyEvent.ModifierKey modifier_keys = 4;
  for (int i = 0; i < this->modifier_keys_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->modifier_keys(i), target);
  }

  // optional string key_string = 5;
  if (has_key_string()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key_string().data(), this->key_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mozc.commands.KeyEvent.key_string");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->key_string(), target);
  }

  // optional .mozc.commands.KeyEvent.InputStyle input_style = 6 [default = FOLLOW_MODE];
  if (has_input_style()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->input_style(), target);
  }

  // optional .mozc.commands.CompositionMode mode = 7;
  if (has_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->mode(), target);
  }

  // repeated .mozc.commands.KeyEvent.ProbableKeyEvent probable_key_event = 8;
  for (unsigned int i = 0, n = this->probable_key_event_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, this->probable_key_event(i), false, target);
  }

  // optional bool activated = 9;
  if (has_activated()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->activated(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mozc.commands.KeyEvent)
  return target;
}

int KeyEvent::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:mozc.commands.KeyEvent)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 119u) {
    // optional uint32 key_code = 1;
    if (has_key_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->key_code());
    }

    // optional uint32 modifiers = 2;
    if (has_modifiers()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->modifiers());
    }

    // optional .mozc.commands.KeyEvent.SpecialKey special_key = 3;
    if (has_special_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->special_key());
    }

    // optional string key_string = 5;
    if (has_key_string()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key_string());
    }

    // optional .mozc.commands.KeyEvent.InputStyle input_style = 6 [default = FOLLOW_MODE];
    if (has_input_style()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->input_style());
    }

    // optional .mozc.commands.CompositionMode mode = 7;
    if (has_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mode());
    }

  }
  // optional bool activated = 9;
  if (has_activated()) {
    total_size += 1 + 1;
  }

  // repeated .mozc.commands.KeyEvent.ModifierKey modifier_keys = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->modifier_keys_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->modifier_keys(i));
    }
    total_size += 1 * this->modifier_keys_size() + data_size;
  }

  // repeated .mozc.commands.KeyEvent.ProbableKeyEvent probable_key_event = 8;
  total_size += 1 * this->probable_key_event_size();
  for (int i = 0; i < this->probable_key_event_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->probable_key_event(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KeyEvent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mozc.commands.KeyEvent)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const KeyEvent* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const KeyEvent>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mozc.commands.KeyEvent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mozc.commands.KeyEvent)
    MergeFrom(*source);
  }
}

void KeyEvent::MergeFrom(const KeyEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mozc.commands.KeyEvent)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  modifier_keys_.MergeFrom(from.modifier_keys_);
  probable_key_event_.MergeFrom(from.probable_key_event_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key_code()) {
      set_key_code(from.key_code());
    }
    if (from.has_modifiers()) {
      set_modifiers(from.modifiers());
    }
    if (from.has_special_key()) {
      set_special_key(from.special_key());
    }
    if (from.has_key_string()) {
      set_has_key_string();
      key_string_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_string_);
    }
    if (from.has_input_style()) {
      set_input_style(from.input_style());
    }
    if (from.has_mode()) {
      set_mode(from.mode());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_activated()) {
      set_activated(from.activated());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void KeyEvent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mozc.commands.KeyEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeyEvent::CopyFrom(const KeyEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mozc.commands.KeyEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeyEvent::IsInitialized() const {

  return true;
}

void KeyEvent::Swap(KeyEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KeyEvent::InternalSwap(KeyEvent* other) {
  std::swap(key_code_, other->key_code_);
  std::swap(modifiers_, other->modifiers_);
  std::swap(special_key_, other->special_key_);
  modifier_keys_.UnsafeArenaSwap(&other->modifier_keys_);
  key_string_.Swap(&other->key_string_);
  std::swap(input_style_, other->input_style_);
  std::swap(mode_, other->mode_);
  probable_key_event_.UnsafeArenaSwap(&other->probable_key_event_);
  std::swap(activated_, other->activated_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata KeyEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KeyEvent_descriptor_;
  metadata.reflection = KeyEvent_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// KeyEvent_ProbableKeyEvent

// optional uint32 key_code = 1;
bool KeyEvent_ProbableKeyEvent::has_key_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void KeyEvent_ProbableKeyEvent::set_has_key_code() {
  _has_bits_[0] |= 0x00000001u;
}
void KeyEvent_ProbableKeyEvent::clear_has_key_code() {
  _has_bits_[0] &= ~0x00000001u;
}
void KeyEvent_ProbableKeyEvent::clear_key_code() {
  key_code_ = 0u;
  clear_has_key_code();
}
 ::google::protobuf::uint32 KeyEvent_ProbableKeyEvent::key_code() const {
  // @@protoc_insertion_point(field_get:mozc.commands.KeyEvent.ProbableKeyEvent.key_code)
  return key_code_;
}
 void KeyEvent_ProbableKeyEvent::set_key_code(::google::protobuf::uint32 value) {
  set_has_key_code();
  key_code_ = value;
  // @@protoc_insertion_point(field_set:mozc.commands.KeyEvent.ProbableKeyEvent.key_code)
}

// optional .mozc.commands.KeyEvent.SpecialKey special_key = 3;
bool KeyEvent_ProbableKeyEvent::has_special_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void KeyEvent_ProbableKeyEvent::set_has_special_key() {
  _has_bits_[0] |= 0x00000002u;
}
void KeyEvent_ProbableKeyEvent::clear_has_special_key() {
  _has_bits_[0] &= ~0x00000002u;
}
void KeyEvent_ProbableKeyEvent::clear_special_key() {
  special_key_ = 0;
  clear_has_special_key();
}
 ::mozc::commands::KeyEvent_SpecialKey KeyEvent_ProbableKeyEvent::special_key() const {
  // @@protoc_insertion_point(field_get:mozc.commands.KeyEvent.ProbableKeyEvent.special_key)
  return static_cast< ::mozc::commands::KeyEvent_SpecialKey >(special_key_);
}
 void KeyEvent_ProbableKeyEvent::set_special_key(::mozc::commands::KeyEvent_SpecialKey value) {
  assert(::mozc::commands::KeyEvent_SpecialKey_IsValid(value));
  set_has_special_key();
  special_key_ = value;
  // @@protoc_insertion_point(field_set:mozc.commands.KeyEvent.ProbableKeyEvent.special_key)
}

// repeated .mozc.commands.KeyEvent.ModifierKey modifier_keys = 4;
int KeyEvent_ProbableKeyEvent::modifier_keys_size() const {
  return modifier_keys_.size();
}
void KeyEvent_ProbableKeyEvent::clear_modifier_keys() {
  modifier_keys_.Clear();
}
 ::mozc::commands::KeyEvent_ModifierKey KeyEvent_ProbableKeyEvent::modifier_keys(int index) const {
  // @@protoc_insertion_point(field_get:mozc.commands.KeyEvent.ProbableKeyEvent.modifier_keys)
  return static_cast< ::mozc::commands::KeyEvent_ModifierKey >(modifier_keys_.Get(index));
}
 void KeyEvent_ProbableKeyEvent::set_modifier_keys(int index, ::mozc::commands::KeyEvent_ModifierKey value) {
  assert(::mozc::commands::KeyEvent_ModifierKey_IsValid(value));
  modifier_keys_.Set(index, value);
  // @@protoc_insertion_point(field_set:mozc.commands.KeyEvent.ProbableKeyEvent.modifier_keys)
}
 void KeyEvent_ProbableKeyEvent::add_modifier_keys(::mozc::commands::KeyEvent_ModifierKey value) {
  assert(::mozc::commands::KeyEvent_ModifierKey_IsValid(value));
  modifier_keys_.Add(value);
  // @@protoc_insertion_point(field_add:mozc.commands.KeyEvent.ProbableKeyEvent.modifier_keys)
}
 const ::google::protobuf::RepeatedField<int>&
KeyEvent_ProbableKeyEvent::modifier_keys() const {
  // @@protoc_insertion_point(field_list:mozc.commands.KeyEvent.ProbableKeyEvent.modifier_keys)
  return modifier_keys_;
}
 ::google::protobuf::RepeatedField<int>*
KeyEvent_ProbableKeyEvent::mutable_modifier_keys() {
  // @@protoc_insertion_point(field_mutable_list:mozc.commands.KeyEvent.ProbableKeyEvent.modifier_keys)
  return &modifier_keys_;
}

// optional double probability = 10;
bool KeyEvent_ProbableKeyEvent::has_probability() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void KeyEvent_ProbableKeyEvent::set_has_probability() {
  _has_bits_[0] |= 0x00000008u;
}
void KeyEvent_ProbableKeyEvent::clear_has_probability() {
  _has_bits_[0] &= ~0x00000008u;
}
void KeyEvent_ProbableKeyEvent::clear_probability() {
  probability_ = 0;
  clear_has_probability();
}
 double KeyEvent_ProbableKeyEvent::probability() const {
  // @@protoc_insertion_point(field_get:mozc.commands.KeyEvent.ProbableKeyEvent.probability)
  return probability_;
}
 void KeyEvent_ProbableKeyEvent::set_probability(double value) {
  set_has_probability();
  probability_ = value;
  // @@protoc_insertion_point(field_set:mozc.commands.KeyEvent.ProbableKeyEvent.probability)
}

// -------------------------------------------------------------------

// KeyEvent

// optional uint32 key_code = 1;
bool KeyEvent::has_key_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void KeyEvent::set_has_key_code() {
  _has_bits_[0] |= 0x00000001u;
}
void KeyEvent::clear_has_key_code() {
  _has_bits_[0] &= ~0x00000001u;
}
void KeyEvent::clear_key_code() {
  key_code_ = 0u;
  clear_has_key_code();
}
 ::google::protobuf::uint32 KeyEvent::key_code() const {
  // @@protoc_insertion_point(field_get:mozc.commands.KeyEvent.key_code)
  return key_code_;
}
 void KeyEvent::set_key_code(::google::protobuf::uint32 value) {
  set_has_key_code();
  key_code_ = value;
  // @@protoc_insertion_point(field_set:mozc.commands.KeyEvent.key_code)
}

// optional uint32 modifiers = 2;
bool KeyEvent::has_modifiers() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void KeyEvent::set_has_modifiers() {
  _has_bits_[0] |= 0x00000002u;
}
void KeyEvent::clear_has_modifiers() {
  _has_bits_[0] &= ~0x00000002u;
}
void KeyEvent::clear_modifiers() {
  modifiers_ = 0u;
  clear_has_modifiers();
}
 ::google::protobuf::uint32 KeyEvent::modifiers() const {
  // @@protoc_insertion_point(field_get:mozc.commands.KeyEvent.modifiers)
  return modifiers_;
}
 void KeyEvent::set_modifiers(::google::protobuf::uint32 value) {
  set_has_modifiers();
  modifiers_ = value;
  // @@protoc_insertion_point(field_set:mozc.commands.KeyEvent.modifiers)
}

// optional .mozc.commands.KeyEvent.SpecialKey special_key = 3;
bool KeyEvent::has_special_key() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void KeyEvent::set_has_special_key() {
  _has_bits_[0] |= 0x00000004u;
}
void KeyEvent::clear_has_special_key() {
  _has_bits_[0] &= ~0x00000004u;
}
void KeyEvent::clear_special_key() {
  special_key_ = 0;
  clear_has_special_key();
}
 ::mozc::commands::KeyEvent_SpecialKey KeyEvent::special_key() const {
  // @@protoc_insertion_point(field_get:mozc.commands.KeyEvent.special_key)
  return static_cast< ::mozc::commands::KeyEvent_SpecialKey >(special_key_);
}
 void KeyEvent::set_special_key(::mozc::commands::KeyEvent_SpecialKey value) {
  assert(::mozc::commands::KeyEvent_SpecialKey_IsValid(value));
  set_has_special_key();
  special_key_ = value;
  // @@protoc_insertion_point(field_set:mozc.commands.KeyEvent.special_key)
}

// repeated .mozc.commands.KeyEvent.ModifierKey modifier_keys = 4;
int KeyEvent::modifier_keys_size() const {
  return modifier_keys_.size();
}
void KeyEvent::clear_modifier_keys() {
  modifier_keys_.Clear();
}
 ::mozc::commands::KeyEvent_ModifierKey KeyEvent::modifier_keys(int index) const {
  // @@protoc_insertion_point(field_get:mozc.commands.KeyEvent.modifier_keys)
  return static_cast< ::mozc::commands::KeyEvent_ModifierKey >(modifier_keys_.Get(index));
}
 void KeyEvent::set_modifier_keys(int index, ::mozc::commands::KeyEvent_ModifierKey value) {
  assert(::mozc::commands::KeyEvent_ModifierKey_IsValid(value));
  modifier_keys_.Set(index, value);
  // @@protoc_insertion_point(field_set:mozc.commands.KeyEvent.modifier_keys)
}
 void KeyEvent::add_modifier_keys(::mozc::commands::KeyEvent_ModifierKey value) {
  assert(::mozc::commands::KeyEvent_ModifierKey_IsValid(value));
  modifier_keys_.Add(value);
  // @@protoc_insertion_point(field_add:mozc.commands.KeyEvent.modifier_keys)
}
 const ::google::protobuf::RepeatedField<int>&
KeyEvent::modifier_keys() const {
  // @@protoc_insertion_point(field_list:mozc.commands.KeyEvent.modifier_keys)
  return modifier_keys_;
}
 ::google::protobuf::RepeatedField<int>*
KeyEvent::mutable_modifier_keys() {
  // @@protoc_insertion_point(field_mutable_list:mozc.commands.KeyEvent.modifier_keys)
  return &modifier_keys_;
}

// optional string key_string = 5;
bool KeyEvent::has_key_string() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void KeyEvent::set_has_key_string() {
  _has_bits_[0] |= 0x00000010u;
}
void KeyEvent::clear_has_key_string() {
  _has_bits_[0] &= ~0x00000010u;
}
void KeyEvent::clear_key_string() {
  key_string_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key_string();
}
 const ::std::string& KeyEvent::key_string() const {
  // @@protoc_insertion_point(field_get:mozc.commands.KeyEvent.key_string)
  return key_string_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void KeyEvent::set_key_string(const ::std::string& value) {
  set_has_key_string();
  key_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mozc.commands.KeyEvent.key_string)
}
 void KeyEvent::set_key_string(const char* value) {
  set_has_key_string();
  key_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mozc.commands.KeyEvent.key_string)
}
 void KeyEvent::set_key_string(const char* value, size_t size) {
  set_has_key_string();
  key_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mozc.commands.KeyEvent.key_string)
}
 ::std::string* KeyEvent::mutable_key_string() {
  set_has_key_string();
  // @@protoc_insertion_point(field_mutable:mozc.commands.KeyEvent.key_string)
  return key_string_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* KeyEvent::release_key_string() {
  // @@protoc_insertion_point(field_release:mozc.commands.KeyEvent.key_string)
  clear_has_key_string();
  return key_string_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void KeyEvent::set_allocated_key_string(::std::string* key_string) {
  if (key_string != NULL) {
    set_has_key_string();
  } else {
    clear_has_key_string();
  }
  key_string_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key_string);
  // @@protoc_insertion_point(field_set_allocated:mozc.commands.KeyEvent.key_string)
}

// optional .mozc.commands.KeyEvent.InputStyle input_style = 6 [default = FOLLOW_MODE];
bool KeyEvent::has_input_style() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void KeyEvent::set_has_input_style() {
  _has_bits_[0] |= 0x00000020u;
}
void KeyEvent::clear_has_input_style() {
  _has_bits_[0] &= ~0x00000020u;
}
void KeyEvent::clear_input_style() {
  input_style_ = 0;
  clear_has_input_style();
}
 ::mozc::commands::KeyEvent_InputStyle KeyEvent::input_style() const {
  // @@protoc_insertion_point(field_get:mozc.commands.KeyEvent.input_style)
  return static_cast< ::mozc::commands::KeyEvent_InputStyle >(input_style_);
}
 void KeyEvent::set_input_style(::mozc::commands::KeyEvent_InputStyle value) {
  assert(::mozc::commands::KeyEvent_InputStyle_IsValid(value));
  set_has_input_style();
  input_style_ = value;
  // @@protoc_insertion_point(field_set:mozc.commands.KeyEvent.input_style)
}

// optional .mozc.commands.CompositionMode mode = 7;
bool KeyEvent::has_mode() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void KeyEvent::set_has_mode() {
  _has_bits_[0] |= 0x00000040u;
}
void KeyEvent::clear_has_mode() {
  _has_bits_[0] &= ~0x00000040u;
}
void KeyEvent::clear_mode() {
  mode_ = 0;
  clear_has_mode();
}
 ::mozc::commands::CompositionMode KeyEvent::mode() const {
  // @@protoc_insertion_point(field_get:mozc.commands.KeyEvent.mode)
  return static_cast< ::mozc::commands::CompositionMode >(mode_);
}
 void KeyEvent::set_mode(::mozc::commands::CompositionMode value) {
  assert(::mozc::commands::CompositionMode_IsValid(value));
  set_has_mode();
  mode_ = value;
  // @@protoc_insertion_point(field_set:mozc.commands.KeyEvent.mode)
}

// repeated .mozc.commands.KeyEvent.ProbableKeyEvent probable_key_event = 8;
int KeyEvent::probable_key_event_size() const {
  return probable_key_event_.size();
}
void KeyEvent::clear_probable_key_event() {
  probable_key_event_.Clear();
}
const ::mozc::commands::KeyEvent_ProbableKeyEvent& KeyEvent::probable_key_event(int index) const {
  // @@protoc_insertion_point(field_get:mozc.commands.KeyEvent.probable_key_event)
  return probable_key_event_.Get(index);
}
::mozc::commands::KeyEvent_ProbableKeyEvent* KeyEvent::mutable_probable_key_event(int index) {
  // @@protoc_insertion_point(field_mutable:mozc.commands.KeyEvent.probable_key_event)
  return probable_key_event_.Mutable(index);
}
::mozc::commands::KeyEvent_ProbableKeyEvent* KeyEvent::add_probable_key_event() {
  // @@protoc_insertion_point(field_add:mozc.commands.KeyEvent.probable_key_event)
  return probable_key_event_.Add();
}
::google::protobuf::RepeatedPtrField< ::mozc::commands::KeyEvent_ProbableKeyEvent >*
KeyEvent::mutable_probable_key_event() {
  // @@protoc_insertion_point(field_mutable_list:mozc.commands.KeyEvent.probable_key_event)
  return &probable_key_event_;
}
const ::google::protobuf::RepeatedPtrField< ::mozc::commands::KeyEvent_ProbableKeyEvent >&
KeyEvent::probable_key_event() const {
  // @@protoc_insertion_point(field_list:mozc.commands.KeyEvent.probable_key_event)
  return probable_key_event_;
}

// optional bool activated = 9;
bool KeyEvent::has_activated() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void KeyEvent::set_has_activated() {
  _has_bits_[0] |= 0x00000100u;
}
void KeyEvent::clear_has_activated() {
  _has_bits_[0] &= ~0x00000100u;
}
void KeyEvent::clear_activated() {
  activated_ = false;
  clear_has_activated();
}
 bool KeyEvent::activated() const {
  // @@protoc_insertion_point(field_get:mozc.commands.KeyEvent.activated)
  return activated_;
}
 void KeyEvent::set_activated(bool value) {
  set_has_activated();
  activated_ = value;
  // @@protoc_insertion_point(field_set:mozc.commands.KeyEvent.activated)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* GenericStorageEntry_StorageType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GenericStorageEntry_StorageType_descriptor_;
}
bool GenericStorageEntry_StorageType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const GenericStorageEntry_StorageType GenericStorageEntry::SYMBOL_HISTORY;
const GenericStorageEntry_StorageType GenericStorageEntry::EMOTICON_HISTORY;
const GenericStorageEntry_StorageType GenericStorageEntry::EMOJI_HISTORY;
const GenericStorageEntry_StorageType GenericStorageEntry::StorageType_MIN;
const GenericStorageEntry_StorageType GenericStorageEntry::StorageType_MAX;
const int GenericStorageEntry::StorageType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GenericStorageEntry::kTypeFieldNumber;
const int GenericStorageEntry::kKeyFieldNumber;
const int GenericStorageEntry::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GenericStorageEntry::GenericStorageEntry()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mozc.commands.GenericStorageEntry)
}

void GenericStorageEntry::InitAsDefaultInstance() {
}

GenericStorageEntry::GenericStorageEntry(const GenericStorageEntry& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mozc.commands.GenericStorageEntry)
}

void GenericStorageEntry::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 0;
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GenericStorageEntry::~GenericStorageEntry() {
  // @@protoc_insertion_point(destructor:mozc.commands.GenericStorageEntry)
  SharedDtor();
}

void GenericStorageEntry::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void GenericStorageEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GenericStorageEntry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GenericStorageEntry_descriptor_;
}

const GenericStorageEntry& GenericStorageEntry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2fcommands_2eproto();
  return *default_instance_;
}

GenericStorageEntry* GenericStorageEntry::default_instance_ = NULL;

GenericStorageEntry* GenericStorageEntry::New(::google::protobuf::Arena* arena) const {
  GenericStorageEntry* n = new GenericStorageEntry;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GenericStorageEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:mozc.commands.GenericStorageEntry)
  if (_has_bits_[0 / 32] & 3u) {
    type_ = 0;
    if (has_key()) {
      key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  value_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool GenericStorageEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mozc.commands.GenericStorageEntry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .mozc.commands.GenericStorageEntry.StorageType type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mozc::commands::GenericStorageEntry_StorageType_IsValid(value)) {
            set_type(static_cast< ::mozc::commands::GenericStorageEntry_StorageType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_key;
        break;
      }

      // optional string key = 2;
      case 2: {
        if (tag == 18) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mozc.commands.GenericStorageEntry.key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_value;
        break;
      }

      // repeated bytes value = 3;
      case 3: {
        if (tag == 26) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_value;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mozc.commands.GenericStorageEntry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mozc.commands.GenericStorageEntry)
  return false;
#undef DO_
}

void GenericStorageEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mozc.commands.GenericStorageEntry)
  // optional .mozc.commands.GenericStorageEntry.StorageType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional string key = 2;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mozc.commands.GenericStorageEntry.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->key(), output);
  }

  // repeated bytes value = 3;
  for (int i = 0; i < this->value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->value(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mozc.commands.GenericStorageEntry)
}

::google::protobuf::uint8* GenericStorageEntry::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mozc.commands.GenericStorageEntry)
  // optional .mozc.commands.GenericStorageEntry.StorageType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional string key = 2;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mozc.commands.GenericStorageEntry.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->key(), target);
  }

  // repeated bytes value = 3;
  for (int i = 0; i < this->value_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(3, this->value(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mozc.commands.GenericStorageEntry)
  return target;
}

int GenericStorageEntry::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:mozc.commands.GenericStorageEntry)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional .mozc.commands.GenericStorageEntry.StorageType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional string key = 2;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

  }
  // repeated bytes value = 3;
  total_size += 1 * this->value_size();
  for (int i = 0; i < this->value_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->value(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GenericStorageEntry::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mozc.commands.GenericStorageEntry)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const GenericStorageEntry* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GenericStorageEntry>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mozc.commands.GenericStorageEntry)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mozc.commands.GenericStorageEntry)
    MergeFrom(*source);
  }
}

void GenericStorageEntry::MergeFrom(const GenericStorageEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mozc.commands.GenericStorageEntry)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  value_.MergeFrom(from.value_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_key()) {
      set_has_key();
      key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void GenericStorageEntry::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mozc.commands.GenericStorageEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GenericStorageEntry::CopyFrom(const GenericStorageEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mozc.commands.GenericStorageEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GenericStorageEntry::IsInitialized() const {

  return true;
}

void GenericStorageEntry::Swap(GenericStorageEntry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GenericStorageEntry::InternalSwap(GenericStorageEntry* other) {
  std::swap(type_, other->type_);
  key_.Swap(&other->key_);
  value_.UnsafeArenaSwap(&other->value_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GenericStorageEntry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GenericStorageEntry_descriptor_;
  metadata.reflection = GenericStorageEntry_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GenericStorageEntry

// optional .mozc.commands.GenericStorageEntry.StorageType type = 1;
bool GenericStorageEntry::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GenericStorageEntry::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
void GenericStorageEntry::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void GenericStorageEntry::clear_type() {
  type_ = 0;
  clear_has_type();
}
 ::mozc::commands::GenericStorageEntry_StorageType GenericStorageEntry::type() const {
  // @@protoc_insertion_point(field_get:mozc.commands.GenericStorageEntry.type)
  return static_cast< ::mozc::commands::GenericStorageEntry_StorageType >(type_);
}
 void GenericStorageEntry::set_type(::mozc::commands::GenericStorageEntry_StorageType value) {
  assert(::mozc::commands::GenericStorageEntry_StorageType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:mozc.commands.GenericStorageEntry.type)
}

// optional string key = 2;
bool GenericStorageEntry::has_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GenericStorageEntry::set_has_key() {
  _has_bits_[0] |= 0x00000002u;
}
void GenericStorageEntry::clear_has_key() {
  _has_bits_[0] &= ~0x00000002u;
}
void GenericStorageEntry::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
 const ::std::string& GenericStorageEntry::key() const {
  // @@protoc_insertion_point(field_get:mozc.commands.GenericStorageEntry.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GenericStorageEntry::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mozc.commands.GenericStorageEntry.key)
}
 void GenericStorageEntry::set_key(const char* value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mozc.commands.GenericStorageEntry.key)
}
 void GenericStorageEntry::set_key(const char* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mozc.commands.GenericStorageEntry.key)
}
 ::std::string* GenericStorageEntry::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:mozc.commands.GenericStorageEntry.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GenericStorageEntry::release_key() {
  // @@protoc_insertion_point(field_release:mozc.commands.GenericStorageEntry.key)
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GenericStorageEntry::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:mozc.commands.GenericStorageEntry.key)
}

// repeated bytes value = 3;
int GenericStorageEntry::value_size() const {
  return value_.size();
}
void GenericStorageEntry::clear_value() {
  value_.Clear();
}
 const ::std::string& GenericStorageEntry::value(int index) const {
  // @@protoc_insertion_point(field_get:mozc.commands.GenericStorageEntry.value)
  return value_.Get(index);
}
 ::std::string* GenericStorageEntry::mutable_value(int index) {
  // @@protoc_insertion_point(field_mutable:mozc.commands.GenericStorageEntry.value)
  return value_.Mutable(index);
}
 void GenericStorageEntry::set_value(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:mozc.commands.GenericStorageEntry.value)
  value_.Mutable(index)->assign(value);
}
 void GenericStorageEntry::set_value(int index, const char* value) {
  value_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:mozc.commands.GenericStorageEntry.value)
}
 void GenericStorageEntry::set_value(int index, const void* value, size_t size) {
  value_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mozc.commands.GenericStorageEntry.value)
}
 ::std::string* GenericStorageEntry::add_value() {
  // @@protoc_insertion_point(field_add_mutable:mozc.commands.GenericStorageEntry.value)
  return value_.Add();
}
 void GenericStorageEntry::add_value(const ::std::string& value) {
  value_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:mozc.commands.GenericStorageEntry.value)
}
 void GenericStorageEntry::add_value(const char* value) {
  value_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:mozc.commands.GenericStorageEntry.value)
}
 void GenericStorageEntry::add_value(const void* value, size_t size) {
  value_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:mozc.commands.GenericStorageEntry.value)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
GenericStorageEntry::value() const {
  // @@protoc_insertion_point(field_list:mozc.commands.GenericStorageEntry.value)
  return value_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
GenericStorageEntry::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:mozc.commands.GenericStorageEntry.value)
  return &value_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* SessionCommand_CommandType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SessionCommand_CommandType_descriptor_;
}
bool SessionCommand_CommandType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SessionCommand_CommandType SessionCommand::REVERT;
const SessionCommand_CommandType SessionCommand::SUBMIT;
const SessionCommand_CommandType SessionCommand::SELECT_CANDIDATE;
const SessionCommand_CommandType SessionCommand::HIGHLIGHT_CANDIDATE;
const SessionCommand_CommandType SessionCommand::SWITCH_INPUT_MODE;
const SessionCommand_CommandType SessionCommand::GET_STATUS;
const SessionCommand_CommandType SessionCommand::SUBMIT_CANDIDATE;
const SessionCommand_CommandType SessionCommand::CONVERT_REVERSE;
const SessionCommand_CommandType SessionCommand::UNDO;
const SessionCommand_CommandType SessionCommand::RESET_CONTEXT;
const SessionCommand_CommandType SessionCommand::MOVE_CURSOR;
const SessionCommand_CommandType SessionCommand::SWITCH_INPUT_FIELD_TYPE;
const SessionCommand_CommandType SessionCommand::USAGE_STATS_EVENT;
const SessionCommand_CommandType SessionCommand::UNDO_OR_REWIND;
const SessionCommand_CommandType SessionCommand::EXPAND_SUGGESTION;
const SessionCommand_CommandType SessionCommand::OBSOLETE_SEND_CARET_LOCATION;
const SessionCommand_CommandType SessionCommand::OBSOLETE_SEND_LANGUAGE_BAR_COMMAND;
const SessionCommand_CommandType SessionCommand::OBSOLETE_GET_ASYNC_RESULT;
const SessionCommand_CommandType SessionCommand::COMMIT_RAW_TEXT;
const SessionCommand_CommandType SessionCommand::CONVERT_PREV_PAGE;
const SessionCommand_CommandType SessionCommand::CONVERT_NEXT_PAGE;
const SessionCommand_CommandType SessionCommand::TURN_ON_IME;
const SessionCommand_CommandType SessionCommand::TURN_OFF_IME;
const SessionCommand_CommandType SessionCommand::NUM_OF_COMMANDS;
const SessionCommand_CommandType SessionCommand::CommandType_MIN;
const SessionCommand_CommandType SessionCommand::CommandType_MAX;
const int SessionCommand::CommandType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SessionCommand_UsageStatsEvent_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SessionCommand_UsageStatsEvent_descriptor_;
}
bool SessionCommand_UsageStatsEvent_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SessionCommand_UsageStatsEvent SessionCommand::INFOLIST_WINDOW_SHOW;
const SessionCommand_UsageStatsEvent SessionCommand::INFOLIST_WINDOW_HIDE;
const SessionCommand_UsageStatsEvent SessionCommand::HANDWRITING_OPEN_EVENT;
const SessionCommand_UsageStatsEvent SessionCommand::HANDWRITING_COMMIT_EVENT;
const SessionCommand_UsageStatsEvent SessionCommand::CHARACTER_PALETTE_OPEN_EVENT;
const SessionCommand_UsageStatsEvent SessionCommand::CHARACTER_PALETTE_COMMIT_EVENT;
const SessionCommand_UsageStatsEvent SessionCommand::SOFTWARE_KEYBOARD_LAYOUT_LANDSCAPE;
const SessionCommand_UsageStatsEvent SessionCommand::SOFTWARE_KEYBOARD_LAYOUT_PORTRAIT;
const SessionCommand_UsageStatsEvent SessionCommand::SUBMITTED_CANDIDATE_ROW_0;
const SessionCommand_UsageStatsEvent SessionCommand::SUBMITTED_CANDIDATE_ROW_1;
const SessionCommand_UsageStatsEvent SessionCommand::SUBMITTED_CANDIDATE_ROW_2;
const SessionCommand_UsageStatsEvent SessionCommand::SUBMITTED_CANDIDATE_ROW_3;
const SessionCommand_UsageStatsEvent SessionCommand::SUBMITTED_CANDIDATE_ROW_4;
const SessionCommand_UsageStatsEvent SessionCommand::SUBMITTED_CANDIDATE_ROW_5;
const SessionCommand_UsageStatsEvent SessionCommand::SUBMITTED_CANDIDATE_ROW_6;
const SessionCommand_UsageStatsEvent SessionCommand::SUBMITTED_CANDIDATE_ROW_7;
const SessionCommand_UsageStatsEvent SessionCommand::SUBMITTED_CANDIDATE_ROW_8;
const SessionCommand_UsageStatsEvent SessionCommand::SUBMITTED_CANDIDATE_ROW_9;
const SessionCommand_UsageStatsEvent SessionCommand::SUBMITTED_CANDIDATE_ROW_GE10;
const SessionCommand_UsageStatsEvent SessionCommand::KEYBOARD_FOLD_EVENT;
const SessionCommand_UsageStatsEvent SessionCommand::KEYBOARD_EXPAND_EVENT;
const SessionCommand_UsageStatsEvent SessionCommand::MUSHROOM_SELECTION_DIALOG_OPEN_EVENT;
const SessionCommand_UsageStatsEvent SessionCommand::SOFTWARE_KEYBOARD_HEIGHT_DIP_LANDSCAPE;
const SessionCommand_UsageStatsEvent SessionCommand::SOFTWARE_KEYBOARD_HEIGHT_DIP_PORTRAIT;
const SessionCommand_UsageStatsEvent SessionCommand::SOFTWARE_KEYBOARD_LAYOUT_ADJUSTMENT_ENABLED_LANDSCAPE;
const SessionCommand_UsageStatsEvent SessionCommand::SOFTWARE_KEYBOARD_LAYOUT_ADJUSTMENT_ENABLED_PORTRAIT;
const SessionCommand_UsageStatsEvent SessionCommand::SOFTWARE_KEYBOARD_LAYOUT_ENGLISH_LANDSCAPE;
const SessionCommand_UsageStatsEvent SessionCommand::SOFTWARE_KEYBOARD_LAYOUT_ENGLISH_PORTRAIT;
const SessionCommand_UsageStatsEvent SessionCommand::UsageStatsEvent_MIN;
const SessionCommand_UsageStatsEvent SessionCommand::UsageStatsEvent_MAX;
const int SessionCommand::UsageStatsEvent_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SessionCommand::kTypeFieldNumber;
const int SessionCommand::kIdFieldNumber;
const int SessionCommand::kCompositionModeFieldNumber;
const int SessionCommand::kTextFieldNumber;
const int SessionCommand::kCursorPositionFieldNumber;
const int SessionCommand::kUsageStatsEventFieldNumber;
const int SessionCommand::kUsageStatsEventIntValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SessionCommand::SessionCommand()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mozc.commands.SessionCommand)
}

void SessionCommand::InitAsDefaultInstance() {
}

SessionCommand::SessionCommand(const SessionCommand& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mozc.commands.SessionCommand)
}

void SessionCommand::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 1;
  id_ = 0;
  composition_mode_ = 0;
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cursor_position_ = 0u;
  usage_stats_event_ = 1;
  usage_stats_event_int_value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SessionCommand::~SessionCommand() {
  // @@protoc_insertion_point(destructor:mozc.commands.SessionCommand)
  SharedDtor();
}

void SessionCommand::SharedDtor() {
  text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void SessionCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SessionCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SessionCommand_descriptor_;
}

const SessionCommand& SessionCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2fcommands_2eproto();
  return *default_instance_;
}

SessionCommand* SessionCommand::default_instance_ = NULL;

SessionCommand* SessionCommand::New(::google::protobuf::Arena* arena) const {
  SessionCommand* n = new SessionCommand;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SessionCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:mozc.commands.SessionCommand)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(SessionCommand, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SessionCommand*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 127u) {
    ZR_(composition_mode_, cursor_position_);
    type_ = 1;
    id_ = 0;
    if (has_text()) {
      text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    usage_stats_event_ = 1;
    usage_stats_event_int_value_ = 0;
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SessionCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mozc.commands.SessionCommand)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .mozc.commands.SessionCommand.CommandType type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mozc::commands::SessionCommand_CommandType_IsValid(value)) {
            set_type(static_cast< ::mozc::commands::SessionCommand_CommandType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional int32 id = 2;
      case 2: {
        if (tag == 16) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_composition_mode;
        break;
      }

      // optional .mozc.commands.CompositionMode composition_mode = 3;
      case 3: {
        if (tag == 24) {
         parse_composition_mode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mozc::commands::CompositionMode_IsValid(value)) {
            set_composition_mode(static_cast< ::mozc::commands::CompositionMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_text;
        break;
      }

      // optional string text = 4;
      case 4: {
        if (tag == 34) {
         parse_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mozc.commands.SessionCommand.text");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_cursor_position;
        break;
      }

      // optional uint32 cursor_position = 5;
      case 5: {
        if (tag == 40) {
         parse_cursor_position:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cursor_position_)));
          set_has_cursor_position();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_usage_stats_event;
        break;
      }

      // optional .mozc.commands.SessionCommand.UsageStatsEvent usage_stats_event = 7;
      case 7: {
        if (tag == 56) {
         parse_usage_stats_event:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mozc::commands::SessionCommand_UsageStatsEvent_IsValid(value)) {
            set_usage_stats_event(static_cast< ::mozc::commands::SessionCommand_UsageStatsEvent >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_usage_stats_event_int_value;
        break;
      }

      // optional int32 usage_stats_event_int_value = 9;
      case 9: {
        if (tag == 72) {
         parse_usage_stats_event_int_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &usage_stats_event_int_value_)));
          set_has_usage_stats_event_int_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mozc.commands.SessionCommand)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mozc.commands.SessionCommand)
  return false;
#undef DO_
}

void SessionCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mozc.commands.SessionCommand)
  // required .mozc.commands.SessionCommand.CommandType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  // optional .mozc.commands.CompositionMode composition_mode = 3;
  if (has_composition_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->composition_mode(), output);
  }

  // optional string text = 4;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mozc.commands.SessionCommand.text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->text(), output);
  }

  // optional uint32 cursor_position = 5;
  if (has_cursor_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->cursor_position(), output);
  }

  // optional .mozc.commands.SessionCommand.UsageStatsEvent usage_stats_event = 7;
  if (has_usage_stats_event()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->usage_stats_event(), output);
  }

  // optional int32 usage_stats_event_int_value = 9;
  if (has_usage_stats_event_int_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->usage_stats_event_int_value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mozc.commands.SessionCommand)
}

::google::protobuf::uint8* SessionCommand::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mozc.commands.SessionCommand)
  // required .mozc.commands.SessionCommand.CommandType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  // optional .mozc.commands.CompositionMode composition_mode = 3;
  if (has_composition_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->composition_mode(), target);
  }

  // optional string text = 4;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mozc.commands.SessionCommand.text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->text(), target);
  }

  // optional uint32 cursor_position = 5;
  if (has_cursor_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->cursor_position(), target);
  }

  // optional .mozc.commands.SessionCommand.UsageStatsEvent usage_stats_event = 7;
  if (has_usage_stats_event()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->usage_stats_event(), target);
  }

  // optional int32 usage_stats_event_int_value = 9;
  if (has_usage_stats_event_int_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->usage_stats_event_int_value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mozc.commands.SessionCommand)
  return target;
}

int SessionCommand::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:mozc.commands.SessionCommand)
  int total_size = 0;

  // required .mozc.commands.SessionCommand.CommandType type = 1;
  if (has_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }
  if (_has_bits_[1 / 32] & 126u) {
    // optional int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional .mozc.commands.CompositionMode composition_mode = 3;
    if (has_composition_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->composition_mode());
    }

    // optional string text = 4;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }

    // optional uint32 cursor_position = 5;
    if (has_cursor_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cursor_position());
    }

    // optional .mozc.commands.SessionCommand.UsageStatsEvent usage_stats_event = 7;
    if (has_usage_stats_event()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->usage_stats_event());
    }

    // optional int32 usage_stats_event_int_value = 9;
    if (has_usage_stats_event_int_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->usage_stats_event_int_value());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SessionCommand::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mozc.commands.SessionCommand)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SessionCommand* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SessionCommand>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mozc.commands.SessionCommand)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mozc.commands.SessionCommand)
    MergeFrom(*source);
  }
}

void SessionCommand::MergeFrom(const SessionCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mozc.commands.SessionCommand)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_composition_mode()) {
      set_composition_mode(from.composition_mode());
    }
    if (from.has_text()) {
      set_has_text();
      text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
    }
    if (from.has_cursor_position()) {
      set_cursor_position(from.cursor_position());
    }
    if (from.has_usage_stats_event()) {
      set_usage_stats_event(from.usage_stats_event());
    }
    if (from.has_usage_stats_event_int_value()) {
      set_usage_stats_event_int_value(from.usage_stats_event_int_value());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void SessionCommand::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mozc.commands.SessionCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SessionCommand::CopyFrom(const SessionCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mozc.commands.SessionCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionCommand::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SessionCommand::Swap(SessionCommand* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SessionCommand::InternalSwap(SessionCommand* other) {
  std::swap(type_, other->type_);
  std::swap(id_, other->id_);
  std::swap(composition_mode_, other->composition_mode_);
  text_.Swap(&other->text_);
  std::swap(cursor_position_, other->cursor_position_);
  std::swap(usage_stats_event_, other->usage_stats_event_);
  std::swap(usage_stats_event_int_value_, other->usage_stats_event_int_value_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SessionCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SessionCommand_descriptor_;
  metadata.reflection = SessionCommand_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SessionCommand

// required .mozc.commands.SessionCommand.CommandType type = 1;
bool SessionCommand::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SessionCommand::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
void SessionCommand::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void SessionCommand::clear_type() {
  type_ = 1;
  clear_has_type();
}
 ::mozc::commands::SessionCommand_CommandType SessionCommand::type() const {
  // @@protoc_insertion_point(field_get:mozc.commands.SessionCommand.type)
  return static_cast< ::mozc::commands::SessionCommand_CommandType >(type_);
}
 void SessionCommand::set_type(::mozc::commands::SessionCommand_CommandType value) {
  assert(::mozc::commands::SessionCommand_CommandType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:mozc.commands.SessionCommand.type)
}

// optional int32 id = 2;
bool SessionCommand::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SessionCommand::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
void SessionCommand::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void SessionCommand::clear_id() {
  id_ = 0;
  clear_has_id();
}
 ::google::protobuf::int32 SessionCommand::id() const {
  // @@protoc_insertion_point(field_get:mozc.commands.SessionCommand.id)
  return id_;
}
 void SessionCommand::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:mozc.commands.SessionCommand.id)
}

// optional .mozc.commands.CompositionMode composition_mode = 3;
bool SessionCommand::has_composition_mode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SessionCommand::set_has_composition_mode() {
  _has_bits_[0] |= 0x00000004u;
}
void SessionCommand::clear_has_composition_mode() {
  _has_bits_[0] &= ~0x00000004u;
}
void SessionCommand::clear_composition_mode() {
  composition_mode_ = 0;
  clear_has_composition_mode();
}
 ::mozc::commands::CompositionMode SessionCommand::composition_mode() const {
  // @@protoc_insertion_point(field_get:mozc.commands.SessionCommand.composition_mode)
  return static_cast< ::mozc::commands::CompositionMode >(composition_mode_);
}
 void SessionCommand::set_composition_mode(::mozc::commands::CompositionMode value) {
  assert(::mozc::commands::CompositionMode_IsValid(value));
  set_has_composition_mode();
  composition_mode_ = value;
  // @@protoc_insertion_point(field_set:mozc.commands.SessionCommand.composition_mode)
}

// optional string text = 4;
bool SessionCommand::has_text() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SessionCommand::set_has_text() {
  _has_bits_[0] |= 0x00000008u;
}
void SessionCommand::clear_has_text() {
  _has_bits_[0] &= ~0x00000008u;
}
void SessionCommand::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_text();
}
 const ::std::string& SessionCommand::text() const {
  // @@protoc_insertion_point(field_get:mozc.commands.SessionCommand.text)
  return text_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SessionCommand::set_text(const ::std::string& value) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mozc.commands.SessionCommand.text)
}
 void SessionCommand::set_text(const char* value) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mozc.commands.SessionCommand.text)
}
 void SessionCommand::set_text(const char* value, size_t size) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mozc.commands.SessionCommand.text)
}
 ::std::string* SessionCommand::mutable_text() {
  set_has_text();
  // @@protoc_insertion_point(field_mutable:mozc.commands.SessionCommand.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SessionCommand::release_text() {
  // @@protoc_insertion_point(field_release:mozc.commands.SessionCommand.text)
  clear_has_text();
  return text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SessionCommand::set_allocated_text(::std::string* text) {
  if (text != NULL) {
    set_has_text();
  } else {
    clear_has_text();
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:mozc.commands.SessionCommand.text)
}

// optional uint32 cursor_position = 5;
bool SessionCommand::has_cursor_position() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void SessionCommand::set_has_cursor_position() {
  _has_bits_[0] |= 0x00000010u;
}
void SessionCommand::clear_has_cursor_position() {
  _has_bits_[0] &= ~0x00000010u;
}
void SessionCommand::clear_cursor_position() {
  cursor_position_ = 0u;
  clear_has_cursor_position();
}
 ::google::protobuf::uint32 SessionCommand::cursor_position() const {
  // @@protoc_insertion_point(field_get:mozc.commands.SessionCommand.cursor_position)
  return cursor_position_;
}
 void SessionCommand::set_cursor_position(::google::protobuf::uint32 value) {
  set_has_cursor_position();
  cursor_position_ = value;
  // @@protoc_insertion_point(field_set:mozc.commands.SessionCommand.cursor_position)
}

// optional .mozc.commands.SessionCommand.UsageStatsEvent usage_stats_event = 7;
bool SessionCommand::has_usage_stats_event() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void SessionCommand::set_has_usage_stats_event() {
  _has_bits_[0] |= 0x00000020u;
}
void SessionCommand::clear_has_usage_stats_event() {
  _has_bits_[0] &= ~0x00000020u;
}
void SessionCommand::clear_usage_stats_event() {
  usage_stats_event_ = 1;
  clear_has_usage_stats_event();
}
 ::mozc::commands::SessionCommand_UsageStatsEvent SessionCommand::usage_stats_event() const {
  // @@protoc_insertion_point(field_get:mozc.commands.SessionCommand.usage_stats_event)
  return static_cast< ::mozc::commands::SessionCommand_UsageStatsEvent >(usage_stats_event_);
}
 void SessionCommand::set_usage_stats_event(::mozc::commands::SessionCommand_UsageStatsEvent value) {
  assert(::mozc::commands::SessionCommand_UsageStatsEvent_IsValid(value));
  set_has_usage_stats_event();
  usage_stats_event_ = value;
  // @@protoc_insertion_point(field_set:mozc.commands.SessionCommand.usage_stats_event)
}

// optional int32 usage_stats_event_int_value = 9;
bool SessionCommand::has_usage_stats_event_int_value() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void SessionCommand::set_has_usage_stats_event_int_value() {
  _has_bits_[0] |= 0x00000040u;
}
void SessionCommand::clear_has_usage_stats_event_int_value() {
  _has_bits_[0] &= ~0x00000040u;
}
void SessionCommand::clear_usage_stats_event_int_value() {
  usage_stats_event_int_value_ = 0;
  clear_has_usage_stats_event_int_value();
}
 ::google::protobuf::int32 SessionCommand::usage_stats_event_int_value() const {
  // @@protoc_insertion_point(field_get:mozc.commands.SessionCommand.usage_stats_event_int_value)
  return usage_stats_event_int_value_;
}
 void SessionCommand::set_usage_stats_event_int_value(::google::protobuf::int32 value) {
  set_has_usage_stats_event_int_value();
  usage_stats_event_int_value_ = value;
  // @@protoc_insertion_point(field_set:mozc.commands.SessionCommand.usage_stats_event_int_value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* Context_InputFieldType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Context_InputFieldType_descriptor_;
}
bool Context_InputFieldType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Context_InputFieldType Context::NORMAL;
const Context_InputFieldType Context::PASSWORD;
const Context_InputFieldType Context::TEL;
const Context_InputFieldType Context::NUMBER;
const Context_InputFieldType Context::InputFieldType_MIN;
const Context_InputFieldType Context::InputFieldType_MAX;
const int Context::InputFieldType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Context::kPrecedingTextFieldNumber;
const int Context::kFollowingTextFieldNumber;
const int Context::kSuppressSuggestionFieldNumber;
const int Context::kInputFieldTypeFieldNumber;
const int Context::kRevisionFieldNumber;
const int Context::kExperimentalFeaturesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Context::Context()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mozc.commands.Context)
}

void Context::InitAsDefaultInstance() {
}

Context::Context(const Context& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mozc.commands.Context)
}

void Context::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  preceding_text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  following_text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  suppress_suggestion_ = false;
  input_field_type_ = 1;
  revision_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Context::~Context() {
  // @@protoc_insertion_point(destructor:mozc.commands.Context)
  SharedDtor();
}

void Context::SharedDtor() {
  preceding_text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  following_text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Context::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Context::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Context_descriptor_;
}

const Context& Context::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2fcommands_2eproto();
  return *default_instance_;
}

Context* Context::default_instance_ = NULL;

Context* Context::New(::google::protobuf::Arena* arena) const {
  Context* n = new Context;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Context::Clear() {
// @@protoc_insertion_point(message_clear_start:mozc.commands.Context)
  if (_has_bits_[0 / 32] & 31u) {
    if (has_preceding_text()) {
      preceding_text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_following_text()) {
      following_text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    suppress_suggestion_ = false;
    input_field_type_ = 1;
    revision_ = 0;
  }
  experimental_features_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Context::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mozc.commands.Context)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string preceding_text = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_preceding_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->preceding_text().data(), this->preceding_text().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mozc.commands.Context.preceding_text");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_following_text;
        break;
      }

      // optional string following_text = 2;
      case 2: {
        if (tag == 18) {
         parse_following_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_following_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->following_text().data(), this->following_text().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mozc.commands.Context.following_text");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_suppress_suggestion;
        break;
      }

      // optional bool suppress_suggestion = 3 [default = false];
      case 3: {
        if (tag == 24) {
         parse_suppress_suggestion:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &suppress_suggestion_)));
          set_has_suppress_suggestion();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_input_field_type;
        break;
      }

      // optional .mozc.commands.Context.InputFieldType input_field_type = 4;
      case 4: {
        if (tag == 32) {
         parse_input_field_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mozc::commands::Context_InputFieldType_IsValid(value)) {
            set_input_field_type(static_cast< ::mozc::commands::Context_InputFieldType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_revision;
        break;
      }

      // optional int32 revision = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_revision:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &revision_)));
          set_has_revision();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(802)) goto parse_experimental_features;
        break;
      }

      // repeated string experimental_features = 100;
      case 100: {
        if (tag == 802) {
         parse_experimental_features:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_experimental_features()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->experimental_features(this->experimental_features_size() - 1).data(),
            this->experimental_features(this->experimental_features_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mozc.commands.Context.experimental_features");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(802)) goto parse_experimental_features;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mozc.commands.Context)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mozc.commands.Context)
  return false;
#undef DO_
}

void Context::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mozc.commands.Context)
  // optional string preceding_text = 1;
  if (has_preceding_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->preceding_text().data(), this->preceding_text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mozc.commands.Context.preceding_text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->preceding_text(), output);
  }

  // optional string following_text = 2;
  if (has_following_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->following_text().data(), this->following_text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mozc.commands.Context.following_text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->following_text(), output);
  }

  // optional bool suppress_suggestion = 3 [default = false];
  if (has_suppress_suggestion()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->suppress_suggestion(), output);
  }

  // optional .mozc.commands.Context.InputFieldType input_field_type = 4;
  if (has_input_field_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->input_field_type(), output);
  }

  // optional int32 revision = 5 [default = 0];
  if (has_revision()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->revision(), output);
  }

  // repeated string experimental_features = 100;
  for (int i = 0; i < this->experimental_features_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->experimental_features(i).data(), this->experimental_features(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mozc.commands.Context.experimental_features");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      100, this->experimental_features(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mozc.commands.Context)
}

::google::protobuf::uint8* Context::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mozc.commands.Context)
  // optional string preceding_text = 1;
  if (has_preceding_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->preceding_text().data(), this->preceding_text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mozc.commands.Context.preceding_text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->preceding_text(), target);
  }

  // optional string following_text = 2;
  if (has_following_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->following_text().data(), this->following_text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mozc.commands.Context.following_text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->following_text(), target);
  }

  // optional bool suppress_suggestion = 3 [default = false];
  if (has_suppress_suggestion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->suppress_suggestion(), target);
  }

  // optional .mozc.commands.Context.InputFieldType input_field_type = 4;
  if (has_input_field_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->input_field_type(), target);
  }

  // optional int32 revision = 5 [default = 0];
  if (has_revision()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->revision(), target);
  }

  // repeated string experimental_features = 100;
  for (int i = 0; i < this->experimental_features_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->experimental_features(i).data(), this->experimental_features(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mozc.commands.Context.experimental_features");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(100, this->experimental_features(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mozc.commands.Context)
  return target;
}

int Context::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:mozc.commands.Context)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 31u) {
    // optional string preceding_text = 1;
    if (has_preceding_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->preceding_text());
    }

    // optional string following_text = 2;
    if (has_following_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->following_text());
    }

    // optional bool suppress_suggestion = 3 [default = false];
    if (has_suppress_suggestion()) {
      total_size += 1 + 1;
    }

    // optional .mozc.commands.Context.InputFieldType input_field_type = 4;
    if (has_input_field_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->input_field_type());
    }

    // optional int32 revision = 5 [default = 0];
    if (has_revision()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->revision());
    }

  }
  // repeated string experimental_features = 100;
  total_size += 2 * this->experimental_features_size();
  for (int i = 0; i < this->experimental_features_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->experimental_features(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Context::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mozc.commands.Context)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Context* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Context>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mozc.commands.Context)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mozc.commands.Context)
    MergeFrom(*source);
  }
}

void Context::MergeFrom(const Context& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mozc.commands.Context)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  experimental_features_.MergeFrom(from.experimental_features_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_preceding_text()) {
      set_has_preceding_text();
      preceding_text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.preceding_text_);
    }
    if (from.has_following_text()) {
      set_has_following_text();
      following_text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.following_text_);
    }
    if (from.has_suppress_suggestion()) {
      set_suppress_suggestion(from.suppress_suggestion());
    }
    if (from.has_input_field_type()) {
      set_input_field_type(from.input_field_type());
    }
    if (from.has_revision()) {
      set_revision(from.revision());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Context::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mozc.commands.Context)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Context::CopyFrom(const Context& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mozc.commands.Context)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Context::IsInitialized() const {

  return true;
}

void Context::Swap(Context* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Context::InternalSwap(Context* other) {
  preceding_text_.Swap(&other->preceding_text_);
  following_text_.Swap(&other->following_text_);
  std::swap(suppress_suggestion_, other->suppress_suggestion_);
  std::swap(input_field_type_, other->input_field_type_);
  std::swap(revision_, other->revision_);
  experimental_features_.UnsafeArenaSwap(&other->experimental_features_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Context::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Context_descriptor_;
  metadata.reflection = Context_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Context

// optional string preceding_text = 1;
bool Context::has_preceding_text() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Context::set_has_preceding_text() {
  _has_bits_[0] |= 0x00000001u;
}
void Context::clear_has_preceding_text() {
  _has_bits_[0] &= ~0x00000001u;
}
void Context::clear_preceding_text() {
  preceding_text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_preceding_text();
}
 const ::std::string& Context::preceding_text() const {
  // @@protoc_insertion_point(field_get:mozc.commands.Context.preceding_text)
  return preceding_text_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Context::set_preceding_text(const ::std::string& value) {
  set_has_preceding_text();
  preceding_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mozc.commands.Context.preceding_text)
}
 void Context::set_preceding_text(const char* value) {
  set_has_preceding_text();
  preceding_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mozc.commands.Context.preceding_text)
}
 void Context::set_preceding_text(const char* value, size_t size) {
  set_has_preceding_text();
  preceding_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mozc.commands.Context.preceding_text)
}
 ::std::string* Context::mutable_preceding_text() {
  set_has_preceding_text();
  // @@protoc_insertion_point(field_mutable:mozc.commands.Context.preceding_text)
  return preceding_text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Context::release_preceding_text() {
  // @@protoc_insertion_point(field_release:mozc.commands.Context.preceding_text)
  clear_has_preceding_text();
  return preceding_text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Context::set_allocated_preceding_text(::std::string* preceding_text) {
  if (preceding_text != NULL) {
    set_has_preceding_text();
  } else {
    clear_has_preceding_text();
  }
  preceding_text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), preceding_text);
  // @@protoc_insertion_point(field_set_allocated:mozc.commands.Context.preceding_text)
}

// optional string following_text = 2;
bool Context::has_following_text() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Context::set_has_following_text() {
  _has_bits_[0] |= 0x00000002u;
}
void Context::clear_has_following_text() {
  _has_bits_[0] &= ~0x00000002u;
}
void Context::clear_following_text() {
  following_text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_following_text();
}
 const ::std::string& Context::following_text() const {
  // @@protoc_insertion_point(field_get:mozc.commands.Context.following_text)
  return following_text_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Context::set_following_text(const ::std::string& value) {
  set_has_following_text();
  following_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mozc.commands.Context.following_text)
}
 void Context::set_following_text(const char* value) {
  set_has_following_text();
  following_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mozc.commands.Context.following_text)
}
 void Context::set_following_text(const char* value, size_t size) {
  set_has_following_text();
  following_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mozc.commands.Context.following_text)
}
 ::std::string* Context::mutable_following_text() {
  set_has_following_text();
  // @@protoc_insertion_point(field_mutable:mozc.commands.Context.following_text)
  return following_text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Context::release_following_text() {
  // @@protoc_insertion_point(field_release:mozc.commands.Context.following_text)
  clear_has_following_text();
  return following_text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Context::set_allocated_following_text(::std::string* following_text) {
  if (following_text != NULL) {
    set_has_following_text();
  } else {
    clear_has_following_text();
  }
  following_text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), following_text);
  // @@protoc_insertion_point(field_set_allocated:mozc.commands.Context.following_text)
}

// optional bool suppress_suggestion = 3 [default = false];
bool Context::has_suppress_suggestion() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Context::set_has_suppress_suggestion() {
  _has_bits_[0] |= 0x00000004u;
}
void Context::clear_has_suppress_suggestion() {
  _has_bits_[0] &= ~0x00000004u;
}
void Context::clear_suppress_suggestion() {
  suppress_suggestion_ = false;
  clear_has_suppress_suggestion();
}
 bool Context::suppress_suggestion() const {
  // @@protoc_insertion_point(field_get:mozc.commands.Context.suppress_suggestion)
  return suppress_suggestion_;
}
 void Context::set_suppress_suggestion(bool value) {
  set_has_suppress_suggestion();
  suppress_suggestion_ = value;
  // @@protoc_insertion_point(field_set:mozc.commands.Context.suppress_suggestion)
}

// optional .mozc.commands.Context.InputFieldType input_field_type = 4;
bool Context::has_input_field_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Context::set_has_input_field_type() {
  _has_bits_[0] |= 0x00000008u;
}
void Context::clear_has_input_field_type() {
  _has_bits_[0] &= ~0x00000008u;
}
void Context::clear_input_field_type() {
  input_field_type_ = 1;
  clear_has_input_field_type();
}
 ::mozc::commands::Context_InputFieldType Context::input_field_type() const {
  // @@protoc_insertion_point(field_get:mozc.commands.Context.input_field_type)
  return static_cast< ::mozc::commands::Context_InputFieldType >(input_field_type_);
}
 void Context::set_input_field_type(::mozc::commands::Context_InputFieldType value) {
  assert(::mozc::commands::Context_InputFieldType_IsValid(value));
  set_has_input_field_type();
  input_field_type_ = value;
  // @@protoc_insertion_point(field_set:mozc.commands.Context.input_field_type)
}

// optional int32 revision = 5 [default = 0];
bool Context::has_revision() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Context::set_has_revision() {
  _has_bits_[0] |= 0x00000010u;
}
void Context::clear_has_revision() {
  _has_bits_[0] &= ~0x00000010u;
}
void Context::clear_revision() {
  revision_ = 0;
  clear_has_revision();
}
 ::google::protobuf::int32 Context::revision() const {
  // @@protoc_insertion_point(field_get:mozc.commands.Context.revision)
  return revision_;
}
 void Context::set_revision(::google::protobuf::int32 value) {
  set_has_revision();
  revision_ = value;
  // @@protoc_insertion_point(field_set:mozc.commands.Context.revision)
}

// repeated string experimental_features = 100;
int Context::experimental_features_size() const {
  return experimental_features_.size();
}
void Context::clear_experimental_features() {
  experimental_features_.Clear();
}
 const ::std::string& Context::experimental_features(int index) const {
  // @@protoc_insertion_point(field_get:mozc.commands.Context.experimental_features)
  return experimental_features_.Get(index);
}
 ::std::string* Context::mutable_experimental_features(int index) {
  // @@protoc_insertion_point(field_mutable:mozc.commands.Context.experimental_features)
  return experimental_features_.Mutable(index);
}
 void Context::set_experimental_features(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:mozc.commands.Context.experimental_features)
  experimental_features_.Mutable(index)->assign(value);
}
 void Context::set_experimental_features(int index, const char* value) {
  experimental_features_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:mozc.commands.Context.experimental_features)
}
 void Context::set_experimental_features(int index, const char* value, size_t size) {
  experimental_features_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mozc.commands.Context.experimental_features)
}
 ::std::string* Context::add_experimental_features() {
  // @@protoc_insertion_point(field_add_mutable:mozc.commands.Context.experimental_features)
  return experimental_features_.Add();
}
 void Context::add_experimental_features(const ::std::string& value) {
  experimental_features_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:mozc.commands.Context.experimental_features)
}
 void Context::add_experimental_features(const char* value) {
  experimental_features_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:mozc.commands.Context.experimental_features)
}
 void Context::add_experimental_features(const char* value, size_t size) {
  experimental_features_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:mozc.commands.Context.experimental_features)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
Context::experimental_features() const {
  // @@protoc_insertion_point(field_list:mozc.commands.Context.experimental_features)
  return experimental_features_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
Context::mutable_experimental_features() {
  // @@protoc_insertion_point(field_mutable_list:mozc.commands.Context.experimental_features)
  return &experimental_features_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* Capability_TextDeletionCapabilityType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Capability_TextDeletionCapabilityType_descriptor_;
}
bool Capability_TextDeletionCapabilityType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Capability_TextDeletionCapabilityType Capability::NO_TEXT_DELETION_CAPABILITY;
const Capability_TextDeletionCapabilityType Capability::DELETE_PRECEDING_TEXT;
const Capability_TextDeletionCapabilityType Capability::TextDeletionCapabilityType_MIN;
const Capability_TextDeletionCapabilityType Capability::TextDeletionCapabilityType_MAX;
const int Capability::TextDeletionCapabilityType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Capability::kTextDeletionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Capability::Capability()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mozc.commands.Capability)
}

void Capability::InitAsDefaultInstance() {
}

Capability::Capability(const Capability& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mozc.commands.Capability)
}

void Capability::SharedCtor() {
  _cached_size_ = 0;
  text_deletion_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Capability::~Capability() {
  // @@protoc_insertion_point(destructor:mozc.commands.Capability)
  SharedDtor();
}

void Capability::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Capability::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Capability::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Capability_descriptor_;
}

const Capability& Capability::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2fcommands_2eproto();
  return *default_instance_;
}

Capability* Capability::default_instance_ = NULL;

Capability* Capability::New(::google::protobuf::Arena* arena) const {
  Capability* n = new Capability;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Capability::Clear() {
// @@protoc_insertion_point(message_clear_start:mozc.commands.Capability)
  text_deletion_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Capability::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mozc.commands.Capability)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .mozc.commands.Capability.TextDeletionCapabilityType text_deletion = 1 [default = NO_TEXT_DELETION_CAPABILITY];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mozc::commands::Capability_TextDeletionCapabilityType_IsValid(value)) {
            set_text_deletion(static_cast< ::mozc::commands::Capability_TextDeletionCapabilityType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mozc.commands.Capability)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mozc.commands.Capability)
  return false;
#undef DO_
}

void Capability::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mozc.commands.Capability)
  // optional .mozc.commands.Capability.TextDeletionCapabilityType text_deletion = 1 [default = NO_TEXT_DELETION_CAPABILITY];
  if (has_text_deletion()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->text_deletion(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mozc.commands.Capability)
}

::google::protobuf::uint8* Capability::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mozc.commands.Capability)
  // optional .mozc.commands.Capability.TextDeletionCapabilityType text_deletion = 1 [default = NO_TEXT_DELETION_CAPABILITY];
  if (has_text_deletion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->text_deletion(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mozc.commands.Capability)
  return target;
}

int Capability::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:mozc.commands.Capability)
  int total_size = 0;

  // optional .mozc.commands.Capability.TextDeletionCapabilityType text_deletion = 1 [default = NO_TEXT_DELETION_CAPABILITY];
  if (has_text_deletion()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->text_deletion());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Capability::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mozc.commands.Capability)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Capability* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Capability>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mozc.commands.Capability)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mozc.commands.Capability)
    MergeFrom(*source);
  }
}

void Capability::MergeFrom(const Capability& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mozc.commands.Capability)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_text_deletion()) {
      set_text_deletion(from.text_deletion());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Capability::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mozc.commands.Capability)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Capability::CopyFrom(const Capability& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mozc.commands.Capability)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Capability::IsInitialized() const {

  return true;
}

void Capability::Swap(Capability* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Capability::InternalSwap(Capability* other) {
  std::swap(text_deletion_, other->text_deletion_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Capability::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Capability_descriptor_;
  metadata.reflection = Capability_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Capability

// optional .mozc.commands.Capability.TextDeletionCapabilityType text_deletion = 1 [default = NO_TEXT_DELETION_CAPABILITY];
bool Capability::has_text_deletion() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Capability::set_has_text_deletion() {
  _has_bits_[0] |= 0x00000001u;
}
void Capability::clear_has_text_deletion() {
  _has_bits_[0] &= ~0x00000001u;
}
void Capability::clear_text_deletion() {
  text_deletion_ = 0;
  clear_has_text_deletion();
}
 ::mozc::commands::Capability_TextDeletionCapabilityType Capability::text_deletion() const {
  // @@protoc_insertion_point(field_get:mozc.commands.Capability.text_deletion)
  return static_cast< ::mozc::commands::Capability_TextDeletionCapabilityType >(text_deletion_);
}
 void Capability::set_text_deletion(::mozc::commands::Capability_TextDeletionCapabilityType value) {
  assert(::mozc::commands::Capability_TextDeletionCapabilityType_IsValid(value));
  set_has_text_deletion();
  text_deletion_ = value;
  // @@protoc_insertion_point(field_set:mozc.commands.Capability.text_deletion)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* Request_SpecialRomanjiTable_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_SpecialRomanjiTable_descriptor_;
}
bool Request_SpecialRomanjiTable_IsValid(int value) {
  switch(value) {
    case 0:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 20:
    case 21:
    case 22:
    case 30:
    case 31:
    case 32:
    case 40:
    case 41:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Request_SpecialRomanjiTable Request::DEFAULT_TABLE;
const Request_SpecialRomanjiTable Request::TWELVE_KEYS_TO_HIRAGANA;
const Request_SpecialRomanjiTable Request::TWELVE_KEYS_TO_HALFWIDTHASCII;
const Request_SpecialRomanjiTable Request::FLICK_TO_HIRAGANA;
const Request_SpecialRomanjiTable Request::FLICK_TO_HALFWIDTHASCII;
const Request_SpecialRomanjiTable Request::TOGGLE_FLICK_TO_HIRAGANA;
const Request_SpecialRomanjiTable Request::TOGGLE_FLICK_TO_HALFWIDTHASCII;
const Request_SpecialRomanjiTable Request::QWERTY_MOBILE_TO_HIRAGANA;
const Request_SpecialRomanjiTable Request::QWERTY_MOBILE_TO_HALFWIDTHASCII;
const Request_SpecialRomanjiTable Request::GODAN_TO_HIRAGANA;
const Request_SpecialRomanjiTable Request::GODAN_TO_HALFWIDTHASCII;
const Request_SpecialRomanjiTable Request::NOTOUCH_TO_HIRAGANA;
const Request_SpecialRomanjiTable Request::NOTOUCH_TO_HALFWIDTHASCII;
const Request_SpecialRomanjiTable Request::OBSOLETE_TWELVE_KEYS_TO_NUMBER;
const Request_SpecialRomanjiTable Request::OBSOLETE_FLICK_TO_NUMBER;
const Request_SpecialRomanjiTable Request::OBSOLETE_GODAN_TO_NUMBER;
const Request_SpecialRomanjiTable Request::OBSOLETE_QWERTY_MOBILE_TO_HIRAGANA_NUMBER;
const Request_SpecialRomanjiTable Request::OBSOLETE_TOGGLE_FLICK_TO_NUMBER;
const Request_SpecialRomanjiTable Request::SpecialRomanjiTable_MIN;
const Request_SpecialRomanjiTable Request::SpecialRomanjiTable_MAX;
const int Request::SpecialRomanjiTable_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Request_SpaceOnAlphanumeric_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_SpaceOnAlphanumeric_descriptor_;
}
bool Request_SpaceOnAlphanumeric_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Request_SpaceOnAlphanumeric Request::SPACE_OR_CONVERT_KEEPING_COMPOSITION;
const Request_SpaceOnAlphanumeric Request::SPACE_OR_CONVERT_COMMITING_COMPOSITION;
const Request_SpaceOnAlphanumeric Request::COMMIT;
const Request_SpaceOnAlphanumeric Request::SpaceOnAlphanumeric_MIN;
const Request_SpaceOnAlphanumeric Request::SpaceOnAlphanumeric_MAX;
const int Request::SpaceOnAlphanumeric_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Request_EmojiCarrierType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_EmojiCarrierType_descriptor_;
}
bool Request_EmojiCarrierType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 4:
    case 8:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Request_EmojiCarrierType Request::UNICODE_EMOJI;
const Request_EmojiCarrierType Request::DOCOMO_EMOJI;
const Request_EmojiCarrierType Request::SOFTBANK_EMOJI;
const Request_EmojiCarrierType Request::KDDI_EMOJI;
const Request_EmojiCarrierType Request::EmojiCarrierType_MIN;
const Request_EmojiCarrierType Request::EmojiCarrierType_MAX;
const int Request::EmojiCarrierType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Request_RewriterCapability_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_RewriterCapability_descriptor_;
}
bool Request_RewriterCapability_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 7:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Request_RewriterCapability Request::NOT_AVAILABLE;
const Request_RewriterCapability Request::CONVERSION;
const Request_RewriterCapability Request::PREDICTION;
const Request_RewriterCapability Request::SUGGESTION;
const Request_RewriterCapability Request::ALL;
const Request_RewriterCapability Request::RewriterCapability_MIN;
const Request_RewriterCapability Request::RewriterCapability_MAX;
const int Request::RewriterCapability_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Request_CrossingEdgeBehavior_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_CrossingEdgeBehavior_descriptor_;
}
bool Request_CrossingEdgeBehavior_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Request_CrossingEdgeBehavior Request::DO_NOTHING;
const Request_CrossingEdgeBehavior Request::COMMIT_WITHOUT_CONSUMING;
const Request_CrossingEdgeBehavior Request::CrossingEdgeBehavior_MIN;
const Request_CrossingEdgeBehavior Request::CrossingEdgeBehavior_MAX;
const int Request::CrossingEdgeBehavior_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Request_LanguageAwareInputBehavior_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_LanguageAwareInputBehavior_descriptor_;
}
bool Request_LanguageAwareInputBehavior_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Request_LanguageAwareInputBehavior Request::DEFAULT_LANGUAGE_AWARE_BEHAVIOR;
const Request_LanguageAwareInputBehavior Request::NO_LANGUAGE_AWARE_INPUT;
const Request_LanguageAwareInputBehavior Request::LANGUAGE_AWARE_SUGGESTION;
const Request_LanguageAwareInputBehavior Request::LanguageAwareInputBehavior_MIN;
const Request_LanguageAwareInputBehavior Request::LanguageAwareInputBehavior_MAX;
const int Request::LanguageAwareInputBehavior_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Request::kZeroQuerySuggestionFieldNumber;
const int Request::kMixedConversionFieldNumber;
const int Request::kSpecialRomanjiTableFieldNumber;
const int Request::kSpaceOnAlphanumericFieldNumber;
const int Request::kKeyboardNameFieldNumber;
const int Request::kUpdateInputModeFromSurroundingTextFieldNumber;
const int Request::kKanaModifierInsensitiveConversionFieldNumber;
const int Request::kAutoPartialSuggestionFieldNumber;
const int Request::kAvailableEmojiCarrierFieldNumber;
const int Request::kEmojiRewriterCapabilityFieldNumber;
const int Request::kCrossingEdgeBehaviorFieldNumber;
const int Request::kLanguageAwareInputFieldNumber;
const int Request::kCandidatePageSizeFieldNumber;
const int Request::kCandidatesSizeLimitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Request::Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mozc.commands.Request)
}

void Request::InitAsDefaultInstance() {
}

Request::Request(const Request& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mozc.commands.Request)
}

void Request::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  zero_query_suggestion_ = false;
  mixed_conversion_ = false;
  special_romanji_table_ = 0;
  space_on_alphanumeric_ = 0;
  keyboard_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  update_input_mode_from_surrounding_text_ = true;
  kana_modifier_insensitive_conversion_ = false;
  auto_partial_suggestion_ = false;
  available_emoji_carrier_ = 1;
  emoji_rewriter_capability_ = 1;
  crossing_edge_behavior_ = 0;
  language_aware_input_ = 0;
  candidate_page_size_ = 9;
  candidates_size_limit_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Request::~Request() {
  // @@protoc_insertion_point(destructor:mozc.commands.Request)
  SharedDtor();
}

void Request::SharedDtor() {
  keyboard_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_descriptor_;
}

const Request& Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2fcommands_2eproto();
  return *default_instance_;
}

Request* Request::default_instance_ = NULL;

Request* Request::New(::google::protobuf::Arena* arena) const {
  Request* n = new Request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Request::Clear() {
// @@protoc_insertion_point(message_clear_start:mozc.commands.Request)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Request, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Request*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(special_romanji_table_, mixed_conversion_);
    ZR_(kana_modifier_insensitive_conversion_, auto_partial_suggestion_);
    if (has_keyboard_name()) {
      keyboard_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    update_input_mode_from_surrounding_text_ = true;
  }
  if (_has_bits_[8 / 32] & 16128u) {
    ZR_(crossing_edge_behavior_, language_aware_input_);
    available_emoji_carrier_ = 1;
    emoji_rewriter_capability_ = 1;
    candidate_page_size_ = 9;
    candidates_size_limit_ = 0;
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mozc.commands.Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool zero_query_suggestion = 1 [default = false];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &zero_query_suggestion_)));
          set_has_zero_query_suggestion();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_mixed_conversion;
        break;
      }

      // optional bool mixed_conversion = 2 [default = false];
      case 2: {
        if (tag == 16) {
         parse_mixed_conversion:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &mixed_conversion_)));
          set_has_mixed_conversion();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_special_romanji_table;
        break;
      }

      // optional .mozc.commands.Request.SpecialRomanjiTable special_romanji_table = 4 [default = DEFAULT_TABLE];
      case 4: {
        if (tag == 32) {
         parse_special_romanji_table:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mozc::commands::Request_SpecialRomanjiTable_IsValid(value)) {
            set_special_romanji_table(static_cast< ::mozc::commands::Request_SpecialRomanjiTable >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_space_on_alphanumeric;
        break;
      }

      // optional .mozc.commands.Request.SpaceOnAlphanumeric space_on_alphanumeric = 6 [default = SPACE_OR_CONVERT_KEEPING_COMPOSITION];
      case 6: {
        if (tag == 48) {
         parse_space_on_alphanumeric:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mozc::commands::Request_SpaceOnAlphanumeric_IsValid(value)) {
            set_space_on_alphanumeric(static_cast< ::mozc::commands::Request_SpaceOnAlphanumeric >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_keyboard_name;
        break;
      }

      // optional string keyboard_name = 7;
      case 7: {
        if (tag == 58) {
         parse_keyboard_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_keyboard_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->keyboard_name().data(), this->keyboard_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mozc.commands.Request.keyboard_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_update_input_mode_from_surrounding_text;
        break;
      }

      // optional bool update_input_mode_from_surrounding_text = 8 [default = true];
      case 8: {
        if (tag == 64) {
         parse_update_input_mode_from_surrounding_text:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &update_input_mode_from_surrounding_text_)));
          set_has_update_input_mode_from_surrounding_text();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_kana_modifier_insensitive_conversion;
        break;
      }

      // optional bool kana_modifier_insensitive_conversion = 9 [default = false];
      case 9: {
        if (tag == 72) {
         parse_kana_modifier_insensitive_conversion:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &kana_modifier_insensitive_conversion_)));
          set_has_kana_modifier_insensitive_conversion();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_auto_partial_suggestion;
        break;
      }

      // optional bool auto_partial_suggestion = 10 [default = false];
      case 10: {
        if (tag == 80) {
         parse_auto_partial_suggestion:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &auto_partial_suggestion_)));
          set_has_auto_partial_suggestion();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_available_emoji_carrier;
        break;
      }

      // optional int32 available_emoji_carrier = 11 [default = 1];
      case 11: {
        if (tag == 88) {
         parse_available_emoji_carrier:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &available_emoji_carrier_)));
          set_has_available_emoji_carrier();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_emoji_rewriter_capability;
        break;
      }

      // optional int32 emoji_rewriter_capability = 12 [default = 1];
      case 12: {
        if (tag == 96) {
         parse_emoji_rewriter_capability:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &emoji_rewriter_capability_)));
          set_has_emoji_rewriter_capability();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_crossing_edge_behavior;
        break;
      }

      // optional .mozc.commands.Request.CrossingEdgeBehavior crossing_edge_behavior = 13 [default = DO_NOTHING];
      case 13: {
        if (tag == 104) {
         parse_crossing_edge_behavior:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mozc::commands::Request_CrossingEdgeBehavior_IsValid(value)) {
            set_crossing_edge_behavior(static_cast< ::mozc::commands::Request_CrossingEdgeBehavior >(value));
          } else {
            mutable_unknown_fields()->AddVarint(13, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_language_aware_input;
        break;
      }

      // optional .mozc.commands.Request.LanguageAwareInputBehavior language_aware_input = 14 [default = DEFAULT_LANGUAGE_AWARE_BEHAVIOR];
      case 14: {
        if (tag == 112) {
         parse_language_aware_input:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mozc::commands::Request_LanguageAwareInputBehavior_IsValid(value)) {
            set_language_aware_input(static_cast< ::mozc::commands::Request_LanguageAwareInputBehavior >(value));
          } else {
            mutable_unknown_fields()->AddVarint(14, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_candidate_page_size;
        break;
      }

      // optional int32 candidate_page_size = 15 [default = 9];
      case 15: {
        if (tag == 120) {
         parse_candidate_page_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &candidate_page_size_)));
          set_has_candidate_page_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_candidates_size_limit;
        break;
      }

      // optional int32 candidates_size_limit = 16;
      case 16: {
        if (tag == 128) {
         parse_candidates_size_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &candidates_size_limit_)));
          set_has_candidates_size_limit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mozc.commands.Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mozc.commands.Request)
  return false;
#undef DO_
}

void Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mozc.commands.Request)
  // optional bool zero_query_suggestion = 1 [default = false];
  if (has_zero_query_suggestion()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->zero_query_suggestion(), output);
  }

  // optional bool mixed_conversion = 2 [default = false];
  if (has_mixed_conversion()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->mixed_conversion(), output);
  }

  // optional .mozc.commands.Request.SpecialRomanjiTable special_romanji_table = 4 [default = DEFAULT_TABLE];
  if (has_special_romanji_table()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->special_romanji_table(), output);
  }

  // optional .mozc.commands.Request.SpaceOnAlphanumeric space_on_alphanumeric = 6 [default = SPACE_OR_CONVERT_KEEPING_COMPOSITION];
  if (has_space_on_alphanumeric()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->space_on_alphanumeric(), output);
  }

  // optional string keyboard_name = 7;
  if (has_keyboard_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->keyboard_name().data(), this->keyboard_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mozc.commands.Request.keyboard_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->keyboard_name(), output);
  }

  // optional bool update_input_mode_from_surrounding_text = 8 [default = true];
  if (has_update_input_mode_from_surrounding_text()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->update_input_mode_from_surrounding_text(), output);
  }

  // optional bool kana_modifier_insensitive_conversion = 9 [default = false];
  if (has_kana_modifier_insensitive_conversion()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->kana_modifier_insensitive_conversion(), output);
  }

  // optional bool auto_partial_suggestion = 10 [default = false];
  if (has_auto_partial_suggestion()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->auto_partial_suggestion(), output);
  }

  // optional int32 available_emoji_carrier = 11 [default = 1];
  if (has_available_emoji_carrier()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->available_emoji_carrier(), output);
  }

  // optional int32 emoji_rewriter_capability = 12 [default = 1];
  if (has_emoji_rewriter_capability()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->emoji_rewriter_capability(), output);
  }

  // optional .mozc.commands.Request.CrossingEdgeBehavior crossing_edge_behavior = 13 [default = DO_NOTHING];
  if (has_crossing_edge_behavior()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      13, this->crossing_edge_behavior(), output);
  }

  // optional .mozc.commands.Request.LanguageAwareInputBehavior language_aware_input = 14 [default = DEFAULT_LANGUAGE_AWARE_BEHAVIOR];
  if (has_language_aware_input()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      14, this->language_aware_input(), output);
  }

  // optional int32 candidate_page_size = 15 [default = 9];
  if (has_candidate_page_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->candidate_page_size(), output);
  }

  // optional int32 candidates_size_limit = 16;
  if (has_candidates_size_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->candidates_size_limit(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mozc.commands.Request)
}

::google::protobuf::uint8* Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mozc.commands.Request)
  // optional bool zero_query_suggestion = 1 [default = false];
  if (has_zero_query_suggestion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->zero_query_suggestion(), target);
  }

  // optional bool mixed_conversion = 2 [default = false];
  if (has_mixed_conversion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->mixed_conversion(), target);
  }

  // optional .mozc.commands.Request.SpecialRomanjiTable special_romanji_table = 4 [default = DEFAULT_TABLE];
  if (has_special_romanji_table()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->special_romanji_table(), target);
  }

  // optional .mozc.commands.Request.SpaceOnAlphanumeric space_on_alphanumeric = 6 [default = SPACE_OR_CONVERT_KEEPING_COMPOSITION];
  if (has_space_on_alphanumeric()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->space_on_alphanumeric(), target);
  }

  // optional string keyboard_name = 7;
  if (has_keyboard_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->keyboard_name().data(), this->keyboard_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mozc.commands.Request.keyboard_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->keyboard_name(), target);
  }

  // optional bool update_input_mode_from_surrounding_text = 8 [default = true];
  if (has_update_input_mode_from_surrounding_text()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->update_input_mode_from_surrounding_text(), target);
  }

  // optional bool kana_modifier_insensitive_conversion = 9 [default = false];
  if (has_kana_modifier_insensitive_conversion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->kana_modifier_insensitive_conversion(), target);
  }

  // optional bool auto_partial_suggestion = 10 [default = false];
  if (has_auto_partial_suggestion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->auto_partial_suggestion(), target);
  }

  // optional int32 available_emoji_carrier = 11 [default = 1];
  if (has_available_emoji_carrier()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->available_emoji_carrier(), target);
  }

  // optional int32 emoji_rewriter_capability = 12 [default = 1];
  if (has_emoji_rewriter_capability()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->emoji_rewriter_capability(), target);
  }

  // optional .mozc.commands.Request.CrossingEdgeBehavior crossing_edge_behavior = 13 [default = DO_NOTHING];
  if (has_crossing_edge_behavior()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      13, this->crossing_edge_behavior(), target);
  }

  // optional .mozc.commands.Request.LanguageAwareInputBehavior language_aware_input = 14 [default = DEFAULT_LANGUAGE_AWARE_BEHAVIOR];
  if (has_language_aware_input()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      14, this->language_aware_input(), target);
  }

  // optional int32 candidate_page_size = 15 [default = 9];
  if (has_candidate_page_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->candidate_page_size(), target);
  }

  // optional int32 candidates_size_limit = 16;
  if (has_candidates_size_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->candidates_size_limit(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mozc.commands.Request)
  return target;
}

int Request::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:mozc.commands.Request)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional bool zero_query_suggestion = 1 [default = false];
    if (has_zero_query_suggestion()) {
      total_size += 1 + 1;
    }

    // optional bool mixed_conversion = 2 [default = false];
    if (has_mixed_conversion()) {
      total_size += 1 + 1;
    }

    // optional .mozc.commands.Request.SpecialRomanjiTable special_romanji_table = 4 [default = DEFAULT_TABLE];
    if (has_special_romanji_table()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->special_romanji_table());
    }

    // optional .mozc.commands.Request.SpaceOnAlphanumeric space_on_alphanumeric = 6 [default = SPACE_OR_CONVERT_KEEPING_COMPOSITION];
    if (has_space_on_alphanumeric()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->space_on_alphanumeric());
    }

    // optional string keyboard_name = 7;
    if (has_keyboard_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->keyboard_name());
    }

    // optional bool update_input_mode_from_surrounding_text = 8 [default = true];
    if (has_update_input_mode_from_surrounding_text()) {
      total_size += 1 + 1;
    }

    // optional bool kana_modifier_insensitive_conversion = 9 [default = false];
    if (has_kana_modifier_insensitive_conversion()) {
      total_size += 1 + 1;
    }

    // optional bool auto_partial_suggestion = 10 [default = false];
    if (has_auto_partial_suggestion()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & 16128u) {
    // optional int32 available_emoji_carrier = 11 [default = 1];
    if (has_available_emoji_carrier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->available_emoji_carrier());
    }

    // optional int32 emoji_rewriter_capability = 12 [default = 1];
    if (has_emoji_rewriter_capability()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->emoji_rewriter_capability());
    }

    // optional .mozc.commands.Request.CrossingEdgeBehavior crossing_edge_behavior = 13 [default = DO_NOTHING];
    if (has_crossing_edge_behavior()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->crossing_edge_behavior());
    }

    // optional .mozc.commands.Request.LanguageAwareInputBehavior language_aware_input = 14 [default = DEFAULT_LANGUAGE_AWARE_BEHAVIOR];
    if (has_language_aware_input()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->language_aware_input());
    }

    // optional int32 candidate_page_size = 15 [default = 9];
    if (has_candidate_page_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->candidate_page_size());
    }

    // optional int32 candidates_size_limit = 16;
    if (has_candidates_size_limit()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->candidates_size_limit());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mozc.commands.Request)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Request* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mozc.commands.Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mozc.commands.Request)
    MergeFrom(*source);
  }
}

void Request::MergeFrom(const Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mozc.commands.Request)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zero_query_suggestion()) {
      set_zero_query_suggestion(from.zero_query_suggestion());
    }
    if (from.has_mixed_conversion()) {
      set_mixed_conversion(from.mixed_conversion());
    }
    if (from.has_special_romanji_table()) {
      set_special_romanji_table(from.special_romanji_table());
    }
    if (from.has_space_on_alphanumeric()) {
      set_space_on_alphanumeric(from.space_on_alphanumeric());
    }
    if (from.has_keyboard_name()) {
      set_has_keyboard_name();
      keyboard_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.keyboard_name_);
    }
    if (from.has_update_input_mode_from_surrounding_text()) {
      set_update_input_mode_from_surrounding_text(from.update_input_mode_from_surrounding_text());
    }
    if (from.has_kana_modifier_insensitive_conversion()) {
      set_kana_modifier_insensitive_conversion(from.kana_modifier_insensitive_conversion());
    }
    if (from.has_auto_partial_suggestion()) {
      set_auto_partial_suggestion(from.auto_partial_suggestion());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_available_emoji_carrier()) {
      set_available_emoji_carrier(from.available_emoji_carrier());
    }
    if (from.has_emoji_rewriter_capability()) {
      set_emoji_rewriter_capability(from.emoji_rewriter_capability());
    }
    if (from.has_crossing_edge_behavior()) {
      set_crossing_edge_behavior(from.crossing_edge_behavior());
    }
    if (from.has_language_aware_input()) {
      set_language_aware_input(from.language_aware_input());
    }
    if (from.has_candidate_page_size()) {
      set_candidate_page_size(from.candidate_page_size());
    }
    if (from.has_candidates_size_limit()) {
      set_candidates_size_limit(from.candidates_size_limit());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mozc.commands.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request::CopyFrom(const Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mozc.commands.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request::IsInitialized() const {

  return true;
}

void Request::Swap(Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Request::InternalSwap(Request* other) {
  std::swap(zero_query_suggestion_, other->zero_query_suggestion_);
  std::swap(mixed_conversion_, other->mixed_conversion_);
  std::swap(special_romanji_table_, other->special_romanji_table_);
  std::swap(space_on_alphanumeric_, other->space_on_alphanumeric_);
  keyboard_name_.Swap(&other->keyboard_name_);
  std::swap(update_input_mode_from_surrounding_text_, other->update_input_mode_from_surrounding_text_);
  std::swap(kana_modifier_insensitive_conversion_, other->kana_modifier_insensitive_conversion_);
  std::swap(auto_partial_suggestion_, other->auto_partial_suggestion_);
  std::swap(available_emoji_carrier_, other->available_emoji_carrier_);
  std::swap(emoji_rewriter_capability_, other->emoji_rewriter_capability_);
  std::swap(crossing_edge_behavior_, other->crossing_edge_behavior_);
  std::swap(language_aware_input_, other->language_aware_input_);
  std::swap(candidate_page_size_, other->candidate_page_size_);
  std::swap(candidates_size_limit_, other->candidates_size_limit_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Request_descriptor_;
  metadata.reflection = Request_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Request

// optional bool zero_query_suggestion = 1 [default = false];
bool Request::has_zero_query_suggestion() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Request::set_has_zero_query_suggestion() {
  _has_bits_[0] |= 0x00000001u;
}
void Request::clear_has_zero_query_suggestion() {
  _has_bits_[0] &= ~0x00000001u;
}
void Request::clear_zero_query_suggestion() {
  zero_query_suggestion_ = false;
  clear_has_zero_query_suggestion();
}
 bool Request::zero_query_suggestion() const {
  // @@protoc_insertion_point(field_get:mozc.commands.Request.zero_query_suggestion)
  return zero_query_suggestion_;
}
 void Request::set_zero_query_suggestion(bool value) {
  set_has_zero_query_suggestion();
  zero_query_suggestion_ = value;
  // @@protoc_insertion_point(field_set:mozc.commands.Request.zero_query_suggestion)
}

// optional bool mixed_conversion = 2 [default = false];
bool Request::has_mixed_conversion() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Request::set_has_mixed_conversion() {
  _has_bits_[0] |= 0x00000002u;
}
void Request::clear_has_mixed_conversion() {
  _has_bits_[0] &= ~0x00000002u;
}
void Request::clear_mixed_conversion() {
  mixed_conversion_ = false;
  clear_has_mixed_conversion();
}
 bool Request::mixed_conversion() const {
  // @@protoc_insertion_point(field_get:mozc.commands.Request.mixed_conversion)
  return mixed_conversion_;
}
 void Request::set_mixed_conversion(bool value) {
  set_has_mixed_conversion();
  mixed_conversion_ = value;
  // @@protoc_insertion_point(field_set:mozc.commands.Request.mixed_conversion)
}

// optional .mozc.commands.Request.SpecialRomanjiTable special_romanji_table = 4 [default = DEFAULT_TABLE];
bool Request::has_special_romanji_table() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Request::set_has_special_romanji_table() {
  _has_bits_[0] |= 0x00000004u;
}
void Request::clear_has_special_romanji_table() {
  _has_bits_[0] &= ~0x00000004u;
}
void Request::clear_special_romanji_table() {
  special_romanji_table_ = 0;
  clear_has_special_romanji_table();
}
 ::mozc::commands::Request_SpecialRomanjiTable Request::special_romanji_table() const {
  // @@protoc_insertion_point(field_get:mozc.commands.Request.special_romanji_table)
  return static_cast< ::mozc::commands::Request_SpecialRomanjiTable >(special_romanji_table_);
}
 void Request::set_special_romanji_table(::mozc::commands::Request_SpecialRomanjiTable value) {
  assert(::mozc::commands::Request_SpecialRomanjiTable_IsValid(value));
  set_has_special_romanji_table();
  special_romanji_table_ = value;
  // @@protoc_insertion_point(field_set:mozc.commands.Request.special_romanji_table)
}

// optional .mozc.commands.Request.SpaceOnAlphanumeric space_on_alphanumeric = 6 [default = SPACE_OR_CONVERT_KEEPING_COMPOSITION];
bool Request::has_space_on_alphanumeric() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Request::set_has_space_on_alphanumeric() {
  _has_bits_[0] |= 0x00000008u;
}
void Request::clear_has_space_on_alphanumeric() {
  _has_bits_[0] &= ~0x00000008u;
}
void Request::clear_space_on_alphanumeric() {
  space_on_alphanumeric_ = 0;
  clear_has_space_on_alphanumeric();
}
 ::mozc::commands::Request_SpaceOnAlphanumeric Request::space_on_alphanumeric() const {
  // @@protoc_insertion_point(field_get:mozc.commands.Request.space_on_alphanumeric)
  return static_cast< ::mozc::commands::Request_SpaceOnAlphanumeric >(space_on_alphanumeric_);
}
 void Request::set_space_on_alphanumeric(::mozc::commands::Request_SpaceOnAlphanumeric value) {
  assert(::mozc::commands::Request_SpaceOnAlphanumeric_IsValid(value));
  set_has_space_on_alphanumeric();
  space_on_alphanumeric_ = value;
  // @@protoc_insertion_point(field_set:mozc.commands.Request.space_on_alphanumeric)
}

// optional string keyboard_name = 7;
bool Request::has_keyboard_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Request::set_has_keyboard_name() {
  _has_bits_[0] |= 0x00000010u;
}
void Request::clear_has_keyboard_name() {
  _has_bits_[0] &= ~0x00000010u;
}
void Request::clear_keyboard_name() {
  keyboard_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_keyboard_name();
}
 const ::std::string& Request::keyboard_name() const {
  // @@protoc_insertion_point(field_get:mozc.commands.Request.keyboard_name)
  return keyboard_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Request::set_keyboard_name(const ::std::string& value) {
  set_has_keyboard_name();
  keyboard_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mozc.commands.Request.keyboard_name)
}
 void Request::set_keyboard_name(const char* value) {
  set_has_keyboard_name();
  keyboard_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mozc.commands.Request.keyboard_name)
}
 void Request::set_keyboard_name(const char* value, size_t size) {
  set_has_keyboard_name();
  keyboard_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mozc.commands.Request.keyboard_name)
}
 ::std::string* Request::mutable_keyboard_name() {
  set_has_keyboard_name();
  // @@protoc_insertion_point(field_mutable:mozc.commands.Request.keyboard_name)
  return keyboard_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Request::release_keyboard_name() {
  // @@protoc_insertion_point(field_release:mozc.commands.Request.keyboard_name)
  clear_has_keyboard_name();
  return keyboard_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Request::set_allocated_keyboard_name(::std::string* keyboard_name) {
  if (keyboard_name != NULL) {
    set_has_keyboard_name();
  } else {
    clear_has_keyboard_name();
  }
  keyboard_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), keyboard_name);
  // @@protoc_insertion_point(field_set_allocated:mozc.commands.Request.keyboard_name)
}

// optional bool update_input_mode_from_surrounding_text = 8 [default = true];
bool Request::has_update_input_mode_from_surrounding_text() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Request::set_has_update_input_mode_from_surrounding_text() {
  _has_bits_[0] |= 0x00000020u;
}
void Request::clear_has_update_input_mode_from_surrounding_text() {
  _has_bits_[0] &= ~0x00000020u;
}
void Request::clear_update_input_mode_from_surrounding_text() {
  update_input_mode_from_surrounding_text_ = true;
  clear_has_update_input_mode_from_surrounding_text();
}
 bool Request::update_input_mode_from_surrounding_text() const {
  // @@protoc_insertion_point(field_get:mozc.commands.Request.update_input_mode_from_surrounding_text)
  return update_input_mode_from_surrounding_text_;
}
 void Request::set_update_input_mode_from_surrounding_text(bool value) {
  set_has_update_input_mode_from_surrounding_text();
  update_input_mode_from_surrounding_text_ = value;
  // @@protoc_insertion_point(field_set:mozc.commands.Request.update_input_mode_from_surrounding_text)
}

// optional bool kana_modifier_insensitive_conversion = 9 [default = false];
bool Request::has_kana_modifier_insensitive_conversion() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Request::set_has_kana_modifier_insensitive_conversion() {
  _has_bits_[0] |= 0x00000040u;
}
void Request::clear_has_kana_modifier_insensitive_conversion() {
  _has_bits_[0] &= ~0x00000040u;
}
void Request::clear_kana_modifier_insensitive_conversion() {
  kana_modifier_insensitive_conversion_ = false;
  clear_has_kana_modifier_insensitive_conversion();
}
 bool Request::kana_modifier_insensitive_conversion() const {
  // @@protoc_insertion_point(field_get:mozc.commands.Request.kana_modifier_insensitive_conversion)
  return kana_modifier_insensitive_conversion_;
}
 void Request::set_kana_modifier_insensitive_conversion(bool value) {
  set_has_kana_modifier_insensitive_conversion();
  kana_modifier_insensitive_conversion_ = value;
  // @@protoc_insertion_point(field_set:mozc.commands.Request.kana_modifier_insensitive_conversion)
}

// optional bool auto_partial_suggestion = 10 [default = false];
bool Request::has_auto_partial_suggestion() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Request::set_has_auto_partial_suggestion() {
  _has_bits_[0] |= 0x00000080u;
}
void Request::clear_has_auto_partial_suggestion() {
  _has_bits_[0] &= ~0x00000080u;
}
void Request::clear_auto_partial_suggestion() {
  auto_partial_suggestion_ = false;
  clear_has_auto_partial_suggestion();
}
 bool Request::auto_partial_suggestion() const {
  // @@protoc_insertion_point(field_get:mozc.commands.Request.auto_partial_suggestion)
  return auto_partial_suggestion_;
}
 void Request::set_auto_partial_suggestion(bool value) {
  set_has_auto_partial_suggestion();
  auto_partial_suggestion_ = value;
  // @@protoc_insertion_point(field_set:mozc.commands.Request.auto_partial_suggestion)
}

// optional int32 available_emoji_carrier = 11 [default = 1];
bool Request::has_available_emoji_carrier() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Request::set_has_available_emoji_carrier() {
  _has_bits_[0] |= 0x00000100u;
}
void Request::clear_has_available_emoji_carrier() {
  _has_bits_[0] &= ~0x00000100u;
}
void Request::clear_available_emoji_carrier() {
  available_emoji_carrier_ = 1;
  clear_has_available_emoji_carrier();
}
 ::google::protobuf::int32 Request::available_emoji_carrier() const {
  // @@protoc_insertion_point(field_get:mozc.commands.Request.available_emoji_carrier)
  return available_emoji_carrier_;
}
 void Request::set_available_emoji_carrier(::google::protobuf::int32 value) {
  set_has_available_emoji_carrier();
  available_emoji_carrier_ = value;
  // @@protoc_insertion_point(field_set:mozc.commands.Request.available_emoji_carrier)
}

// optional int32 emoji_rewriter_capability = 12 [default = 1];
bool Request::has_emoji_rewriter_capability() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void Request::set_has_emoji_rewriter_capability() {
  _has_bits_[0] |= 0x00000200u;
}
void Request::clear_has_emoji_rewriter_capability() {
  _has_bits_[0] &= ~0x00000200u;
}
void Request::clear_emoji_rewriter_capability() {
  emoji_rewriter_capability_ = 1;
  clear_has_emoji_rewriter_capability();
}
 ::google::protobuf::int32 Request::emoji_rewriter_capability() const {
  // @@protoc_insertion_point(field_get:mozc.commands.Request.emoji_rewriter_capability)
  return emoji_rewriter_capability_;
}
 void Request::set_emoji_rewriter_capability(::google::protobuf::int32 value) {
  set_has_emoji_rewriter_capability();
  emoji_rewriter_capability_ = value;
  // @@protoc_insertion_point(field_set:mozc.commands.Request.emoji_rewriter_capability)
}

// optional .mozc.commands.Request.CrossingEdgeBehavior crossing_edge_behavior = 13 [default = DO_NOTHING];
bool Request::has_crossing_edge_behavior() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void Request::set_has_crossing_edge_behavior() {
  _has_bits_[0] |= 0x00000400u;
}
void Request::clear_has_crossing_edge_behavior() {
  _has_bits_[0] &= ~0x00000400u;
}
void Request::clear_crossing_edge_behavior() {
  crossing_edge_behavior_ = 0;
  clear_has_crossing_edge_behavior();
}
 ::mozc::commands::Request_CrossingEdgeBehavior Request::crossing_edge_behavior() const {
  // @@protoc_insertion_point(field_get:mozc.commands.Request.crossing_edge_behavior)
  return static_cast< ::mozc::commands::Request_CrossingEdgeBehavior >(crossing_edge_behavior_);
}
 void Request::set_crossing_edge_behavior(::mozc::commands::Request_CrossingEdgeBehavior value) {
  assert(::mozc::commands::Request_CrossingEdgeBehavior_IsValid(value));
  set_has_crossing_edge_behavior();
  crossing_edge_behavior_ = value;
  // @@protoc_insertion_point(field_set:mozc.commands.Request.crossing_edge_behavior)
}

// optional .mozc.commands.Request.LanguageAwareInputBehavior language_aware_input = 14 [default = DEFAULT_LANGUAGE_AWARE_BEHAVIOR];
bool Request::has_language_aware_input() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void Request::set_has_language_aware_input() {
  _has_bits_[0] |= 0x00000800u;
}
void Request::clear_has_language_aware_input() {
  _has_bits_[0] &= ~0x00000800u;
}
void Request::clear_language_aware_input() {
  language_aware_input_ = 0;
  clear_has_language_aware_input();
}
 ::mozc::commands::Request_LanguageAwareInputBehavior Request::language_aware_input() const {
  // @@protoc_insertion_point(field_get:mozc.commands.Request.language_aware_input)
  return static_cast< ::mozc::commands::Request_LanguageAwareInputBehavior >(language_aware_input_);
}
 void Request::set_language_aware_input(::mozc::commands::Request_LanguageAwareInputBehavior value) {
  assert(::mozc::commands::Request_LanguageAwareInputBehavior_IsValid(value));
  set_has_language_aware_input();
  language_aware_input_ = value;
  // @@protoc_insertion_point(field_set:mozc.commands.Request.language_aware_input)
}

// optional int32 candidate_page_size = 15 [default = 9];
bool Request::has_candidate_page_size() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void Request::set_has_candidate_page_size() {
  _has_bits_[0] |= 0x00001000u;
}
void Request::clear_has_candidate_page_size() {
  _has_bits_[0] &= ~0x00001000u;
}
void Request::clear_candidate_page_size() {
  candidate_page_size_ = 9;
  clear_has_candidate_page_size();
}
 ::google::protobuf::int32 Request::candidate_page_size() const {
  // @@protoc_insertion_point(field_get:mozc.commands.Request.candidate_page_size)
  return candidate_page_size_;
}
 void Request::set_candidate_page_size(::google::protobuf::int32 value) {
  set_has_candidate_page_size();
  candidate_page_size_ = value;
  // @@protoc_insertion_point(field_set:mozc.commands.Request.candidate_page_size)
}

// optional int32 candidates_size_limit = 16;
bool Request::has_candidates_size_limit() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void Request::set_has_candidates_size_limit() {
  _has_bits_[0] |= 0x00002000u;
}
void Request::clear_has_candidates_size_limit() {
  _has_bits_[0] &= ~0x00002000u;
}
void Request::clear_candidates_size_limit() {
  candidates_size_limit_ = 0;
  clear_has_candidates_size_limit();
}
 ::google::protobuf::int32 Request::candidates_size_limit() const {
  // @@protoc_insertion_point(field_get:mozc.commands.Request.candidates_size_limit)
  return candidates_size_limit_;
}
 void Request::set_candidates_size_limit(::google::protobuf::int32 value) {
  set_has_candidates_size_limit();
  candidates_size_limit_ = value;
  // @@protoc_insertion_point(field_set:mozc.commands.Request.candidates_size_limit)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ApplicationInfo::kProcessIdFieldNumber;
const int ApplicationInfo::kThreadIdFieldNumber;
const int ApplicationInfo::kTimezoneOffsetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ApplicationInfo::ApplicationInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mozc.commands.ApplicationInfo)
}

void ApplicationInfo::InitAsDefaultInstance() {
}

ApplicationInfo::ApplicationInfo(const ApplicationInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mozc.commands.ApplicationInfo)
}

void ApplicationInfo::SharedCtor() {
  _cached_size_ = 0;
  process_id_ = 0u;
  thread_id_ = 0u;
  timezone_offset_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ApplicationInfo::~ApplicationInfo() {
  // @@protoc_insertion_point(destructor:mozc.commands.ApplicationInfo)
  SharedDtor();
}

void ApplicationInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ApplicationInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ApplicationInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ApplicationInfo_descriptor_;
}

const ApplicationInfo& ApplicationInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2fcommands_2eproto();
  return *default_instance_;
}

ApplicationInfo* ApplicationInfo::default_instance_ = NULL;

ApplicationInfo* ApplicationInfo::New(::google::protobuf::Arena* arena) const {
  ApplicationInfo* n = new ApplicationInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ApplicationInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:mozc.commands.ApplicationInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ApplicationInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ApplicationInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(process_id_, timezone_offset_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ApplicationInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mozc.commands.ApplicationInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 process_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &process_id_)));
          set_has_process_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_thread_id;
        break;
      }

      // optional uint32 thread_id = 2;
      case 2: {
        if (tag == 16) {
         parse_thread_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &thread_id_)));
          set_has_thread_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_timezone_offset;
        break;
      }

      // optional int32 timezone_offset = 3;
      case 3: {
        if (tag == 24) {
         parse_timezone_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timezone_offset_)));
          set_has_timezone_offset();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mozc.commands.ApplicationInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mozc.commands.ApplicationInfo)
  return false;
#undef DO_
}

void ApplicationInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mozc.commands.ApplicationInfo)
  // optional uint32 process_id = 1;
  if (has_process_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->process_id(), output);
  }

  // optional uint32 thread_id = 2;
  if (has_thread_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->thread_id(), output);
  }

  // optional int32 timezone_offset = 3;
  if (has_timezone_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->timezone_offset(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mozc.commands.ApplicationInfo)
}

::google::protobuf::uint8* ApplicationInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mozc.commands.ApplicationInfo)
  // optional uint32 process_id = 1;
  if (has_process_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->process_id(), target);
  }

  // optional uint32 thread_id = 2;
  if (has_thread_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->thread_id(), target);
  }

  // optional int32 timezone_offset = 3;
  if (has_timezone_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->timezone_offset(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mozc.commands.ApplicationInfo)
  return target;
}

int ApplicationInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:mozc.commands.ApplicationInfo)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional uint32 process_id = 1;
    if (has_process_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->process_id());
    }

    // optional uint32 thread_id = 2;
    if (has_thread_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->thread_id());
    }

    // optional int32 timezone_offset = 3;
    if (has_timezone_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timezone_offset());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ApplicationInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mozc.commands.ApplicationInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ApplicationInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ApplicationInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mozc.commands.ApplicationInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mozc.commands.ApplicationInfo)
    MergeFrom(*source);
  }
}

void ApplicationInfo::MergeFrom(const ApplicationInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mozc.commands.ApplicationInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_process_id()) {
      set_process_id(from.process_id());
    }
    if (from.has_thread_id()) {
      set_thread_id(from.thread_id());
    }
    if (from.has_timezone_offset()) {
      set_timezone_offset(from.timezone_offset());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ApplicationInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mozc.commands.ApplicationInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ApplicationInfo::CopyFrom(const ApplicationInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mozc.commands.ApplicationInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApplicationInfo::IsInitialized() const {

  return true;
}

void ApplicationInfo::Swap(ApplicationInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ApplicationInfo::InternalSwap(ApplicationInfo* other) {
  std::swap(process_id_, other->process_id_);
  std::swap(thread_id_, other->thread_id_);
  std::swap(timezone_offset_, other->timezone_offset_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ApplicationInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ApplicationInfo_descriptor_;
  metadata.reflection = ApplicationInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ApplicationInfo

// optional uint32 process_id = 1;
bool ApplicationInfo::has_process_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ApplicationInfo::set_has_process_id() {
  _has_bits_[0] |= 0x00000001u;
}
void ApplicationInfo::clear_has_process_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void ApplicationInfo::clear_process_id() {
  process_id_ = 0u;
  clear_has_process_id();
}
 ::google::protobuf::uint32 ApplicationInfo::process_id() const {
  // @@protoc_insertion_point(field_get:mozc.commands.ApplicationInfo.process_id)
  return process_id_;
}
 void ApplicationInfo::set_process_id(::google::protobuf::uint32 value) {
  set_has_process_id();
  process_id_ = value;
  // @@protoc_insertion_point(field_set:mozc.commands.ApplicationInfo.process_id)
}

// optional uint32 thread_id = 2;
bool ApplicationInfo::has_thread_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ApplicationInfo::set_has_thread_id() {
  _has_bits_[0] |= 0x00000002u;
}
void ApplicationInfo::clear_has_thread_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void ApplicationInfo::clear_thread_id() {
  thread_id_ = 0u;
  clear_has_thread_id();
}
 ::google::protobuf::uint32 ApplicationInfo::thread_id() const {
  // @@protoc_insertion_point(field_get:mozc.commands.ApplicationInfo.thread_id)
  return thread_id_;
}
 void ApplicationInfo::set_thread_id(::google::protobuf::uint32 value) {
  set_has_thread_id();
  thread_id_ = value;
  // @@protoc_insertion_point(field_set:mozc.commands.ApplicationInfo.thread_id)
}

// optional int32 timezone_offset = 3;
bool ApplicationInfo::has_timezone_offset() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ApplicationInfo::set_has_timezone_offset() {
  _has_bits_[0] |= 0x00000004u;
}
void ApplicationInfo::clear_has_timezone_offset() {
  _has_bits_[0] &= ~0x00000004u;
}
void ApplicationInfo::clear_timezone_offset() {
  timezone_offset_ = 0;
  clear_has_timezone_offset();
}
 ::google::protobuf::int32 ApplicationInfo::timezone_offset() const {
  // @@protoc_insertion_point(field_get:mozc.commands.ApplicationInfo.timezone_offset)
  return timezone_offset_;
}
 void ApplicationInfo::set_timezone_offset(::google::protobuf::int32 value) {
  set_has_timezone_offset();
  timezone_offset_ = value;
  // @@protoc_insertion_point(field_set:mozc.commands.ApplicationInfo.timezone_offset)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* Input_CommandType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Input_CommandType_descriptor_;
}
bool Input_CommandType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 16:
    case 17:
    case 18:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Input_CommandType Input::NONE;
const Input_CommandType Input::CREATE_SESSION;
const Input_CommandType Input::DELETE_SESSION;
const Input_CommandType Input::SEND_KEY;
const Input_CommandType Input::TEST_SEND_KEY;
const Input_CommandType Input::SEND_COMMAND;
const Input_CommandType Input::GET_CONFIG;
const Input_CommandType Input::SET_CONFIG;
const Input_CommandType Input::SET_IMPOSED_CONFIG;
const Input_CommandType Input::SET_REQUEST;
const Input_CommandType Input::SYNC_DATA;
const Input_CommandType Input::SHUTDOWN;
const Input_CommandType Input::RELOAD;
const Input_CommandType Input::CLEAR_USER_HISTORY;
const Input_CommandType Input::CLEAR_USER_PREDICTION;
const Input_CommandType Input::CLEAR_UNUSED_USER_PREDICTION;
const Input_CommandType Input::CLEANUP;
const Input_CommandType Input::NO_OPERATION;
const Input_CommandType Input::OBSOLETE_START_CLOUD_SYNC;
const Input_CommandType Input::OBSOLETE_GET_CLOUD_SYNC_STATUS;
const Input_CommandType Input::OBSOLETE_ADD_AUTH_CODE;
const Input_CommandType Input::INSERT_TO_STORAGE;
const Input_CommandType Input::READ_ALL_FROM_STORAGE;
const Input_CommandType Input::CLEAR_STORAGE;
const Input_CommandType Input::SEND_USER_DICTIONARY_COMMAND;
const Input_CommandType Input::SEND_ENGINE_RELOAD_REQUEST;
const Input_CommandType Input::NUM_OF_COMMANDS;
const Input_CommandType Input::CommandType_MIN;
const Input_CommandType Input::CommandType_MAX;
const int Input::CommandType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Input_TouchAction_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Input_TouchAction_descriptor_;
}
bool Input_TouchAction_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Input_TouchAction Input::TOUCH_DOWN;
const Input_TouchAction Input::TOUCH_MOVE;
const Input_TouchAction Input::TOUCH_UP;
const Input_TouchAction Input::TouchAction_MIN;
const Input_TouchAction Input::TouchAction_MAX;
const int Input::TouchAction_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Input_TouchPosition::kActionFieldNumber;
const int Input_TouchPosition::kXFieldNumber;
const int Input_TouchPosition::kYFieldNumber;
const int Input_TouchPosition::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Input_TouchPosition::Input_TouchPosition()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mozc.commands.Input.TouchPosition)
}

void Input_TouchPosition::InitAsDefaultInstance() {
}

Input_TouchPosition::Input_TouchPosition(const Input_TouchPosition& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mozc.commands.Input.TouchPosition)
}

void Input_TouchPosition::SharedCtor() {
  _cached_size_ = 0;
  action_ = 1;
  x_ = 0;
  y_ = 0;
  timestamp_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Input_TouchPosition::~Input_TouchPosition() {
  // @@protoc_insertion_point(destructor:mozc.commands.Input.TouchPosition)
  SharedDtor();
}

void Input_TouchPosition::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Input_TouchPosition::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Input_TouchPosition::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Input_TouchPosition_descriptor_;
}

const Input_TouchPosition& Input_TouchPosition::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2fcommands_2eproto();
  return *default_instance_;
}

Input_TouchPosition* Input_TouchPosition::default_instance_ = NULL;

Input_TouchPosition* Input_TouchPosition::New(::google::protobuf::Arena* arena) const {
  Input_TouchPosition* n = new Input_TouchPosition;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Input_TouchPosition::Clear() {
// @@protoc_insertion_point(message_clear_start:mozc.commands.Input.TouchPosition)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Input_TouchPosition, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Input_TouchPosition*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 15u) {
    ZR_(x_, y_);
    action_ = 1;
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Input_TouchPosition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mozc.commands.Input.TouchPosition)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .mozc.commands.Input.TouchAction action = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mozc::commands::Input_TouchAction_IsValid(value)) {
            set_action(static_cast< ::mozc::commands::Input_TouchAction >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_x;
        break;
      }

      // optional float x = 2;
      case 2: {
        if (tag == 21) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_y;
        break;
      }

      // optional float y = 3;
      case 3: {
        if (tag == 29) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_timestamp;
        break;
      }

      // optional int64 timestamp = 4;
      case 4: {
        if (tag == 32) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mozc.commands.Input.TouchPosition)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mozc.commands.Input.TouchPosition)
  return false;
#undef DO_
}

void Input_TouchPosition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mozc.commands.Input.TouchPosition)
  // optional .mozc.commands.Input.TouchAction action = 1;
  if (has_action()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->action(), output);
  }

  // optional float x = 2;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->x(), output);
  }

  // optional float y = 3;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->y(), output);
  }

  // optional int64 timestamp = 4;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->timestamp(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mozc.commands.Input.TouchPosition)
}

::google::protobuf::uint8* Input_TouchPosition::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mozc.commands.Input.TouchPosition)
  // optional .mozc.commands.Input.TouchAction action = 1;
  if (has_action()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->action(), target);
  }

  // optional float x = 2;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->x(), target);
  }

  // optional float y = 3;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->y(), target);
  }

  // optional int64 timestamp = 4;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->timestamp(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mozc.commands.Input.TouchPosition)
  return target;
}

int Input_TouchPosition::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:mozc.commands.Input.TouchPosition)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 15u) {
    // optional .mozc.commands.Input.TouchAction action = 1;
    if (has_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->action());
    }

    // optional float x = 2;
    if (has_x()) {
      total_size += 1 + 4;
    }

    // optional float y = 3;
    if (has_y()) {
      total_size += 1 + 4;
    }

    // optional int64 timestamp = 4;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timestamp());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Input_TouchPosition::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mozc.commands.Input.TouchPosition)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Input_TouchPosition* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Input_TouchPosition>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mozc.commands.Input.TouchPosition)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mozc.commands.Input.TouchPosition)
    MergeFrom(*source);
  }
}

void Input_TouchPosition::MergeFrom(const Input_TouchPosition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mozc.commands.Input.TouchPosition)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_action()) {
      set_action(from.action());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Input_TouchPosition::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mozc.commands.Input.TouchPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Input_TouchPosition::CopyFrom(const Input_TouchPosition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mozc.commands.Input.TouchPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Input_TouchPosition::IsInitialized() const {

  return true;
}

void Input_TouchPosition::Swap(Input_TouchPosition* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Input_TouchPosition::InternalSwap(Input_TouchPosition* other) {
  std::swap(action_, other->action_);
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(timestamp_, other->timestamp_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Input_TouchPosition::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Input_TouchPosition_descriptor_;
  metadata.reflection = Input_TouchPosition_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Input_TouchEvent::kSourceIdFieldNumber;
const int Input_TouchEvent::kStrokeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Input_TouchEvent::Input_TouchEvent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mozc.commands.Input.TouchEvent)
}

void Input_TouchEvent::InitAsDefaultInstance() {
}

Input_TouchEvent::Input_TouchEvent(const Input_TouchEvent& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mozc.commands.Input.TouchEvent)
}

void Input_TouchEvent::SharedCtor() {
  _cached_size_ = 0;
  source_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Input_TouchEvent::~Input_TouchEvent() {
  // @@protoc_insertion_point(destructor:mozc.commands.Input.TouchEvent)
  SharedDtor();
}

void Input_TouchEvent::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Input_TouchEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Input_TouchEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Input_TouchEvent_descriptor_;
}

const Input_TouchEvent& Input_TouchEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2fcommands_2eproto();
  return *default_instance_;
}

Input_TouchEvent* Input_TouchEvent::default_instance_ = NULL;

Input_TouchEvent* Input_TouchEvent::New(::google::protobuf::Arena* arena) const {
  Input_TouchEvent* n = new Input_TouchEvent;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Input_TouchEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:mozc.commands.Input.TouchEvent)
  source_id_ = 0u;
  stroke_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Input_TouchEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mozc.commands.Input.TouchEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 source_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &source_id_)));
          set_has_source_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_stroke;
        break;
      }

      // repeated .mozc.commands.Input.TouchPosition stroke = 2;
      case 2: {
        if (tag == 18) {
         parse_stroke:
          DO_(input->IncrementRecursionDepth());
         parse_loop_stroke:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_stroke()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_stroke;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mozc.commands.Input.TouchEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mozc.commands.Input.TouchEvent)
  return false;
#undef DO_
}

void Input_TouchEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mozc.commands.Input.TouchEvent)
  // optional uint32 source_id = 1;
  if (has_source_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->source_id(), output);
  }

  // repeated .mozc.commands.Input.TouchPosition stroke = 2;
  for (unsigned int i = 0, n = this->stroke_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->stroke(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mozc.commands.Input.TouchEvent)
}

::google::protobuf::uint8* Input_TouchEvent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mozc.commands.Input.TouchEvent)
  // optional uint32 source_id = 1;
  if (has_source_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->source_id(), target);
  }

  // repeated .mozc.commands.Input.TouchPosition stroke = 2;
  for (unsigned int i = 0, n = this->stroke_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->stroke(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mozc.commands.Input.TouchEvent)
  return target;
}

int Input_TouchEvent::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:mozc.commands.Input.TouchEvent)
  int total_size = 0;

  // optional uint32 source_id = 1;
  if (has_source_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->source_id());
  }

  // repeated .mozc.commands.Input.TouchPosition stroke = 2;
  total_size += 1 * this->stroke_size();
  for (int i = 0; i < this->stroke_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stroke(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Input_TouchEvent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mozc.commands.Input.TouchEvent)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Input_TouchEvent* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Input_TouchEvent>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mozc.commands.Input.TouchEvent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mozc.commands.Input.TouchEvent)
    MergeFrom(*source);
  }
}

void Input_TouchEvent::MergeFrom(const Input_TouchEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mozc.commands.Input.TouchEvent)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  stroke_.MergeFrom(from.stroke_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_source_id()) {
      set_source_id(from.source_id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Input_TouchEvent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mozc.commands.Input.TouchEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Input_TouchEvent::CopyFrom(const Input_TouchEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mozc.commands.Input.TouchEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Input_TouchEvent::IsInitialized() const {

  return true;
}

void Input_TouchEvent::Swap(Input_TouchEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Input_TouchEvent::InternalSwap(Input_TouchEvent* other) {
  std::swap(source_id_, other->source_id_);
  stroke_.UnsafeArenaSwap(&other->stroke_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Input_TouchEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Input_TouchEvent_descriptor_;
  metadata.reflection = Input_TouchEvent_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Input::kTypeFieldNumber;
const int Input::kIdFieldNumber;
const int Input::kKeyFieldNumber;
const int Input::kCommandFieldNumber;
const int Input::kConfigFieldNumber;
const int Input::kContextFieldNumber;
const int Input::kCapabilityFieldNumber;
const int Input::kApplicationInfoFieldNumber;
const int Input::kRequestFieldNumber;
const int Input::kStorageEntryFieldNumber;
const int Input::kTouchEventsFieldNumber;
const int Input::kUserDictionaryCommandFieldNumber;
const int Input::kRequestSuggestionFieldNumber;
const int Input::kEngineReloadRequestFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Input::Input()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mozc.commands.Input)
}

void Input::InitAsDefaultInstance() {
  key_ = const_cast< ::mozc::commands::KeyEvent*>(&::mozc::commands::KeyEvent::default_instance());
  command_ = const_cast< ::mozc::commands::SessionCommand*>(&::mozc::commands::SessionCommand::default_instance());
  config_ = const_cast< ::mozc::config::Config*>(&::mozc::config::Config::default_instance());
  context_ = const_cast< ::mozc::commands::Context*>(&::mozc::commands::Context::default_instance());
  capability_ = const_cast< ::mozc::commands::Capability*>(&::mozc::commands::Capability::default_instance());
  application_info_ = const_cast< ::mozc::commands::ApplicationInfo*>(&::mozc::commands::ApplicationInfo::default_instance());
  request_ = const_cast< ::mozc::commands::Request*>(&::mozc::commands::Request::default_instance());
  storage_entry_ = const_cast< ::mozc::commands::GenericStorageEntry*>(&::mozc::commands::GenericStorageEntry::default_instance());
  user_dictionary_command_ = const_cast< ::mozc::user_dictionary::UserDictionaryCommand*>(&::mozc::user_dictionary::UserDictionaryCommand::default_instance());
  engine_reload_request_ = const_cast< ::mozc::EngineReloadRequest*>(&::mozc::EngineReloadRequest::default_instance());
}

Input::Input(const Input& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mozc.commands.Input)
}

void Input::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  key_ = NULL;
  command_ = NULL;
  config_ = NULL;
  context_ = NULL;
  capability_ = NULL;
  application_info_ = NULL;
  request_ = NULL;
  storage_entry_ = NULL;
  user_dictionary_command_ = NULL;
  request_suggestion_ = true;
  engine_reload_request_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Input::~Input() {
  // @@protoc_insertion_point(destructor:mozc.commands.Input)
  SharedDtor();
}

void Input::SharedDtor() {
  if (this != default_instance_) {
    delete key_;
    delete command_;
    delete config_;
    delete context_;
    delete capability_;
    delete application_info_;
    delete request_;
    delete storage_entry_;
    delete user_dictionary_command_;
    delete engine_reload_request_;
  }
}

void Input::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Input::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Input_descriptor_;
}

const Input& Input::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2fcommands_2eproto();
  return *default_instance_;
}

Input* Input::default_instance_ = NULL;

Input* Input::New(::google::protobuf::Arena* arena) const {
  Input* n = new Input;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Input::Clear() {
// @@protoc_insertion_point(message_clear_start:mozc.commands.Input)
  if (_has_bits_[0 / 32] & 255u) {
    type_ = 0;
    id_ = GOOGLE_ULONGLONG(0);
    if (has_key()) {
      if (key_ != NULL) key_->::mozc::commands::KeyEvent::Clear();
    }
    if (has_command()) {
      if (command_ != NULL) command_->::mozc::commands::SessionCommand::Clear();
    }
    if (has_config()) {
      if (config_ != NULL) config_->::mozc::config::Config::Clear();
    }
    if (has_context()) {
      if (context_ != NULL) context_->::mozc::commands::Context::Clear();
    }
    if (has_capability()) {
      if (capability_ != NULL) capability_->::mozc::commands::Capability::Clear();
    }
    if (has_application_info()) {
      if (application_info_ != NULL) application_info_->::mozc::commands::ApplicationInfo::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 15104u) {
    if (has_request()) {
      if (request_ != NULL) request_->::mozc::commands::Request::Clear();
    }
    if (has_storage_entry()) {
      if (storage_entry_ != NULL) storage_entry_->::mozc::commands::GenericStorageEntry::Clear();
    }
    if (has_user_dictionary_command()) {
      if (user_dictionary_command_ != NULL) user_dictionary_command_->::mozc::user_dictionary::UserDictionaryCommand::Clear();
    }
    request_suggestion_ = true;
    if (has_engine_reload_request()) {
      if (engine_reload_request_ != NULL) engine_reload_request_->::mozc::EngineReloadRequest::Clear();
    }
  }
  touch_events_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Input::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mozc.commands.Input)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .mozc.commands.Input.CommandType type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mozc::commands::Input_CommandType_IsValid(value)) {
            set_type(static_cast< ::mozc::commands::Input_CommandType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional uint64 id = 2;
      case 2: {
        if (tag == 16) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_key;
        break;
      }

      // optional .mozc.commands.KeyEvent key = 3;
      case 3: {
        if (tag == 26) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_command;
        break;
      }

      // optional .mozc.commands.SessionCommand command = 4;
      case 4: {
        if (tag == 34) {
         parse_command:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_command()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_config;
        break;
      }

      // optional .mozc.config.Config config = 5;
      case 5: {
        if (tag == 42) {
         parse_config:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_config()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_context;
        break;
      }

      // optional .mozc.commands.Context context = 6;
      case 6: {
        if (tag == 50) {
         parse_context:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_context()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_capability;
        break;
      }

      // optional .mozc.commands.Capability capability = 7;
      case 7: {
        if (tag == 58) {
         parse_capability:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_capability()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_application_info;
        break;
      }

      // optional .mozc.commands.ApplicationInfo application_info = 8;
      case 8: {
        if (tag == 66) {
         parse_application_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_application_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_request;
        break;
      }

      // optional .mozc.commands.Request request = 9;
      case 9: {
        if (tag == 74) {
         parse_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_request()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_storage_entry;
        break;
      }

      // optional .mozc.commands.GenericStorageEntry storage_entry = 10;
      case 10: {
        if (tag == 82) {
         parse_storage_entry:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_storage_entry()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_touch_events;
        break;
      }

      // repeated .mozc.commands.Input.TouchEvent touch_events = 12;
      case 12: {
        if (tag == 98) {
         parse_touch_events:
          DO_(input->IncrementRecursionDepth());
         parse_loop_touch_events:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_touch_events()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_loop_touch_events;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(106)) goto parse_user_dictionary_command;
        break;
      }

      // optional .mozc.user_dictionary.UserDictionaryCommand user_dictionary_command = 13;
      case 13: {
        if (tag == 106) {
         parse_user_dictionary_command:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_dictionary_command()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_request_suggestion;
        break;
      }

      // optional bool request_suggestion = 14 [default = true];
      case 14: {
        if (tag == 112) {
         parse_request_suggestion:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &request_suggestion_)));
          set_has_request_suggestion();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_engine_reload_request;
        break;
      }

      // optional .mozc.EngineReloadRequest engine_reload_request = 15;
      case 15: {
        if (tag == 122) {
         parse_engine_reload_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_engine_reload_request()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mozc.commands.Input)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mozc.commands.Input)
  return false;
#undef DO_
}

void Input::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mozc.commands.Input)
  // required .mozc.commands.Input.CommandType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional uint64 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->id(), output);
  }

  // optional .mozc.commands.KeyEvent key = 3;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->key_, output);
  }

  // optional .mozc.commands.SessionCommand command = 4;
  if (has_command()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->command_, output);
  }

  // optional .mozc.config.Config config = 5;
  if (has_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->config_, output);
  }

  // optional .mozc.commands.Context context = 6;
  if (has_context()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->context_, output);
  }

  // optional .mozc.commands.Capability capability = 7;
  if (has_capability()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->capability_, output);
  }

  // optional .mozc.commands.ApplicationInfo application_info = 8;
  if (has_application_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->application_info_, output);
  }

  // optional .mozc.commands.Request request = 9;
  if (has_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->request_, output);
  }

  // optional .mozc.commands.GenericStorageEntry storage_entry = 10;
  if (has_storage_entry()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->storage_entry_, output);
  }

  // repeated .mozc.commands.Input.TouchEvent touch_events = 12;
  for (unsigned int i = 0, n = this->touch_events_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->touch_events(i), output);
  }

  // optional .mozc.user_dictionary.UserDictionaryCommand user_dictionary_command = 13;
  if (has_user_dictionary_command()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, *this->user_dictionary_command_, output);
  }

  // optional bool request_suggestion = 14 [default = true];
  if (has_request_suggestion()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->request_suggestion(), output);
  }

  // optional .mozc.EngineReloadRequest engine_reload_request = 15;
  if (has_engine_reload_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, *this->engine_reload_request_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mozc.commands.Input)
}

::google::protobuf::uint8* Input::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mozc.commands.Input)
  // required .mozc.commands.Input.CommandType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional uint64 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->id(), target);
  }

  // optional .mozc.commands.KeyEvent key = 3;
  if (has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->key_, false, target);
  }

  // optional .mozc.commands.SessionCommand command = 4;
  if (has_command()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->command_, false, target);
  }

  // optional .mozc.config.Config config = 5;
  if (has_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->config_, false, target);
  }

  // optional .mozc.commands.Context context = 6;
  if (has_context()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->context_, false, target);
  }

  // optional .mozc.commands.Capability capability = 7;
  if (has_capability()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->capability_, false, target);
  }

  // optional .mozc.commands.ApplicationInfo application_info = 8;
  if (has_application_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->application_info_, false, target);
  }

  // optional .mozc.commands.Request request = 9;
  if (has_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *this->request_, false, target);
  }

  // optional .mozc.commands.GenericStorageEntry storage_entry = 10;
  if (has_storage_entry()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *this->storage_entry_, false, target);
  }

  // repeated .mozc.commands.Input.TouchEvent touch_events = 12;
  for (unsigned int i = 0, n = this->touch_events_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, this->touch_events(i), false, target);
  }

  // optional .mozc.user_dictionary.UserDictionaryCommand user_dictionary_command = 13;
  if (has_user_dictionary_command()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        13, *this->user_dictionary_command_, false, target);
  }

  // optional bool request_suggestion = 14 [default = true];
  if (has_request_suggestion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->request_suggestion(), target);
  }

  // optional .mozc.EngineReloadRequest engine_reload_request = 15;
  if (has_engine_reload_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        15, *this->engine_reload_request_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mozc.commands.Input)
  return target;
}

int Input::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:mozc.commands.Input)
  int total_size = 0;

  // required .mozc.commands.Input.CommandType type = 1;
  if (has_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }
  if (_has_bits_[1 / 32] & 254u) {
    // optional uint64 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional .mozc.commands.KeyEvent key = 3;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->key_);
    }

    // optional .mozc.commands.SessionCommand command = 4;
    if (has_command()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->command_);
    }

    // optional .mozc.config.Config config = 5;
    if (has_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->config_);
    }

    // optional .mozc.commands.Context context = 6;
    if (has_context()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->context_);
    }

    // optional .mozc.commands.Capability capability = 7;
    if (has_capability()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->capability_);
    }

    // optional .mozc.commands.ApplicationInfo application_info = 8;
    if (has_application_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->application_info_);
    }

  }
  if (_has_bits_[8 / 32] & 15104u) {
    // optional .mozc.commands.Request request = 9;
    if (has_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->request_);
    }

    // optional .mozc.commands.GenericStorageEntry storage_entry = 10;
    if (has_storage_entry()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->storage_entry_);
    }

    // optional .mozc.user_dictionary.UserDictionaryCommand user_dictionary_command = 13;
    if (has_user_dictionary_command()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->user_dictionary_command_);
    }

    // optional bool request_suggestion = 14 [default = true];
    if (has_request_suggestion()) {
      total_size += 1 + 1;
    }

    // optional .mozc.EngineReloadRequest engine_reload_request = 15;
    if (has_engine_reload_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->engine_reload_request_);
    }

  }
  // repeated .mozc.commands.Input.TouchEvent touch_events = 12;
  total_size += 1 * this->touch_events_size();
  for (int i = 0; i < this->touch_events_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->touch_events(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Input::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mozc.commands.Input)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Input* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Input>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mozc.commands.Input)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mozc.commands.Input)
    MergeFrom(*source);
  }
}

void Input::MergeFrom(const Input& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mozc.commands.Input)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  touch_events_.MergeFrom(from.touch_events_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_key()) {
      mutable_key()->::mozc::commands::KeyEvent::MergeFrom(from.key());
    }
    if (from.has_command()) {
      mutable_command()->::mozc::commands::SessionCommand::MergeFrom(from.command());
    }
    if (from.has_config()) {
      mutable_config()->::mozc::config::Config::MergeFrom(from.config());
    }
    if (from.has_context()) {
      mutable_context()->::mozc::commands::Context::MergeFrom(from.context());
    }
    if (from.has_capability()) {
      mutable_capability()->::mozc::commands::Capability::MergeFrom(from.capability());
    }
    if (from.has_application_info()) {
      mutable_application_info()->::mozc::commands::ApplicationInfo::MergeFrom(from.application_info());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_request()) {
      mutable_request()->::mozc::commands::Request::MergeFrom(from.request());
    }
    if (from.has_storage_entry()) {
      mutable_storage_entry()->::mozc::commands::GenericStorageEntry::MergeFrom(from.storage_entry());
    }
    if (from.has_user_dictionary_command()) {
      mutable_user_dictionary_command()->::mozc::user_dictionary::UserDictionaryCommand::MergeFrom(from.user_dictionary_command());
    }
    if (from.has_request_suggestion()) {
      set_request_suggestion(from.request_suggestion());
    }
    if (from.has_engine_reload_request()) {
      mutable_engine_reload_request()->::mozc::EngineReloadRequest::MergeFrom(from.engine_reload_request());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Input::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mozc.commands.Input)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Input::CopyFrom(const Input& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mozc.commands.Input)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Input::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_command()) {
    if (!this->command_->IsInitialized()) return false;
  }
  if (has_user_dictionary_command()) {
    if (!this->user_dictionary_command_->IsInitialized()) return false;
  }
  if (has_engine_reload_request()) {
    if (!this->engine_reload_request_->IsInitialized()) return false;
  }
  return true;
}

void Input::Swap(Input* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Input::InternalSwap(Input* other) {
  std::swap(type_, other->type_);
  std::swap(id_, other->id_);
  std::swap(key_, other->key_);
  std::swap(command_, other->command_);
  std::swap(config_, other->config_);
  std::swap(context_, other->context_);
  std::swap(capability_, other->capability_);
  std::swap(application_info_, other->application_info_);
  std::swap(request_, other->request_);
  std::swap(storage_entry_, other->storage_entry_);
  touch_events_.UnsafeArenaSwap(&other->touch_events_);
  std::swap(user_dictionary_command_, other->user_dictionary_command_);
  std::swap(request_suggestion_, other->request_suggestion_);
  std::swap(engine_reload_request_, other->engine_reload_request_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Input::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Input_descriptor_;
  metadata.reflection = Input_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Input_TouchPosition

// optional .mozc.commands.Input.TouchAction action = 1;
bool Input_TouchPosition::has_action() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Input_TouchPosition::set_has_action() {
  _has_bits_[0] |= 0x00000001u;
}
void Input_TouchPosition::clear_has_action() {
  _has_bits_[0] &= ~0x00000001u;
}
void Input_TouchPosition::clear_action() {
  action_ = 1;
  clear_has_action();
}
 ::mozc::commands::Input_TouchAction Input_TouchPosition::action() const {
  // @@protoc_insertion_point(field_get:mozc.commands.Input.TouchPosition.action)
  return static_cast< ::mozc::commands::Input_TouchAction >(action_);
}
 void Input_TouchPosition::set_action(::mozc::commands::Input_TouchAction value) {
  assert(::mozc::commands::Input_TouchAction_IsValid(value));
  set_has_action();
  action_ = value;
  // @@protoc_insertion_point(field_set:mozc.commands.Input.TouchPosition.action)
}

// optional float x = 2;
bool Input_TouchPosition::has_x() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Input_TouchPosition::set_has_x() {
  _has_bits_[0] |= 0x00000002u;
}
void Input_TouchPosition::clear_has_x() {
  _has_bits_[0] &= ~0x00000002u;
}
void Input_TouchPosition::clear_x() {
  x_ = 0;
  clear_has_x();
}
 float Input_TouchPosition::x() const {
  // @@protoc_insertion_point(field_get:mozc.commands.Input.TouchPosition.x)
  return x_;
}
 void Input_TouchPosition::set_x(float value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:mozc.commands.Input.TouchPosition.x)
}

// optional float y = 3;
bool Input_TouchPosition::has_y() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Input_TouchPosition::set_has_y() {
  _has_bits_[0] |= 0x00000004u;
}
void Input_TouchPosition::clear_has_y() {
  _has_bits_[0] &= ~0x00000004u;
}
void Input_TouchPosition::clear_y() {
  y_ = 0;
  clear_has_y();
}
 float Input_TouchPosition::y() const {
  // @@protoc_insertion_point(field_get:mozc.commands.Input.TouchPosition.y)
  return y_;
}
 void Input_TouchPosition::set_y(float value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:mozc.commands.Input.TouchPosition.y)
}

// optional int64 timestamp = 4;
bool Input_TouchPosition::has_timestamp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Input_TouchPosition::set_has_timestamp() {
  _has_bits_[0] |= 0x00000008u;
}
void Input_TouchPosition::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000008u;
}
void Input_TouchPosition::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp();
}
 ::google::protobuf::int64 Input_TouchPosition::timestamp() const {
  // @@protoc_insertion_point(field_get:mozc.commands.Input.TouchPosition.timestamp)
  return timestamp_;
}
 void Input_TouchPosition::set_timestamp(::google::protobuf::int64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:mozc.commands.Input.TouchPosition.timestamp)
}

// -------------------------------------------------------------------

// Input_TouchEvent

// optional uint32 source_id = 1;
bool Input_TouchEvent::has_source_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Input_TouchEvent::set_has_source_id() {
  _has_bits_[0] |= 0x00000001u;
}
void Input_TouchEvent::clear_has_source_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void Input_TouchEvent::clear_source_id() {
  source_id_ = 0u;
  clear_has_source_id();
}
 ::google::protobuf::uint32 Input_TouchEvent::source_id() const {
  // @@protoc_insertion_point(field_get:mozc.commands.Input.TouchEvent.source_id)
  return source_id_;
}
 void Input_TouchEvent::set_source_id(::google::protobuf::uint32 value) {
  set_has_source_id();
  source_id_ = value;
  // @@protoc_insertion_point(field_set:mozc.commands.Input.TouchEvent.source_id)
}

// repeated .mozc.commands.Input.TouchPosition stroke = 2;
int Input_TouchEvent::stroke_size() const {
  return stroke_.size();
}
void Input_TouchEvent::clear_stroke() {
  stroke_.Clear();
}
const ::mozc::commands::Input_TouchPosition& Input_TouchEvent::stroke(int index) const {
  // @@protoc_insertion_point(field_get:mozc.commands.Input.TouchEvent.stroke)
  return stroke_.Get(index);
}
::mozc::commands::Input_TouchPosition* Input_TouchEvent::mutable_stroke(int index) {
  // @@protoc_insertion_point(field_mutable:mozc.commands.Input.TouchEvent.stroke)
  return stroke_.Mutable(index);
}
::mozc::commands::Input_TouchPosition* Input_TouchEvent::add_stroke() {
  // @@protoc_insertion_point(field_add:mozc.commands.Input.TouchEvent.stroke)
  return stroke_.Add();
}
::google::protobuf::RepeatedPtrField< ::mozc::commands::Input_TouchPosition >*
Input_TouchEvent::mutable_stroke() {
  // @@protoc_insertion_point(field_mutable_list:mozc.commands.Input.TouchEvent.stroke)
  return &stroke_;
}
const ::google::protobuf::RepeatedPtrField< ::mozc::commands::Input_TouchPosition >&
Input_TouchEvent::stroke() const {
  // @@protoc_insertion_point(field_list:mozc.commands.Input.TouchEvent.stroke)
  return stroke_;
}

// -------------------------------------------------------------------

// Input

// required .mozc.commands.Input.CommandType type = 1;
bool Input::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Input::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
void Input::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void Input::clear_type() {
  type_ = 0;
  clear_has_type();
}
 ::mozc::commands::Input_CommandType Input::type() const {
  // @@protoc_insertion_point(field_get:mozc.commands.Input.type)
  return static_cast< ::mozc::commands::Input_CommandType >(type_);
}
 void Input::set_type(::mozc::commands::Input_CommandType value) {
  assert(::mozc::commands::Input_CommandType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:mozc.commands.Input.type)
}

// optional uint64 id = 2;
bool Input::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Input::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
void Input::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void Input::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
 ::google::protobuf::uint64 Input::id() const {
  // @@protoc_insertion_point(field_get:mozc.commands.Input.id)
  return id_;
}
 void Input::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:mozc.commands.Input.id)
}

// optional .mozc.commands.KeyEvent key = 3;
bool Input::has_key() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Input::set_has_key() {
  _has_bits_[0] |= 0x00000004u;
}
void Input::clear_has_key() {
  _has_bits_[0] &= ~0x00000004u;
}
void Input::clear_key() {
  if (key_ != NULL) key_->::mozc::commands::KeyEvent::Clear();
  clear_has_key();
}
const ::mozc::commands::KeyEvent& Input::key() const {
  // @@protoc_insertion_point(field_get:mozc.commands.Input.key)
  return key_ != NULL ? *key_ : *default_instance_->key_;
}
::mozc::commands::KeyEvent* Input::mutable_key() {
  set_has_key();
  if (key_ == NULL) {
    key_ = new ::mozc::commands::KeyEvent;
  }
  // @@protoc_insertion_point(field_mutable:mozc.commands.Input.key)
  return key_;
}
::mozc::commands::KeyEvent* Input::release_key() {
  // @@protoc_insertion_point(field_release:mozc.commands.Input.key)
  clear_has_key();
  ::mozc::commands::KeyEvent* temp = key_;
  key_ = NULL;
  return temp;
}
void Input::set_allocated_key(::mozc::commands::KeyEvent* key) {
  delete key_;
  key_ = key;
  if (key) {
    set_has_key();
  } else {
    clear_has_key();
  }
  // @@protoc_insertion_point(field_set_allocated:mozc.commands.Input.key)
}

// optional .mozc.commands.SessionCommand command = 4;
bool Input::has_command() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Input::set_has_command() {
  _has_bits_[0] |= 0x00000008u;
}
void Input::clear_has_command() {
  _has_bits_[0] &= ~0x00000008u;
}
void Input::clear_command() {
  if (command_ != NULL) command_->::mozc::commands::SessionCommand::Clear();
  clear_has_command();
}
const ::mozc::commands::SessionCommand& Input::command() const {
  // @@protoc_insertion_point(field_get:mozc.commands.Input.command)
  return command_ != NULL ? *command_ : *default_instance_->command_;
}
::mozc::commands::SessionCommand* Input::mutable_command() {
  set_has_command();
  if (command_ == NULL) {
    command_ = new ::mozc::commands::SessionCommand;
  }
  // @@protoc_insertion_point(field_mutable:mozc.commands.Input.command)
  return command_;
}
::mozc::commands::SessionCommand* Input::release_command() {
  // @@protoc_insertion_point(field_release:mozc.commands.Input.command)
  clear_has_command();
  ::mozc::commands::SessionCommand* temp = command_;
  command_ = NULL;
  return temp;
}
void Input::set_allocated_command(::mozc::commands::SessionCommand* command) {
  delete command_;
  command_ = command;
  if (command) {
    set_has_command();
  } else {
    clear_has_command();
  }
  // @@protoc_insertion_point(field_set_allocated:mozc.commands.Input.command)
}

// optional .mozc.config.Config config = 5;
bool Input::has_config() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Input::set_has_config() {
  _has_bits_[0] |= 0x00000010u;
}
void Input::clear_has_config() {
  _has_bits_[0] &= ~0x00000010u;
}
void Input::clear_config() {
  if (config_ != NULL) config_->::mozc::config::Config::Clear();
  clear_has_config();
}
const ::mozc::config::Config& Input::config() const {
  // @@protoc_insertion_point(field_get:mozc.commands.Input.config)
  return config_ != NULL ? *config_ : *default_instance_->config_;
}
::mozc::config::Config* Input::mutable_config() {
  set_has_config();
  if (config_ == NULL) {
    config_ = new ::mozc::config::Config;
  }
  // @@protoc_insertion_point(field_mutable:mozc.commands.Input.config)
  return config_;
}
::mozc::config::Config* Input::release_config() {
  // @@protoc_insertion_point(field_release:mozc.commands.Input.config)
  clear_has_config();
  ::mozc::config::Config* temp = config_;
  config_ = NULL;
  return temp;
}
void Input::set_allocated_config(::mozc::config::Config* config) {
  delete config_;
  config_ = config;
  if (config) {
    set_has_config();
  } else {
    clear_has_config();
  }
  // @@protoc_insertion_point(field_set_allocated:mozc.commands.Input.config)
}

// optional .mozc.commands.Context context = 6;
bool Input::has_context() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Input::set_has_context() {
  _has_bits_[0] |= 0x00000020u;
}
void Input::clear_has_context() {
  _has_bits_[0] &= ~0x00000020u;
}
void Input::clear_context() {
  if (context_ != NULL) context_->::mozc::commands::Context::Clear();
  clear_has_context();
}
const ::mozc::commands::Context& Input::context() const {
  // @@protoc_insertion_point(field_get:mozc.commands.Input.context)
  return context_ != NULL ? *context_ : *default_instance_->context_;
}
::mozc::commands::Context* Input::mutable_context() {
  set_has_context();
  if (context_ == NULL) {
    context_ = new ::mozc::commands::Context;
  }
  // @@protoc_insertion_point(field_mutable:mozc.commands.Input.context)
  return context_;
}
::mozc::commands::Context* Input::release_context() {
  // @@protoc_insertion_point(field_release:mozc.commands.Input.context)
  clear_has_context();
  ::mozc::commands::Context* temp = context_;
  context_ = NULL;
  return temp;
}
void Input::set_allocated_context(::mozc::commands::Context* context) {
  delete context_;
  context_ = context;
  if (context) {
    set_has_context();
  } else {
    clear_has_context();
  }
  // @@protoc_insertion_point(field_set_allocated:mozc.commands.Input.context)
}

// optional .mozc.commands.Capability capability = 7;
bool Input::has_capability() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Input::set_has_capability() {
  _has_bits_[0] |= 0x00000040u;
}
void Input::clear_has_capability() {
  _has_bits_[0] &= ~0x00000040u;
}
void Input::clear_capability() {
  if (capability_ != NULL) capability_->::mozc::commands::Capability::Clear();
  clear_has_capability();
}
const ::mozc::commands::Capability& Input::capability() const {
  // @@protoc_insertion_point(field_get:mozc.commands.Input.capability)
  return capability_ != NULL ? *capability_ : *default_instance_->capability_;
}
::mozc::commands::Capability* Input::mutable_capability() {
  set_has_capability();
  if (capability_ == NULL) {
    capability_ = new ::mozc::commands::Capability;
  }
  // @@protoc_insertion_point(field_mutable:mozc.commands.Input.capability)
  return capability_;
}
::mozc::commands::Capability* Input::release_capability() {
  // @@protoc_insertion_point(field_release:mozc.commands.Input.capability)
  clear_has_capability();
  ::mozc::commands::Capability* temp = capability_;
  capability_ = NULL;
  return temp;
}
void Input::set_allocated_capability(::mozc::commands::Capability* capability) {
  delete capability_;
  capability_ = capability;
  if (capability) {
    set_has_capability();
  } else {
    clear_has_capability();
  }
  // @@protoc_insertion_point(field_set_allocated:mozc.commands.Input.capability)
}

// optional .mozc.commands.ApplicationInfo application_info = 8;
bool Input::has_application_info() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Input::set_has_application_info() {
  _has_bits_[0] |= 0x00000080u;
}
void Input::clear_has_application_info() {
  _has_bits_[0] &= ~0x00000080u;
}
void Input::clear_application_info() {
  if (application_info_ != NULL) application_info_->::mozc::commands::ApplicationInfo::Clear();
  clear_has_application_info();
}
const ::mozc::commands::ApplicationInfo& Input::application_info() const {
  // @@protoc_insertion_point(field_get:mozc.commands.Input.application_info)
  return application_info_ != NULL ? *application_info_ : *default_instance_->application_info_;
}
::mozc::commands::ApplicationInfo* Input::mutable_application_info() {
  set_has_application_info();
  if (application_info_ == NULL) {
    application_info_ = new ::mozc::commands::ApplicationInfo;
  }
  // @@protoc_insertion_point(field_mutable:mozc.commands.Input.application_info)
  return application_info_;
}
::mozc::commands::ApplicationInfo* Input::release_application_info() {
  // @@protoc_insertion_point(field_release:mozc.commands.Input.application_info)
  clear_has_application_info();
  ::mozc::commands::ApplicationInfo* temp = application_info_;
  application_info_ = NULL;
  return temp;
}
void Input::set_allocated_application_info(::mozc::commands::ApplicationInfo* application_info) {
  delete application_info_;
  application_info_ = application_info;
  if (application_info) {
    set_has_application_info();
  } else {
    clear_has_application_info();
  }
  // @@protoc_insertion_point(field_set_allocated:mozc.commands.Input.application_info)
}

// optional .mozc.commands.Request request = 9;
bool Input::has_request() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Input::set_has_request() {
  _has_bits_[0] |= 0x00000100u;
}
void Input::clear_has_request() {
  _has_bits_[0] &= ~0x00000100u;
}
void Input::clear_request() {
  if (request_ != NULL) request_->::mozc::commands::Request::Clear();
  clear_has_request();
}
const ::mozc::commands::Request& Input::request() const {
  // @@protoc_insertion_point(field_get:mozc.commands.Input.request)
  return request_ != NULL ? *request_ : *default_instance_->request_;
}
::mozc::commands::Request* Input::mutable_request() {
  set_has_request();
  if (request_ == NULL) {
    request_ = new ::mozc::commands::Request;
  }
  // @@protoc_insertion_point(field_mutable:mozc.commands.Input.request)
  return request_;
}
::mozc::commands::Request* Input::release_request() {
  // @@protoc_insertion_point(field_release:mozc.commands.Input.request)
  clear_has_request();
  ::mozc::commands::Request* temp = request_;
  request_ = NULL;
  return temp;
}
void Input::set_allocated_request(::mozc::commands::Request* request) {
  delete request_;
  request_ = request;
  if (request) {
    set_has_request();
  } else {
    clear_has_request();
  }
  // @@protoc_insertion_point(field_set_allocated:mozc.commands.Input.request)
}

// optional .mozc.commands.GenericStorageEntry storage_entry = 10;
bool Input::has_storage_entry() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void Input::set_has_storage_entry() {
  _has_bits_[0] |= 0x00000200u;
}
void Input::clear_has_storage_entry() {
  _has_bits_[0] &= ~0x00000200u;
}
void Input::clear_storage_entry() {
  if (storage_entry_ != NULL) storage_entry_->::mozc::commands::GenericStorageEntry::Clear();
  clear_has_storage_entry();
}
const ::mozc::commands::GenericStorageEntry& Input::storage_entry() const {
  // @@protoc_insertion_point(field_get:mozc.commands.Input.storage_entry)
  return storage_entry_ != NULL ? *storage_entry_ : *default_instance_->storage_entry_;
}
::mozc::commands::GenericStorageEntry* Input::mutable_storage_entry() {
  set_has_storage_entry();
  if (storage_entry_ == NULL) {
    storage_entry_ = new ::mozc::commands::GenericStorageEntry;
  }
  // @@protoc_insertion_point(field_mutable:mozc.commands.Input.storage_entry)
  return storage_entry_;
}
::mozc::commands::GenericStorageEntry* Input::release_storage_entry() {
  // @@protoc_insertion_point(field_release:mozc.commands.Input.storage_entry)
  clear_has_storage_entry();
  ::mozc::commands::GenericStorageEntry* temp = storage_entry_;
  storage_entry_ = NULL;
  return temp;
}
void Input::set_allocated_storage_entry(::mozc::commands::GenericStorageEntry* storage_entry) {
  delete storage_entry_;
  storage_entry_ = storage_entry;
  if (storage_entry) {
    set_has_storage_entry();
  } else {
    clear_has_storage_entry();
  }
  // @@protoc_insertion_point(field_set_allocated:mozc.commands.Input.storage_entry)
}

// repeated .mozc.commands.Input.TouchEvent touch_events = 12;
int Input::touch_events_size() const {
  return touch_events_.size();
}
void Input::clear_touch_events() {
  touch_events_.Clear();
}
const ::mozc::commands::Input_TouchEvent& Input::touch_events(int index) const {
  // @@protoc_insertion_point(field_get:mozc.commands.Input.touch_events)
  return touch_events_.Get(index);
}
::mozc::commands::Input_TouchEvent* Input::mutable_touch_events(int index) {
  // @@protoc_insertion_point(field_mutable:mozc.commands.Input.touch_events)
  return touch_events_.Mutable(index);
}
::mozc::commands::Input_TouchEvent* Input::add_touch_events() {
  // @@protoc_insertion_point(field_add:mozc.commands.Input.touch_events)
  return touch_events_.Add();
}
::google::protobuf::RepeatedPtrField< ::mozc::commands::Input_TouchEvent >*
Input::mutable_touch_events() {
  // @@protoc_insertion_point(field_mutable_list:mozc.commands.Input.touch_events)
  return &touch_events_;
}
const ::google::protobuf::RepeatedPtrField< ::mozc::commands::Input_TouchEvent >&
Input::touch_events() const {
  // @@protoc_insertion_point(field_list:mozc.commands.Input.touch_events)
  return touch_events_;
}

// optional .mozc.user_dictionary.UserDictionaryCommand user_dictionary_command = 13;
bool Input::has_user_dictionary_command() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void Input::set_has_user_dictionary_command() {
  _has_bits_[0] |= 0x00000800u;
}
void Input::clear_has_user_dictionary_command() {
  _has_bits_[0] &= ~0x00000800u;
}
void Input::clear_user_dictionary_command() {
  if (user_dictionary_command_ != NULL) user_dictionary_command_->::mozc::user_dictionary::UserDictionaryCommand::Clear();
  clear_has_user_dictionary_command();
}
const ::mozc::user_dictionary::UserDictionaryCommand& Input::user_dictionary_command() const {
  // @@protoc_insertion_point(field_get:mozc.commands.Input.user_dictionary_command)
  return user_dictionary_command_ != NULL ? *user_dictionary_command_ : *default_instance_->user_dictionary_command_;
}
::mozc::user_dictionary::UserDictionaryCommand* Input::mutable_user_dictionary_command() {
  set_has_user_dictionary_command();
  if (user_dictionary_command_ == NULL) {
    user_dictionary_command_ = new ::mozc::user_dictionary::UserDictionaryCommand;
  }
  // @@protoc_insertion_point(field_mutable:mozc.commands.Input.user_dictionary_command)
  return user_dictionary_command_;
}
::mozc::user_dictionary::UserDictionaryCommand* Input::release_user_dictionary_command() {
  // @@protoc_insertion_point(field_release:mozc.commands.Input.user_dictionary_command)
  clear_has_user_dictionary_command();
  ::mozc::user_dictionary::UserDictionaryCommand* temp = user_dictionary_command_;
  user_dictionary_command_ = NULL;
  return temp;
}
void Input::set_allocated_user_dictionary_command(::mozc::user_dictionary::UserDictionaryCommand* user_dictionary_command) {
  delete user_dictionary_command_;
  user_dictionary_command_ = user_dictionary_command;
  if (user_dictionary_command) {
    set_has_user_dictionary_command();
  } else {
    clear_has_user_dictionary_command();
  }
  // @@protoc_insertion_point(field_set_allocated:mozc.commands.Input.user_dictionary_command)
}

// optional bool request_suggestion = 14 [default = true];
bool Input::has_request_suggestion() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void Input::set_has_request_suggestion() {
  _has_bits_[0] |= 0x00001000u;
}
void Input::clear_has_request_suggestion() {
  _has_bits_[0] &= ~0x00001000u;
}
void Input::clear_request_suggestion() {
  request_suggestion_ = true;
  clear_has_request_suggestion();
}
 bool Input::request_suggestion() const {
  // @@protoc_insertion_point(field_get:mozc.commands.Input.request_suggestion)
  return request_suggestion_;
}
 void Input::set_request_suggestion(bool value) {
  set_has_request_suggestion();
  request_suggestion_ = value;
  // @@protoc_insertion_point(field_set:mozc.commands.Input.request_suggestion)
}

// optional .mozc.EngineReloadRequest engine_reload_request = 15;
bool Input::has_engine_reload_request() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void Input::set_has_engine_reload_request() {
  _has_bits_[0] |= 0x00002000u;
}
void Input::clear_has_engine_reload_request() {
  _has_bits_[0] &= ~0x00002000u;
}
void Input::clear_engine_reload_request() {
  if (engine_reload_request_ != NULL) engine_reload_request_->::mozc::EngineReloadRequest::Clear();
  clear_has_engine_reload_request();
}
const ::mozc::EngineReloadRequest& Input::engine_reload_request() const {
  // @@protoc_insertion_point(field_get:mozc.commands.Input.engine_reload_request)
  return engine_reload_request_ != NULL ? *engine_reload_request_ : *default_instance_->engine_reload_request_;
}
::mozc::EngineReloadRequest* Input::mutable_engine_reload_request() {
  set_has_engine_reload_request();
  if (engine_reload_request_ == NULL) {
    engine_reload_request_ = new ::mozc::EngineReloadRequest;
  }
  // @@protoc_insertion_point(field_mutable:mozc.commands.Input.engine_reload_request)
  return engine_reload_request_;
}
::mozc::EngineReloadRequest* Input::release_engine_reload_request() {
  // @@protoc_insertion_point(field_release:mozc.commands.Input.engine_reload_request)
  clear_has_engine_reload_request();
  ::mozc::EngineReloadRequest* temp = engine_reload_request_;
  engine_reload_request_ = NULL;
  return temp;
}
void Input::set_allocated_engine_reload_request(::mozc::EngineReloadRequest* engine_reload_request) {
  delete engine_reload_request_;
  engine_reload_request_ = engine_reload_request;
  if (engine_reload_request) {
    set_has_engine_reload_request();
  } else {
    clear_has_engine_reload_request();
  }
  // @@protoc_insertion_point(field_set_allocated:mozc.commands.Input.engine_reload_request)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* Result_ResultType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Result_ResultType_descriptor_;
}
bool Result_ResultType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Result_ResultType Result::NONE;
const Result_ResultType Result::STRING;
const Result_ResultType Result::ResultType_MIN;
const Result_ResultType Result::ResultType_MAX;
const int Result::ResultType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Result::kTypeFieldNumber;
const int Result::kValueFieldNumber;
const int Result::kKeyFieldNumber;
const int Result::kCursorOffsetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Result::Result()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mozc.commands.Result)
}

void Result::InitAsDefaultInstance() {
}

Result::Result(const Result& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mozc.commands.Result)
}

void Result::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 0;
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cursor_offset_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Result::~Result() {
  // @@protoc_insertion_point(destructor:mozc.commands.Result)
  SharedDtor();
}

void Result::SharedDtor() {
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Result_descriptor_;
}

const Result& Result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2fcommands_2eproto();
  return *default_instance_;
}

Result* Result::default_instance_ = NULL;

Result* Result::New(::google::protobuf::Arena* arena) const {
  Result* n = new Result;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Result::Clear() {
// @@protoc_insertion_point(message_clear_start:mozc.commands.Result)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Result, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Result*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 15u) {
    ZR_(type_, cursor_offset_);
    if (has_value()) {
      value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_key()) {
      key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mozc.commands.Result)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .mozc.commands.Result.ResultType type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mozc::commands::Result_ResultType_IsValid(value)) {
            set_type(static_cast< ::mozc::commands::Result_ResultType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // required string value = 2;
      case 2: {
        if (tag == 18) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mozc.commands.Result.value");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_key;
        break;
      }

      // optional string key = 3;
      case 3: {
        if (tag == 26) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mozc.commands.Result.key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_cursor_offset;
        break;
      }

      // optional int32 cursor_offset = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_cursor_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cursor_offset_)));
          set_has_cursor_offset();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mozc.commands.Result)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mozc.commands.Result)
  return false;
#undef DO_
}

void Result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mozc.commands.Result)
  // required .mozc.commands.Result.ResultType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mozc.commands.Result.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  // optional string key = 3;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mozc.commands.Result.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->key(), output);
  }

  // optional int32 cursor_offset = 4 [default = 0];
  if (has_cursor_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->cursor_offset(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mozc.commands.Result)
}

::google::protobuf::uint8* Result::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mozc.commands.Result)
  // required .mozc.commands.Result.ResultType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mozc.commands.Result.value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  // optional string key = 3;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mozc.commands.Result.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->key(), target);
  }

  // optional int32 cursor_offset = 4 [default = 0];
  if (has_cursor_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->cursor_offset(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mozc.commands.Result)
  return target;
}

int Result::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:mozc.commands.Result)
  int total_size = 0;

  if (has_type()) {
    // required .mozc.commands.Result.ResultType type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  if (has_value()) {
    // required string value = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->value());
  }

  return total_size;
}
int Result::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:mozc.commands.Result)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .mozc.commands.Result.ResultType type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());

    // required string value = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->value());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[2 / 32] & 12u) {
    // optional string key = 3;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // optional int32 cursor_offset = 4 [default = 0];
    if (has_cursor_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cursor_offset());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Result::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mozc.commands.Result)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Result* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Result>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mozc.commands.Result)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mozc.commands.Result)
    MergeFrom(*source);
  }
}

void Result::MergeFrom(const Result& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mozc.commands.Result)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_value()) {
      set_has_value();
      value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
    }
    if (from.has_key()) {
      set_has_key();
      key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
    }
    if (from.has_cursor_offset()) {
      set_cursor_offset(from.cursor_offset());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Result::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mozc.commands.Result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Result::CopyFrom(const Result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mozc.commands.Result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Result::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Result::Swap(Result* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Result::InternalSwap(Result* other) {
  std::swap(type_, other->type_);
  value_.Swap(&other->value_);
  key_.Swap(&other->key_);
  std::swap(cursor_offset_, other->cursor_offset_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Result_descriptor_;
  metadata.reflection = Result_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Result

// required .mozc.commands.Result.ResultType type = 1;
bool Result::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Result::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
void Result::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void Result::clear_type() {
  type_ = 0;
  clear_has_type();
}
 ::mozc::commands::Result_ResultType Result::type() const {
  // @@protoc_insertion_point(field_get:mozc.commands.Result.type)
  return static_cast< ::mozc::commands::Result_ResultType >(type_);
}
 void Result::set_type(::mozc::commands::Result_ResultType value) {
  assert(::mozc::commands::Result_ResultType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:mozc.commands.Result.type)
}

// required string value = 2;
bool Result::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Result::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
void Result::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
void Result::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}
 const ::std::string& Result::value() const {
  // @@protoc_insertion_point(field_get:mozc.commands.Result.value)
  return value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Result::set_value(const ::std::string& value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mozc.commands.Result.value)
}
 void Result::set_value(const char* value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mozc.commands.Result.value)
}
 void Result::set_value(const char* value, size_t size) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mozc.commands.Result.value)
}
 ::std::string* Result::mutable_value() {
  set_has_value();
  // @@protoc_insertion_point(field_mutable:mozc.commands.Result.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Result::release_value() {
  // @@protoc_insertion_point(field_release:mozc.commands.Result.value)
  clear_has_value();
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Result::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    set_has_value();
  } else {
    clear_has_value();
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:mozc.commands.Result.value)
}

// optional string key = 3;
bool Result::has_key() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Result::set_has_key() {
  _has_bits_[0] |= 0x00000004u;
}
void Result::clear_has_key() {
  _has_bits_[0] &= ~0x00000004u;
}
void Result::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
 const ::std::string& Result::key() const {
  // @@protoc_insertion_point(field_get:mozc.commands.Result.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Result::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mozc.commands.Result.key)
}
 void Result::set_key(const char* value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mozc.commands.Result.key)
}
 void Result::set_key(const char* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mozc.commands.Result.key)
}
 ::std::string* Result::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:mozc.commands.Result.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Result::release_key() {
  // @@protoc_insertion_point(field_release:mozc.commands.Result.key)
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Result::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:mozc.commands.Result.key)
}

// optional int32 cursor_offset = 4 [default = 0];
bool Result::has_cursor_offset() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Result::set_has_cursor_offset() {
  _has_bits_[0] |= 0x00000008u;
}
void Result::clear_has_cursor_offset() {
  _has_bits_[0] &= ~0x00000008u;
}
void Result::clear_cursor_offset() {
  cursor_offset_ = 0;
  clear_has_cursor_offset();
}
 ::google::protobuf::int32 Result::cursor_offset() const {
  // @@protoc_insertion_point(field_get:mozc.commands.Result.cursor_offset)
  return cursor_offset_;
}
 void Result::set_cursor_offset(::google::protobuf::int32 value) {
  set_has_cursor_offset();
  cursor_offset_ = value;
  // @@protoc_insertion_point(field_set:mozc.commands.Result.cursor_offset)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* Preedit_Segment_Annotation_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Preedit_Segment_Annotation_descriptor_;
}
bool Preedit_Segment_Annotation_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Preedit_Segment_Annotation Preedit_Segment::NONE;
const Preedit_Segment_Annotation Preedit_Segment::UNDERLINE;
const Preedit_Segment_Annotation Preedit_Segment::HIGHLIGHT;
const Preedit_Segment_Annotation Preedit_Segment::Annotation_MIN;
const Preedit_Segment_Annotation Preedit_Segment::Annotation_MAX;
const int Preedit_Segment::Annotation_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Preedit_Segment::kAnnotationFieldNumber;
const int Preedit_Segment::kValueFieldNumber;
const int Preedit_Segment::kValueLengthFieldNumber;
const int Preedit_Segment::kKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Preedit_Segment::Preedit_Segment()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mozc.commands.Preedit.Segment)
}

void Preedit_Segment::InitAsDefaultInstance() {
}

Preedit_Segment::Preedit_Segment(const Preedit_Segment& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mozc.commands.Preedit.Segment)
}

void Preedit_Segment::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  annotation_ = 0;
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_length_ = 0u;
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Preedit_Segment::~Preedit_Segment() {
  // @@protoc_insertion_point(destructor:mozc.commands.Preedit.Segment)
  SharedDtor();
}

void Preedit_Segment::SharedDtor() {
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Preedit_Segment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Preedit_Segment::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Preedit_Segment_descriptor_;
}

const Preedit_Segment& Preedit_Segment::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2fcommands_2eproto();
  return *default_instance_;
}

Preedit_Segment* Preedit_Segment::default_instance_ = NULL;

Preedit_Segment* Preedit_Segment::New(::google::protobuf::Arena* arena) const {
  Preedit_Segment* n = new Preedit_Segment;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Preedit_Segment::Clear() {
// @@protoc_insertion_point(message_clear_start:mozc.commands.Preedit.Segment)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Preedit_Segment, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Preedit_Segment*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 15u) {
    ZR_(annotation_, value_length_);
    if (has_value()) {
      value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_key()) {
      key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Preedit_Segment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mozc.commands.Preedit.Segment)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .mozc.commands.Preedit.Segment.Annotation annotation = 3;
      case 3: {
        if (tag == 24) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mozc::commands::Preedit_Segment_Annotation_IsValid(value)) {
            set_annotation(static_cast< ::mozc::commands::Preedit_Segment_Annotation >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_value;
        break;
      }

      // required string value = 4;
      case 4: {
        if (tag == 34) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mozc.commands.Preedit.Segment.value");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_value_length;
        break;
      }

      // required uint32 value_length = 5;
      case 5: {
        if (tag == 40) {
         parse_value_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_length_)));
          set_has_value_length();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_key;
        break;
      }

      // optional string key = 6;
      case 6: {
        if (tag == 50) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mozc.commands.Preedit.Segment.key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mozc.commands.Preedit.Segment)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mozc.commands.Preedit.Segment)
  return false;
#undef DO_
}

void Preedit_Segment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mozc.commands.Preedit.Segment)
  // required .mozc.commands.Preedit.Segment.Annotation annotation = 3;
  if (has_annotation()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->annotation(), output);
  }

  // required string value = 4;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mozc.commands.Preedit.Segment.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->value(), output);
  }

  // required uint32 value_length = 5;
  if (has_value_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->value_length(), output);
  }

  // optional string key = 6;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mozc.commands.Preedit.Segment.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->key(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mozc.commands.Preedit.Segment)
}

::google::protobuf::uint8* Preedit_Segment::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mozc.commands.Preedit.Segment)
  // required .mozc.commands.Preedit.Segment.Annotation annotation = 3;
  if (has_annotation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->annotation(), target);
  }

  // required string value = 4;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mozc.commands.Preedit.Segment.value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->value(), target);
  }

  // required uint32 value_length = 5;
  if (has_value_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->value_length(), target);
  }

  // optional string key = 6;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mozc.commands.Preedit.Segment.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->key(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mozc.commands.Preedit.Segment)
  return target;
}

int Preedit_Segment::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:mozc.commands.Preedit.Segment)
  int total_size = 0;

  if (has_annotation()) {
    // required .mozc.commands.Preedit.Segment.Annotation annotation = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->annotation());
  }

  if (has_value()) {
    // required string value = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->value());
  }

  if (has_value_length()) {
    // required uint32 value_length = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->value_length());
  }

  return total_size;
}
int Preedit_Segment::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:mozc.commands.Preedit.Segment)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .mozc.commands.Preedit.Segment.Annotation annotation = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->annotation());

    // required string value = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->value());

    // required uint32 value_length = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->value_length());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional string key = 6;
  if (has_key()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Preedit_Segment::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mozc.commands.Preedit.Segment)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Preedit_Segment* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Preedit_Segment>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mozc.commands.Preedit.Segment)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mozc.commands.Preedit.Segment)
    MergeFrom(*source);
  }
}

void Preedit_Segment::MergeFrom(const Preedit_Segment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mozc.commands.Preedit.Segment)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_annotation()) {
      set_annotation(from.annotation());
    }
    if (from.has_value()) {
      set_has_value();
      value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
    }
    if (from.has_value_length()) {
      set_value_length(from.value_length());
    }
    if (from.has_key()) {
      set_has_key();
      key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Preedit_Segment::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mozc.commands.Preedit.Segment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Preedit_Segment::CopyFrom(const Preedit_Segment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mozc.commands.Preedit.Segment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Preedit_Segment::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Preedit_Segment::Swap(Preedit_Segment* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Preedit_Segment::InternalSwap(Preedit_Segment* other) {
  std::swap(annotation_, other->annotation_);
  value_.Swap(&other->value_);
  std::swap(value_length_, other->value_length_);
  key_.Swap(&other->key_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Preedit_Segment::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Preedit_Segment_descriptor_;
  metadata.reflection = Preedit_Segment_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Preedit::kCursorFieldNumber;
const int Preedit::kSegmentFieldNumber;
const int Preedit::kHighlightedPositionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Preedit::Preedit()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mozc.commands.Preedit)
}

void Preedit::InitAsDefaultInstance() {
}

Preedit::Preedit(const Preedit& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mozc.commands.Preedit)
}

void Preedit::SharedCtor() {
  _cached_size_ = 0;
  cursor_ = 0u;
  highlighted_position_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Preedit::~Preedit() {
  // @@protoc_insertion_point(destructor:mozc.commands.Preedit)
  SharedDtor();
}

void Preedit::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Preedit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Preedit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Preedit_descriptor_;
}

const Preedit& Preedit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2fcommands_2eproto();
  return *default_instance_;
}

Preedit* Preedit::default_instance_ = NULL;

Preedit* Preedit::New(::google::protobuf::Arena* arena) const {
  Preedit* n = new Preedit;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Preedit::Clear() {
// @@protoc_insertion_point(message_clear_start:mozc.commands.Preedit)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Preedit, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Preedit*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(cursor_, highlighted_position_);

#undef ZR_HELPER_
#undef ZR_

  segment_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Preedit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mozc.commands.Preedit)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 cursor = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cursor_)));
          set_has_cursor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(19)) goto parse_segment;
        break;
      }

      // repeated group Segment = 2 { ... };
      case 2: {
        if (tag == 19) {
         parse_segment:
          DO_(input->IncrementRecursionDepth());
         parse_loop_segment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadGroupNoVirtualNoRecursionDepth(
                2, input, add_segment()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(19)) goto parse_loop_segment;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(24)) goto parse_highlighted_position;
        break;
      }

      // optional uint32 highlighted_position = 3;
      case 3: {
        if (tag == 24) {
         parse_highlighted_position:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &highlighted_position_)));
          set_has_highlighted_position();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mozc.commands.Preedit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mozc.commands.Preedit)
  return false;
#undef DO_
}

void Preedit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mozc.commands.Preedit)
  // required uint32 cursor = 1;
  if (has_cursor()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cursor(), output);
  }

  // repeated group Segment = 2 { ... };
  for (unsigned int i = 0, n = this->segment_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteGroupMaybeToArray(
      2, this->segment(i), output);
  }

  // optional uint32 highlighted_position = 3;
  if (has_highlighted_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->highlighted_position(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mozc.commands.Preedit)
}

::google::protobuf::uint8* Preedit::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mozc.commands.Preedit)
  // required uint32 cursor = 1;
  if (has_cursor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cursor(), target);
  }

  // repeated group Segment = 2 { ... };
  for (unsigned int i = 0, n = this->segment_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteGroupNoVirtualToArray(
        2, this->segment(i), false, target);
  }

  // optional uint32 highlighted_position = 3;
  if (has_highlighted_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->highlighted_position(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mozc.commands.Preedit)
  return target;
}

int Preedit::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:mozc.commands.Preedit)
  int total_size = 0;

  // required uint32 cursor = 1;
  if (has_cursor()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->cursor());
  }
  // optional uint32 highlighted_position = 3;
  if (has_highlighted_position()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->highlighted_position());
  }

  // repeated group Segment = 2 { ... };
  total_size += 2 * this->segment_size();
  for (int i = 0; i < this->segment_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::GroupSizeNoVirtual(
        this->segment(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Preedit::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mozc.commands.Preedit)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Preedit* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Preedit>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mozc.commands.Preedit)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mozc.commands.Preedit)
    MergeFrom(*source);
  }
}

void Preedit::MergeFrom(const Preedit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mozc.commands.Preedit)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  segment_.MergeFrom(from.segment_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cursor()) {
      set_cursor(from.cursor());
    }
    if (from.has_highlighted_position()) {
      set_highlighted_position(from.highlighted_position());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Preedit::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mozc.commands.Preedit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Preedit::CopyFrom(const Preedit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mozc.commands.Preedit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Preedit::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->segment())) return false;
  return true;
}

void Preedit::Swap(Preedit* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Preedit::InternalSwap(Preedit* other) {
  std::swap(cursor_, other->cursor_);
  segment_.UnsafeArenaSwap(&other->segment_);
  std::swap(highlighted_position_, other->highlighted_position_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Preedit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Preedit_descriptor_;
  metadata.reflection = Preedit_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Preedit_Segment

// required .mozc.commands.Preedit.Segment.Annotation annotation = 3;
bool Preedit_Segment::has_annotation() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Preedit_Segment::set_has_annotation() {
  _has_bits_[0] |= 0x00000001u;
}
void Preedit_Segment::clear_has_annotation() {
  _has_bits_[0] &= ~0x00000001u;
}
void Preedit_Segment::clear_annotation() {
  annotation_ = 0;
  clear_has_annotation();
}
 ::mozc::commands::Preedit_Segment_Annotation Preedit_Segment::annotation() const {
  // @@protoc_insertion_point(field_get:mozc.commands.Preedit.Segment.annotation)
  return static_cast< ::mozc::commands::Preedit_Segment_Annotation >(annotation_);
}
 void Preedit_Segment::set_annotation(::mozc::commands::Preedit_Segment_Annotation value) {
  assert(::mozc::commands::Preedit_Segment_Annotation_IsValid(value));
  set_has_annotation();
  annotation_ = value;
  // @@protoc_insertion_point(field_set:mozc.commands.Preedit.Segment.annotation)
}

// required string value = 4;
bool Preedit_Segment::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Preedit_Segment::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
void Preedit_Segment::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
void Preedit_Segment::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}
 const ::std::string& Preedit_Segment::value() const {
  // @@protoc_insertion_point(field_get:mozc.commands.Preedit.Segment.value)
  return value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Preedit_Segment::set_value(const ::std::string& value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mozc.commands.Preedit.Segment.value)
}
 void Preedit_Segment::set_value(const char* value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mozc.commands.Preedit.Segment.value)
}
 void Preedit_Segment::set_value(const char* value, size_t size) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mozc.commands.Preedit.Segment.value)
}
 ::std::string* Preedit_Segment::mutable_value() {
  set_has_value();
  // @@protoc_insertion_point(field_mutable:mozc.commands.Preedit.Segment.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Preedit_Segment::release_value() {
  // @@protoc_insertion_point(field_release:mozc.commands.Preedit.Segment.value)
  clear_has_value();
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Preedit_Segment::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    set_has_value();
  } else {
    clear_has_value();
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:mozc.commands.Preedit.Segment.value)
}

// required uint32 value_length = 5;
bool Preedit_Segment::has_value_length() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Preedit_Segment::set_has_value_length() {
  _has_bits_[0] |= 0x00000004u;
}
void Preedit_Segment::clear_has_value_length() {
  _has_bits_[0] &= ~0x00000004u;
}
void Preedit_Segment::clear_value_length() {
  value_length_ = 0u;
  clear_has_value_length();
}
 ::google::protobuf::uint32 Preedit_Segment::value_length() const {
  // @@protoc_insertion_point(field_get:mozc.commands.Preedit.Segment.value_length)
  return value_length_;
}
 void Preedit_Segment::set_value_length(::google::protobuf::uint32 value) {
  set_has_value_length();
  value_length_ = value;
  // @@protoc_insertion_point(field_set:mozc.commands.Preedit.Segment.value_length)
}

// optional string key = 6;
bool Preedit_Segment::has_key() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Preedit_Segment::set_has_key() {
  _has_bits_[0] |= 0x00000008u;
}
void Preedit_Segment::clear_has_key() {
  _has_bits_[0] &= ~0x00000008u;
}
void Preedit_Segment::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
 const ::std::string& Preedit_Segment::key() const {
  // @@protoc_insertion_point(field_get:mozc.commands.Preedit.Segment.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Preedit_Segment::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mozc.commands.Preedit.Segment.key)
}
 void Preedit_Segment::set_key(const char* value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mozc.commands.Preedit.Segment.key)
}
 void Preedit_Segment::set_key(const char* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mozc.commands.Preedit.Segment.key)
}
 ::std::string* Preedit_Segment::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:mozc.commands.Preedit.Segment.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Preedit_Segment::release_key() {
  // @@protoc_insertion_point(field_release:mozc.commands.Preedit.Segment.key)
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Preedit_Segment::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:mozc.commands.Preedit.Segment.key)
}

// -------------------------------------------------------------------

// Preedit

// required uint32 cursor = 1;
bool Preedit::has_cursor() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Preedit::set_has_cursor() {
  _has_bits_[0] |= 0x00000001u;
}
void Preedit::clear_has_cursor() {
  _has_bits_[0] &= ~0x00000001u;
}
void Preedit::clear_cursor() {
  cursor_ = 0u;
  clear_has_cursor();
}
 ::google::protobuf::uint32 Preedit::cursor() const {
  // @@protoc_insertion_point(field_get:mozc.commands.Preedit.cursor)
  return cursor_;
}
 void Preedit::set_cursor(::google::protobuf::uint32 value) {
  set_has_cursor();
  cursor_ = value;
  // @@protoc_insertion_point(field_set:mozc.commands.Preedit.cursor)
}

// repeated group Segment = 2 { ... };
int Preedit::segment_size() const {
  return segment_.size();
}
void Preedit::clear_segment() {
  segment_.Clear();
}
const ::mozc::commands::Preedit_Segment& Preedit::segment(int index) const {
  // @@protoc_insertion_point(field_get:mozc.commands.Preedit.segment)
  return segment_.Get(index);
}
::mozc::commands::Preedit_Segment* Preedit::mutable_segment(int index) {
  // @@protoc_insertion_point(field_mutable:mozc.commands.Preedit.segment)
  return segment_.Mutable(index);
}
::mozc::commands::Preedit_Segment* Preedit::add_segment() {
  // @@protoc_insertion_point(field_add:mozc.commands.Preedit.segment)
  return segment_.Add();
}
::google::protobuf::RepeatedPtrField< ::mozc::commands::Preedit_Segment >*
Preedit::mutable_segment() {
  // @@protoc_insertion_point(field_mutable_list:mozc.commands.Preedit.segment)
  return &segment_;
}
const ::google::protobuf::RepeatedPtrField< ::mozc::commands::Preedit_Segment >&
Preedit::segment() const {
  // @@protoc_insertion_point(field_list:mozc.commands.Preedit.segment)
  return segment_;
}

// optional uint32 highlighted_position = 3;
bool Preedit::has_highlighted_position() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Preedit::set_has_highlighted_position() {
  _has_bits_[0] |= 0x00000004u;
}
void Preedit::clear_has_highlighted_position() {
  _has_bits_[0] &= ~0x00000004u;
}
void Preedit::clear_highlighted_position() {
  highlighted_position_ = 0u;
  clear_has_highlighted_position();
}
 ::google::protobuf::uint32 Preedit::highlighted_position() const {
  // @@protoc_insertion_point(field_get:mozc.commands.Preedit.highlighted_position)
  return highlighted_position_;
}
 void Preedit::set_highlighted_position(::google::protobuf::uint32 value) {
  set_has_highlighted_position();
  highlighted_position_ = value;
  // @@protoc_insertion_point(field_set:mozc.commands.Preedit.highlighted_position)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Status::kActivatedFieldNumber;
const int Status::kModeFieldNumber;
const int Status::kComebackModeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Status::Status()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mozc.commands.Status)
}

void Status::InitAsDefaultInstance() {
}

Status::Status(const Status& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mozc.commands.Status)
}

void Status::SharedCtor() {
  _cached_size_ = 0;
  activated_ = false;
  mode_ = 0;
  comeback_mode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Status::~Status() {
  // @@protoc_insertion_point(destructor:mozc.commands.Status)
  SharedDtor();
}

void Status::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Status::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Status::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Status_descriptor_;
}

const Status& Status::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2fcommands_2eproto();
  return *default_instance_;
}

Status* Status::default_instance_ = NULL;

Status* Status::New(::google::protobuf::Arena* arena) const {
  Status* n = new Status;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Status::Clear() {
// @@protoc_insertion_point(message_clear_start:mozc.commands.Status)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Status, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Status*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(activated_, comeback_mode_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Status::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mozc.commands.Status)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool activated = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &activated_)));
          set_has_activated();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_mode;
        break;
      }

      // optional .mozc.commands.CompositionMode mode = 2;
      case 2: {
        if (tag == 16) {
         parse_mode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mozc::commands::CompositionMode_IsValid(value)) {
            set_mode(static_cast< ::mozc::commands::CompositionMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_comeback_mode;
        break;
      }

      // optional .mozc.commands.CompositionMode comeback_mode = 3;
      case 3: {
        if (tag == 24) {
         parse_comeback_mode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mozc::commands::CompositionMode_IsValid(value)) {
            set_comeback_mode(static_cast< ::mozc::commands::CompositionMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mozc.commands.Status)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mozc.commands.Status)
  return false;
#undef DO_
}

void Status::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mozc.commands.Status)
  // optional bool activated = 1;
  if (has_activated()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->activated(), output);
  }

  // optional .mozc.commands.CompositionMode mode = 2;
  if (has_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->mode(), output);
  }

  // optional .mozc.commands.CompositionMode comeback_mode = 3;
  if (has_comeback_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->comeback_mode(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mozc.commands.Status)
}

::google::protobuf::uint8* Status::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mozc.commands.Status)
  // optional bool activated = 1;
  if (has_activated()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->activated(), target);
  }

  // optional .mozc.commands.CompositionMode mode = 2;
  if (has_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->mode(), target);
  }

  // optional .mozc.commands.CompositionMode comeback_mode = 3;
  if (has_comeback_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->comeback_mode(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mozc.commands.Status)
  return target;
}

int Status::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:mozc.commands.Status)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional bool activated = 1;
    if (has_activated()) {
      total_size += 1 + 1;
    }

    // optional .mozc.commands.CompositionMode mode = 2;
    if (has_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mode());
    }

    // optional .mozc.commands.CompositionMode comeback_mode = 3;
    if (has_comeback_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->comeback_mode());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Status::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mozc.commands.Status)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Status* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Status>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mozc.commands.Status)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mozc.commands.Status)
    MergeFrom(*source);
  }
}

void Status::MergeFrom(const Status& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mozc.commands.Status)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_activated()) {
      set_activated(from.activated());
    }
    if (from.has_mode()) {
      set_mode(from.mode());
    }
    if (from.has_comeback_mode()) {
      set_comeback_mode(from.comeback_mode());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Status::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mozc.commands.Status)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Status::CopyFrom(const Status& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mozc.commands.Status)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Status::IsInitialized() const {

  return true;
}

void Status::Swap(Status* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Status::InternalSwap(Status* other) {
  std::swap(activated_, other->activated_);
  std::swap(mode_, other->mode_);
  std::swap(comeback_mode_, other->comeback_mode_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Status::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Status_descriptor_;
  metadata.reflection = Status_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Status

// optional bool activated = 1;
bool Status::has_activated() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Status::set_has_activated() {
  _has_bits_[0] |= 0x00000001u;
}
void Status::clear_has_activated() {
  _has_bits_[0] &= ~0x00000001u;
}
void Status::clear_activated() {
  activated_ = false;
  clear_has_activated();
}
 bool Status::activated() const {
  // @@protoc_insertion_point(field_get:mozc.commands.Status.activated)
  return activated_;
}
 void Status::set_activated(bool value) {
  set_has_activated();
  activated_ = value;
  // @@protoc_insertion_point(field_set:mozc.commands.Status.activated)
}

// optional .mozc.commands.CompositionMode mode = 2;
bool Status::has_mode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Status::set_has_mode() {
  _has_bits_[0] |= 0x00000002u;
}
void Status::clear_has_mode() {
  _has_bits_[0] &= ~0x00000002u;
}
void Status::clear_mode() {
  mode_ = 0;
  clear_has_mode();
}
 ::mozc::commands::CompositionMode Status::mode() const {
  // @@protoc_insertion_point(field_get:mozc.commands.Status.mode)
  return static_cast< ::mozc::commands::CompositionMode >(mode_);
}
 void Status::set_mode(::mozc::commands::CompositionMode value) {
  assert(::mozc::commands::CompositionMode_IsValid(value));
  set_has_mode();
  mode_ = value;
  // @@protoc_insertion_point(field_set:mozc.commands.Status.mode)
}

// optional .mozc.commands.CompositionMode comeback_mode = 3;
bool Status::has_comeback_mode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Status::set_has_comeback_mode() {
  _has_bits_[0] |= 0x00000004u;
}
void Status::clear_has_comeback_mode() {
  _has_bits_[0] &= ~0x00000004u;
}
void Status::clear_comeback_mode() {
  comeback_mode_ = 0;
  clear_has_comeback_mode();
}
 ::mozc::commands::CompositionMode Status::comeback_mode() const {
  // @@protoc_insertion_point(field_get:mozc.commands.Status.comeback_mode)
  return static_cast< ::mozc::commands::CompositionMode >(comeback_mode_);
}
 void Status::set_comeback_mode(::mozc::commands::CompositionMode value) {
  assert(::mozc::commands::CompositionMode_IsValid(value));
  set_has_comeback_mode();
  comeback_mode_ = value;
  // @@protoc_insertion_point(field_set:mozc.commands.Status.comeback_mode)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeletionRange::kOffsetFieldNumber;
const int DeletionRange::kLengthFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeletionRange::DeletionRange()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mozc.commands.DeletionRange)
}

void DeletionRange::InitAsDefaultInstance() {
}

DeletionRange::DeletionRange(const DeletionRange& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mozc.commands.DeletionRange)
}

void DeletionRange::SharedCtor() {
  _cached_size_ = 0;
  offset_ = 0;
  length_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeletionRange::~DeletionRange() {
  // @@protoc_insertion_point(destructor:mozc.commands.DeletionRange)
  SharedDtor();
}

void DeletionRange::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DeletionRange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeletionRange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeletionRange_descriptor_;
}

const DeletionRange& DeletionRange::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2fcommands_2eproto();
  return *default_instance_;
}

DeletionRange* DeletionRange::default_instance_ = NULL;

DeletionRange* DeletionRange::New(::google::protobuf::Arena* arena) const {
  DeletionRange* n = new DeletionRange;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DeletionRange::Clear() {
// @@protoc_insertion_point(message_clear_start:mozc.commands.DeletionRange)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(DeletionRange, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<DeletionRange*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(offset_, length_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool DeletionRange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mozc.commands.DeletionRange)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 offset = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_length;
        break;
      }

      // optional int32 length = 2;
      case 2: {
        if (tag == 16) {
         parse_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &length_)));
          set_has_length();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mozc.commands.DeletionRange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mozc.commands.DeletionRange)
  return false;
#undef DO_
}

void DeletionRange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mozc.commands.DeletionRange)
  // optional int32 offset = 1;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->offset(), output);
  }

  // optional int32 length = 2;
  if (has_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->length(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mozc.commands.DeletionRange)
}

::google::protobuf::uint8* DeletionRange::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mozc.commands.DeletionRange)
  // optional int32 offset = 1;
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->offset(), target);
  }

  // optional int32 length = 2;
  if (has_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->length(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mozc.commands.DeletionRange)
  return target;
}

int DeletionRange::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:mozc.commands.DeletionRange)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional int32 offset = 1;
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->offset());
    }

    // optional int32 length = 2;
    if (has_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->length());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeletionRange::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mozc.commands.DeletionRange)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const DeletionRange* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DeletionRange>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mozc.commands.DeletionRange)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mozc.commands.DeletionRange)
    MergeFrom(*source);
  }
}

void DeletionRange::MergeFrom(const DeletionRange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mozc.commands.DeletionRange)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_offset()) {
      set_offset(from.offset());
    }
    if (from.has_length()) {
      set_length(from.length());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void DeletionRange::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mozc.commands.DeletionRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeletionRange::CopyFrom(const DeletionRange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mozc.commands.DeletionRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeletionRange::IsInitialized() const {

  return true;
}

void DeletionRange::Swap(DeletionRange* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeletionRange::InternalSwap(DeletionRange* other) {
  std::swap(offset_, other->offset_);
  std::swap(length_, other->length_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DeletionRange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeletionRange_descriptor_;
  metadata.reflection = DeletionRange_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DeletionRange

// optional int32 offset = 1;
bool DeletionRange::has_offset() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DeletionRange::set_has_offset() {
  _has_bits_[0] |= 0x00000001u;
}
void DeletionRange::clear_has_offset() {
  _has_bits_[0] &= ~0x00000001u;
}
void DeletionRange::clear_offset() {
  offset_ = 0;
  clear_has_offset();
}
 ::google::protobuf::int32 DeletionRange::offset() const {
  // @@protoc_insertion_point(field_get:mozc.commands.DeletionRange.offset)
  return offset_;
}
 void DeletionRange::set_offset(::google::protobuf::int32 value) {
  set_has_offset();
  offset_ = value;
  // @@protoc_insertion_point(field_set:mozc.commands.DeletionRange.offset)
}

// optional int32 length = 2;
bool DeletionRange::has_length() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DeletionRange::set_has_length() {
  _has_bits_[0] |= 0x00000002u;
}
void DeletionRange::clear_has_length() {
  _has_bits_[0] &= ~0x00000002u;
}
void DeletionRange::clear_length() {
  length_ = 0;
  clear_has_length();
}
 ::google::protobuf::int32 DeletionRange::length() const {
  // @@protoc_insertion_point(field_get:mozc.commands.DeletionRange.length)
  return length_;
}
 void DeletionRange::set_length(::google::protobuf::int32 value) {
  set_has_length();
  length_ = value;
  // @@protoc_insertion_point(field_set:mozc.commands.DeletionRange.length)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* Output_PreeditMethod_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Output_PreeditMethod_descriptor_;
}
bool Output_PreeditMethod_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Output_PreeditMethod Output::ASCII;
const Output_PreeditMethod Output::KANA;
const Output_PreeditMethod Output::PreeditMethod_MIN;
const Output_PreeditMethod Output::PreeditMethod_MAX;
const int Output::PreeditMethod_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Output_ErrorCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Output_ErrorCode_descriptor_;
}
bool Output_ErrorCode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Output_ErrorCode Output::SESSION_SUCCESS;
const Output_ErrorCode Output::SESSION_FAILURE;
const Output_ErrorCode Output::ErrorCode_MIN;
const Output_ErrorCode Output::ErrorCode_MAX;
const int Output::ErrorCode_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Output_ToolMode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Output_ToolMode_descriptor_;
}
bool Output_ToolMode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Output_ToolMode Output::NO_TOOL;
const Output_ToolMode Output::CONFIG_DIALOG;
const Output_ToolMode Output::DICTIONARY_TOOL;
const Output_ToolMode Output::WORD_REGISTER_DIALOG;
const Output_ToolMode Output::ToolMode_MIN;
const Output_ToolMode Output::ToolMode_MAX;
const int Output::ToolMode_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Output_Callback::kSessionCommandFieldNumber;
const int Output_Callback::kDelayMillisecFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Output_Callback::Output_Callback()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mozc.commands.Output.Callback)
}

void Output_Callback::InitAsDefaultInstance() {
  session_command_ = const_cast< ::mozc::commands::SessionCommand*>(&::mozc::commands::SessionCommand::default_instance());
}

Output_Callback::Output_Callback(const Output_Callback& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mozc.commands.Output.Callback)
}

void Output_Callback::SharedCtor() {
  _cached_size_ = 0;
  session_command_ = NULL;
  delay_millisec_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Output_Callback::~Output_Callback() {
  // @@protoc_insertion_point(destructor:mozc.commands.Output.Callback)
  SharedDtor();
}

void Output_Callback::SharedDtor() {
  if (this != default_instance_) {
    delete session_command_;
  }
}

void Output_Callback::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Output_Callback::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Output_Callback_descriptor_;
}

const Output_Callback& Output_Callback::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2fcommands_2eproto();
  return *default_instance_;
}

Output_Callback* Output_Callback::default_instance_ = NULL;

Output_Callback* Output_Callback::New(::google::protobuf::Arena* arena) const {
  Output_Callback* n = new Output_Callback;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Output_Callback::Clear() {
// @@protoc_insertion_point(message_clear_start:mozc.commands.Output.Callback)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_session_command()) {
      if (session_command_ != NULL) session_command_->::mozc::commands::SessionCommand::Clear();
    }
    delay_millisec_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Output_Callback::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mozc.commands.Output.Callback)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .mozc.commands.SessionCommand session_command = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_session_command()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_delay_millisec;
        break;
      }

      // optional uint32 delay_millisec = 2;
      case 2: {
        if (tag == 16) {
         parse_delay_millisec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &delay_millisec_)));
          set_has_delay_millisec();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mozc.commands.Output.Callback)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mozc.commands.Output.Callback)
  return false;
#undef DO_
}

void Output_Callback::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mozc.commands.Output.Callback)
  // optional .mozc.commands.SessionCommand session_command = 1;
  if (has_session_command()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->session_command_, output);
  }

  // optional uint32 delay_millisec = 2;
  if (has_delay_millisec()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->delay_millisec(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mozc.commands.Output.Callback)
}

::google::protobuf::uint8* Output_Callback::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mozc.commands.Output.Callback)
  // optional .mozc.commands.SessionCommand session_command = 1;
  if (has_session_command()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->session_command_, false, target);
  }

  // optional uint32 delay_millisec = 2;
  if (has_delay_millisec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->delay_millisec(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mozc.commands.Output.Callback)
  return target;
}

int Output_Callback::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:mozc.commands.Output.Callback)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional .mozc.commands.SessionCommand session_command = 1;
    if (has_session_command()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->session_command_);
    }

    // optional uint32 delay_millisec = 2;
    if (has_delay_millisec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->delay_millisec());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Output_Callback::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mozc.commands.Output.Callback)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Output_Callback* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Output_Callback>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mozc.commands.Output.Callback)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mozc.commands.Output.Callback)
    MergeFrom(*source);
  }
}

void Output_Callback::MergeFrom(const Output_Callback& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mozc.commands.Output.Callback)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_session_command()) {
      mutable_session_command()->::mozc::commands::SessionCommand::MergeFrom(from.session_command());
    }
    if (from.has_delay_millisec()) {
      set_delay_millisec(from.delay_millisec());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Output_Callback::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mozc.commands.Output.Callback)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Output_Callback::CopyFrom(const Output_Callback& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mozc.commands.Output.Callback)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Output_Callback::IsInitialized() const {

  if (has_session_command()) {
    if (!this->session_command_->IsInitialized()) return false;
  }
  return true;
}

void Output_Callback::Swap(Output_Callback* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Output_Callback::InternalSwap(Output_Callback* other) {
  std::swap(session_command_, other->session_command_);
  std::swap(delay_millisec_, other->delay_millisec_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Output_Callback::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Output_Callback_descriptor_;
  metadata.reflection = Output_Callback_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Output::kIdFieldNumber;
const int Output::kModeFieldNumber;
const int Output::kConsumedFieldNumber;
const int Output::kResultFieldNumber;
const int Output::kPreeditFieldNumber;
const int Output::kCandidatesFieldNumber;
const int Output::kKeyFieldNumber;
const int Output::kUrlFieldNumber;
const int Output::kConfigFieldNumber;
const int Output::kPreeditMethodFieldNumber;
const int Output::kErrorCodeFieldNumber;
const int Output::kStatusFieldNumber;
const int Output::kAllCandidateWordsFieldNumber;
const int Output::kDeletionRangeFieldNumber;
const int Output::kLaunchToolModeFieldNumber;
const int Output::kCallbackFieldNumber;
const int Output::kStorageEntryFieldNumber;
const int Output::kUserDictionaryCommandStatusFieldNumber;
const int Output::kEngineReloadResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Output::Output()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mozc.commands.Output)
}

void Output::InitAsDefaultInstance() {
  result_ = const_cast< ::mozc::commands::Result*>(&::mozc::commands::Result::default_instance());
  preedit_ = const_cast< ::mozc::commands::Preedit*>(&::mozc::commands::Preedit::default_instance());
  candidates_ = const_cast< ::mozc::commands::Candidates*>(&::mozc::commands::Candidates::default_instance());
  key_ = const_cast< ::mozc::commands::KeyEvent*>(&::mozc::commands::KeyEvent::default_instance());
  config_ = const_cast< ::mozc::config::Config*>(&::mozc::config::Config::default_instance());
  status_ = const_cast< ::mozc::commands::Status*>(&::mozc::commands::Status::default_instance());
  all_candidate_words_ = const_cast< ::mozc::commands::CandidateList*>(&::mozc::commands::CandidateList::default_instance());
  deletion_range_ = const_cast< ::mozc::commands::DeletionRange*>(&::mozc::commands::DeletionRange::default_instance());
  callback_ = const_cast< ::mozc::commands::Output_Callback*>(&::mozc::commands::Output_Callback::default_instance());
  storage_entry_ = const_cast< ::mozc::commands::GenericStorageEntry*>(&::mozc::commands::GenericStorageEntry::default_instance());
  user_dictionary_command_status_ = const_cast< ::mozc::user_dictionary::UserDictionaryCommandStatus*>(&::mozc::user_dictionary::UserDictionaryCommandStatus::default_instance());
  engine_reload_response_ = const_cast< ::mozc::EngineReloadResponse*>(&::mozc::EngineReloadResponse::default_instance());
}

Output::Output(const Output& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mozc.commands.Output)
}

void Output::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  mode_ = 0;
  consumed_ = false;
  result_ = NULL;
  preedit_ = NULL;
  candidates_ = NULL;
  key_ = NULL;
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  config_ = NULL;
  preedit_method_ = 0;
  error_code_ = 0;
  status_ = NULL;
  all_candidate_words_ = NULL;
  deletion_range_ = NULL;
  launch_tool_mode_ = 0;
  callback_ = NULL;
  storage_entry_ = NULL;
  user_dictionary_command_status_ = NULL;
  engine_reload_response_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Output::~Output() {
  // @@protoc_insertion_point(destructor:mozc.commands.Output)
  SharedDtor();
}

void Output::SharedDtor() {
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete result_;
    delete preedit_;
    delete candidates_;
    delete key_;
    delete config_;
    delete status_;
    delete all_candidate_words_;
    delete deletion_range_;
    delete callback_;
    delete storage_entry_;
    delete user_dictionary_command_status_;
    delete engine_reload_response_;
  }
}

void Output::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Output::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Output_descriptor_;
}

const Output& Output::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2fcommands_2eproto();
  return *default_instance_;
}

Output* Output::default_instance_ = NULL;

Output* Output::New(::google::protobuf::Arena* arena) const {
  Output* n = new Output;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Output::Clear() {
// @@protoc_insertion_point(message_clear_start:mozc.commands.Output)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Output, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Output*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(id_, consumed_);
    if (has_result()) {
      if (result_ != NULL) result_->::mozc::commands::Result::Clear();
    }
    if (has_preedit()) {
      if (preedit_ != NULL) preedit_->::mozc::commands::Preedit::Clear();
    }
    if (has_candidates()) {
      if (candidates_ != NULL) candidates_->::mozc::commands::Candidates::Clear();
    }
    if (has_key()) {
      if (key_ != NULL) key_->::mozc::commands::KeyEvent::Clear();
    }
    if (has_url()) {
      url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ZR_(preedit_method_, error_code_);
    if (has_config()) {
      if (config_ != NULL) config_->::mozc::config::Config::Clear();
    }
    if (has_status()) {
      if (status_ != NULL) status_->::mozc::commands::Status::Clear();
    }
    if (has_all_candidate_words()) {
      if (all_candidate_words_ != NULL) all_candidate_words_->::mozc::commands::CandidateList::Clear();
    }
    if (has_deletion_range()) {
      if (deletion_range_ != NULL) deletion_range_->::mozc::commands::DeletionRange::Clear();
    }
    launch_tool_mode_ = 0;
    if (has_callback()) {
      if (callback_ != NULL) callback_->::mozc::commands::Output_Callback::Clear();
    }
  }
  if (_has_bits_[16 / 32] & 458752u) {
    if (has_storage_entry()) {
      if (storage_entry_ != NULL) storage_entry_->::mozc::commands::GenericStorageEntry::Clear();
    }
    if (has_user_dictionary_command_status()) {
      if (user_dictionary_command_status_ != NULL) user_dictionary_command_status_->::mozc::user_dictionary::UserDictionaryCommandStatus::Clear();
    }
    if (has_engine_reload_response()) {
      if (engine_reload_response_ != NULL) engine_reload_response_->::mozc::EngineReloadResponse::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Output::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mozc.commands.Output)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_mode;
        break;
      }

      // optional .mozc.commands.CompositionMode mode = 2;
      case 2: {
        if (tag == 16) {
         parse_mode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mozc::commands::CompositionMode_IsValid(value)) {
            set_mode(static_cast< ::mozc::commands::CompositionMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_consumed;
        break;
      }

      // optional bool consumed = 3;
      case 3: {
        if (tag == 24) {
         parse_consumed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &consumed_)));
          set_has_consumed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_result;
        break;
      }

      // optional .mozc.commands.Result result = 4;
      case 4: {
        if (tag == 34) {
         parse_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_preedit;
        break;
      }

      // optional .mozc.commands.Preedit preedit = 5;
      case 5: {
        if (tag == 42) {
         parse_preedit:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_preedit()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_candidates;
        break;
      }

      // optional .mozc.commands.Candidates candidates = 6;
      case 6: {
        if (tag == 50) {
         parse_candidates:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_candidates()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_key;
        break;
      }

      // optional .mozc.commands.KeyEvent key = 7;
      case 7: {
        if (tag == 58) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_url;
        break;
      }

      // optional string url = 8;
      case 8: {
        if (tag == 66) {
         parse_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), this->url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mozc.commands.Output.url");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_config;
        break;
      }

      // optional .mozc.config.Config config = 9;
      case 9: {
        if (tag == 74) {
         parse_config:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_config()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_preedit_method;
        break;
      }

      // optional .mozc.commands.Output.PreeditMethod preedit_method = 10 [default = ASCII];
      case 10: {
        if (tag == 80) {
         parse_preedit_method:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mozc::commands::Output_PreeditMethod_IsValid(value)) {
            set_preedit_method(static_cast< ::mozc::commands::Output_PreeditMethod >(value));
          } else {
            mutable_unknown_fields()->AddVarint(10, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_error_code;
        break;
      }

      // optional .mozc.commands.Output.ErrorCode error_code = 11 [default = SESSION_SUCCESS];
      case 11: {
        if (tag == 88) {
         parse_error_code:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mozc::commands::Output_ErrorCode_IsValid(value)) {
            set_error_code(static_cast< ::mozc::commands::Output_ErrorCode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(11, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_status;
        break;
      }

      // optional .mozc.commands.Status status = 13;
      case 13: {
        if (tag == 106) {
         parse_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_status()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_all_candidate_words;
        break;
      }

      // optional .mozc.commands.CandidateList all_candidate_words = 14;
      case 14: {
        if (tag == 114) {
         parse_all_candidate_words:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_all_candidate_words()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_deletion_range;
        break;
      }

      // optional .mozc.commands.DeletionRange deletion_range = 16;
      case 16: {
        if (tag == 130) {
         parse_deletion_range:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_deletion_range()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_launch_tool_mode;
        break;
      }

      // optional .mozc.commands.Output.ToolMode launch_tool_mode = 17 [default = NO_TOOL];
      case 17: {
        if (tag == 136) {
         parse_launch_tool_mode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mozc::commands::Output_ToolMode_IsValid(value)) {
            set_launch_tool_mode(static_cast< ::mozc::commands::Output_ToolMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(17, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_callback;
        break;
      }

      // optional .mozc.commands.Output.Callback callback = 18;
      case 18: {
        if (tag == 146) {
         parse_callback:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_callback()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(154)) goto parse_storage_entry;
        break;
      }

      // optional .mozc.commands.GenericStorageEntry storage_entry = 19;
      case 19: {
        if (tag == 154) {
         parse_storage_entry:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_storage_entry()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(170)) goto parse_user_dictionary_command_status;
        break;
      }

      // optional .mozc.user_dictionary.UserDictionaryCommandStatus user_dictionary_command_status = 21;
      case 21: {
        if (tag == 170) {
         parse_user_dictionary_command_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_dictionary_command_status()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(178)) goto parse_engine_reload_response;
        break;
      }

      // optional .mozc.EngineReloadResponse engine_reload_response = 22;
      case 22: {
        if (tag == 178) {
         parse_engine_reload_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_engine_reload_response()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mozc.commands.Output)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mozc.commands.Output)
  return false;
#undef DO_
}

void Output::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mozc.commands.Output)
  // optional uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional .mozc.commands.CompositionMode mode = 2;
  if (has_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->mode(), output);
  }

  // optional bool consumed = 3;
  if (has_consumed()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->consumed(), output);
  }

  // optional .mozc.commands.Result result = 4;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->result_, output);
  }

  // optional .mozc.commands.Preedit preedit = 5;
  if (has_preedit()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->preedit_, output);
  }

  // optional .mozc.commands.Candidates candidates = 6;
  if (has_candidates()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->candidates_, output);
  }

  // optional .mozc.commands.KeyEvent key = 7;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->key_, output);
  }

  // optional string url = 8;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mozc.commands.Output.url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->url(), output);
  }

  // optional .mozc.config.Config config = 9;
  if (has_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->config_, output);
  }

  // optional .mozc.commands.Output.PreeditMethod preedit_method = 10 [default = ASCII];
  if (has_preedit_method()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->preedit_method(), output);
  }

  // optional .mozc.commands.Output.ErrorCode error_code = 11 [default = SESSION_SUCCESS];
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->error_code(), output);
  }

  // optional .mozc.commands.Status status = 13;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, *this->status_, output);
  }

  // optional .mozc.commands.CandidateList all_candidate_words = 14;
  if (has_all_candidate_words()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, *this->all_candidate_words_, output);
  }

  // optional .mozc.commands.DeletionRange deletion_range = 16;
  if (has_deletion_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, *this->deletion_range_, output);
  }

  // optional .mozc.commands.Output.ToolMode launch_tool_mode = 17 [default = NO_TOOL];
  if (has_launch_tool_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      17, this->launch_tool_mode(), output);
  }

  // optional .mozc.commands.Output.Callback callback = 18;
  if (has_callback()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, *this->callback_, output);
  }

  // optional .mozc.commands.GenericStorageEntry storage_entry = 19;
  if (has_storage_entry()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, *this->storage_entry_, output);
  }

  // optional .mozc.user_dictionary.UserDictionaryCommandStatus user_dictionary_command_status = 21;
  if (has_user_dictionary_command_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, *this->user_dictionary_command_status_, output);
  }

  // optional .mozc.EngineReloadResponse engine_reload_response = 22;
  if (has_engine_reload_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, *this->engine_reload_response_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mozc.commands.Output)
}

::google::protobuf::uint8* Output::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mozc.commands.Output)
  // optional uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // optional .mozc.commands.CompositionMode mode = 2;
  if (has_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->mode(), target);
  }

  // optional bool consumed = 3;
  if (has_consumed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->consumed(), target);
  }

  // optional .mozc.commands.Result result = 4;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->result_, false, target);
  }

  // optional .mozc.commands.Preedit preedit = 5;
  if (has_preedit()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->preedit_, false, target);
  }

  // optional .mozc.commands.Candidates candidates = 6;
  if (has_candidates()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->candidates_, false, target);
  }

  // optional .mozc.commands.KeyEvent key = 7;
  if (has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->key_, false, target);
  }

  // optional string url = 8;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mozc.commands.Output.url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->url(), target);
  }

  // optional .mozc.config.Config config = 9;
  if (has_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *this->config_, false, target);
  }

  // optional .mozc.commands.Output.PreeditMethod preedit_method = 10 [default = ASCII];
  if (has_preedit_method()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->preedit_method(), target);
  }

  // optional .mozc.commands.Output.ErrorCode error_code = 11 [default = SESSION_SUCCESS];
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      11, this->error_code(), target);
  }

  // optional .mozc.commands.Status status = 13;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        13, *this->status_, false, target);
  }

  // optional .mozc.commands.CandidateList all_candidate_words = 14;
  if (has_all_candidate_words()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        14, *this->all_candidate_words_, false, target);
  }

  // optional .mozc.commands.DeletionRange deletion_range = 16;
  if (has_deletion_range()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        16, *this->deletion_range_, false, target);
  }

  // optional .mozc.commands.Output.ToolMode launch_tool_mode = 17 [default = NO_TOOL];
  if (has_launch_tool_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      17, this->launch_tool_mode(), target);
  }

  // optional .mozc.commands.Output.Callback callback = 18;
  if (has_callback()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        18, *this->callback_, false, target);
  }

  // optional .mozc.commands.GenericStorageEntry storage_entry = 19;
  if (has_storage_entry()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        19, *this->storage_entry_, false, target);
  }

  // optional .mozc.user_dictionary.UserDictionaryCommandStatus user_dictionary_command_status = 21;
  if (has_user_dictionary_command_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        21, *this->user_dictionary_command_status_, false, target);
  }

  // optional .mozc.EngineReloadResponse engine_reload_response = 22;
  if (has_engine_reload_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        22, *this->engine_reload_response_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mozc.commands.Output)
  return target;
}

int Output::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:mozc.commands.Output)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional .mozc.commands.CompositionMode mode = 2;
    if (has_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mode());
    }

    // optional bool consumed = 3;
    if (has_consumed()) {
      total_size += 1 + 1;
    }

    // optional .mozc.commands.Result result = 4;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->result_);
    }

    // optional .mozc.commands.Preedit preedit = 5;
    if (has_preedit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->preedit_);
    }

    // optional .mozc.commands.Candidates candidates = 6;
    if (has_candidates()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->candidates_);
    }

    // optional .mozc.commands.KeyEvent key = 7;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->key_);
    }

    // optional string url = 8;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional .mozc.config.Config config = 9;
    if (has_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->config_);
    }

    // optional .mozc.commands.Output.PreeditMethod preedit_method = 10 [default = ASCII];
    if (has_preedit_method()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->preedit_method());
    }

    // optional .mozc.commands.Output.ErrorCode error_code = 11 [default = SESSION_SUCCESS];
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->error_code());
    }

    // optional .mozc.commands.Status status = 13;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->status_);
    }

    // optional .mozc.commands.CandidateList all_candidate_words = 14;
    if (has_all_candidate_words()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->all_candidate_words_);
    }

    // optional .mozc.commands.DeletionRange deletion_range = 16;
    if (has_deletion_range()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->deletion_range_);
    }

    // optional .mozc.commands.Output.ToolMode launch_tool_mode = 17 [default = NO_TOOL];
    if (has_launch_tool_mode()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->launch_tool_mode());
    }

    // optional .mozc.commands.Output.Callback callback = 18;
    if (has_callback()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->callback_);
    }

  }
  if (_has_bits_[16 / 32] & 458752u) {
    // optional .mozc.commands.GenericStorageEntry storage_entry = 19;
    if (has_storage_entry()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->storage_entry_);
    }

    // optional .mozc.user_dictionary.UserDictionaryCommandStatus user_dictionary_command_status = 21;
    if (has_user_dictionary_command_status()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->user_dictionary_command_status_);
    }

    // optional .mozc.EngineReloadResponse engine_reload_response = 22;
    if (has_engine_reload_response()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->engine_reload_response_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Output::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mozc.commands.Output)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Output* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Output>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mozc.commands.Output)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mozc.commands.Output)
    MergeFrom(*source);
  }
}

void Output::MergeFrom(const Output& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mozc.commands.Output)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_mode()) {
      set_mode(from.mode());
    }
    if (from.has_consumed()) {
      set_consumed(from.consumed());
    }
    if (from.has_result()) {
      mutable_result()->::mozc::commands::Result::MergeFrom(from.result());
    }
    if (from.has_preedit()) {
      mutable_preedit()->::mozc::commands::Preedit::MergeFrom(from.preedit());
    }
    if (from.has_candidates()) {
      mutable_candidates()->::mozc::commands::Candidates::MergeFrom(from.candidates());
    }
    if (from.has_key()) {
      mutable_key()->::mozc::commands::KeyEvent::MergeFrom(from.key());
    }
    if (from.has_url()) {
      set_has_url();
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_config()) {
      mutable_config()->::mozc::config::Config::MergeFrom(from.config());
    }
    if (from.has_preedit_method()) {
      set_preedit_method(from.preedit_method());
    }
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
    if (from.has_status()) {
      mutable_status()->::mozc::commands::Status::MergeFrom(from.status());
    }
    if (from.has_all_candidate_words()) {
      mutable_all_candidate_words()->::mozc::commands::CandidateList::MergeFrom(from.all_candidate_words());
    }
    if (from.has_deletion_range()) {
      mutable_deletion_range()->::mozc::commands::DeletionRange::MergeFrom(from.deletion_range());
    }
    if (from.has_launch_tool_mode()) {
      set_launch_tool_mode(from.launch_tool_mode());
    }
    if (from.has_callback()) {
      mutable_callback()->::mozc::commands::Output_Callback::MergeFrom(from.callback());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_storage_entry()) {
      mutable_storage_entry()->::mozc::commands::GenericStorageEntry::MergeFrom(from.storage_entry());
    }
    if (from.has_user_dictionary_command_status()) {
      mutable_user_dictionary_command_status()->::mozc::user_dictionary::UserDictionaryCommandStatus::MergeFrom(from.user_dictionary_command_status());
    }
    if (from.has_engine_reload_response()) {
      mutable_engine_reload_response()->::mozc::EngineReloadResponse::MergeFrom(from.engine_reload_response());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Output::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mozc.commands.Output)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Output::CopyFrom(const Output& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mozc.commands.Output)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Output::IsInitialized() const {

  if (has_result()) {
    if (!this->result_->IsInitialized()) return false;
  }
  if (has_preedit()) {
    if (!this->preedit_->IsInitialized()) return false;
  }
  if (has_candidates()) {
    if (!this->candidates_->IsInitialized()) return false;
  }
  if (has_callback()) {
    if (!this->callback_->IsInitialized()) return false;
  }
  if (has_user_dictionary_command_status()) {
    if (!this->user_dictionary_command_status_->IsInitialized()) return false;
  }
  if (has_engine_reload_response()) {
    if (!this->engine_reload_response_->IsInitialized()) return false;
  }
  return true;
}

void Output::Swap(Output* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Output::InternalSwap(Output* other) {
  std::swap(id_, other->id_);
  std::swap(mode_, other->mode_);
  std::swap(consumed_, other->consumed_);
  std::swap(result_, other->result_);
  std::swap(preedit_, other->preedit_);
  std::swap(candidates_, other->candidates_);
  std::swap(key_, other->key_);
  url_.Swap(&other->url_);
  std::swap(config_, other->config_);
  std::swap(preedit_method_, other->preedit_method_);
  std::swap(error_code_, other->error_code_);
  std::swap(status_, other->status_);
  std::swap(all_candidate_words_, other->all_candidate_words_);
  std::swap(deletion_range_, other->deletion_range_);
  std::swap(launch_tool_mode_, other->launch_tool_mode_);
  std::swap(callback_, other->callback_);
  std::swap(storage_entry_, other->storage_entry_);
  std::swap(user_dictionary_command_status_, other->user_dictionary_command_status_);
  std::swap(engine_reload_response_, other->engine_reload_response_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Output::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Output_descriptor_;
  metadata.reflection = Output_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Output_Callback

// optional .mozc.commands.SessionCommand session_command = 1;
bool Output_Callback::has_session_command() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Output_Callback::set_has_session_command() {
  _has_bits_[0] |= 0x00000001u;
}
void Output_Callback::clear_has_session_command() {
  _has_bits_[0] &= ~0x00000001u;
}
void Output_Callback::clear_session_command() {
  if (session_command_ != NULL) session_command_->::mozc::commands::SessionCommand::Clear();
  clear_has_session_command();
}
const ::mozc::commands::SessionCommand& Output_Callback::session_command() const {
  // @@protoc_insertion_point(field_get:mozc.commands.Output.Callback.session_command)
  return session_command_ != NULL ? *session_command_ : *default_instance_->session_command_;
}
::mozc::commands::SessionCommand* Output_Callback::mutable_session_command() {
  set_has_session_command();
  if (session_command_ == NULL) {
    session_command_ = new ::mozc::commands::SessionCommand;
  }
  // @@protoc_insertion_point(field_mutable:mozc.commands.Output.Callback.session_command)
  return session_command_;
}
::mozc::commands::SessionCommand* Output_Callback::release_session_command() {
  // @@protoc_insertion_point(field_release:mozc.commands.Output.Callback.session_command)
  clear_has_session_command();
  ::mozc::commands::SessionCommand* temp = session_command_;
  session_command_ = NULL;
  return temp;
}
void Output_Callback::set_allocated_session_command(::mozc::commands::SessionCommand* session_command) {
  delete session_command_;
  session_command_ = session_command;
  if (session_command) {
    set_has_session_command();
  } else {
    clear_has_session_command();
  }
  // @@protoc_insertion_point(field_set_allocated:mozc.commands.Output.Callback.session_command)
}

// optional uint32 delay_millisec = 2;
bool Output_Callback::has_delay_millisec() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Output_Callback::set_has_delay_millisec() {
  _has_bits_[0] |= 0x00000002u;
}
void Output_Callback::clear_has_delay_millisec() {
  _has_bits_[0] &= ~0x00000002u;
}
void Output_Callback::clear_delay_millisec() {
  delay_millisec_ = 0u;
  clear_has_delay_millisec();
}
 ::google::protobuf::uint32 Output_Callback::delay_millisec() const {
  // @@protoc_insertion_point(field_get:mozc.commands.Output.Callback.delay_millisec)
  return delay_millisec_;
}
 void Output_Callback::set_delay_millisec(::google::protobuf::uint32 value) {
  set_has_delay_millisec();
  delay_millisec_ = value;
  // @@protoc_insertion_point(field_set:mozc.commands.Output.Callback.delay_millisec)
}

// -------------------------------------------------------------------

// Output

// optional uint64 id = 1;
bool Output::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Output::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void Output::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void Output::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
 ::google::protobuf::uint64 Output::id() const {
  // @@protoc_insertion_point(field_get:mozc.commands.Output.id)
  return id_;
}
 void Output::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:mozc.commands.Output.id)
}

// optional .mozc.commands.CompositionMode mode = 2;
bool Output::has_mode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Output::set_has_mode() {
  _has_bits_[0] |= 0x00000002u;
}
void Output::clear_has_mode() {
  _has_bits_[0] &= ~0x00000002u;
}
void Output::clear_mode() {
  mode_ = 0;
  clear_has_mode();
}
 ::mozc::commands::CompositionMode Output::mode() const {
  // @@protoc_insertion_point(field_get:mozc.commands.Output.mode)
  return static_cast< ::mozc::commands::CompositionMode >(mode_);
}
 void Output::set_mode(::mozc::commands::CompositionMode value) {
  assert(::mozc::commands::CompositionMode_IsValid(value));
  set_has_mode();
  mode_ = value;
  // @@protoc_insertion_point(field_set:mozc.commands.Output.mode)
}

// optional bool consumed = 3;
bool Output::has_consumed() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Output::set_has_consumed() {
  _has_bits_[0] |= 0x00000004u;
}
void Output::clear_has_consumed() {
  _has_bits_[0] &= ~0x00000004u;
}
void Output::clear_consumed() {
  consumed_ = false;
  clear_has_consumed();
}
 bool Output::consumed() const {
  // @@protoc_insertion_point(field_get:mozc.commands.Output.consumed)
  return consumed_;
}
 void Output::set_consumed(bool value) {
  set_has_consumed();
  consumed_ = value;
  // @@protoc_insertion_point(field_set:mozc.commands.Output.consumed)
}

// optional .mozc.commands.Result result = 4;
bool Output::has_result() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Output::set_has_result() {
  _has_bits_[0] |= 0x00000008u;
}
void Output::clear_has_result() {
  _has_bits_[0] &= ~0x00000008u;
}
void Output::clear_result() {
  if (result_ != NULL) result_->::mozc::commands::Result::Clear();
  clear_has_result();
}
const ::mozc::commands::Result& Output::result() const {
  // @@protoc_insertion_point(field_get:mozc.commands.Output.result)
  return result_ != NULL ? *result_ : *default_instance_->result_;
}
::mozc::commands::Result* Output::mutable_result() {
  set_has_result();
  if (result_ == NULL) {
    result_ = new ::mozc::commands::Result;
  }
  // @@protoc_insertion_point(field_mutable:mozc.commands.Output.result)
  return result_;
}
::mozc::commands::Result* Output::release_result() {
  // @@protoc_insertion_point(field_release:mozc.commands.Output.result)
  clear_has_result();
  ::mozc::commands::Result* temp = result_;
  result_ = NULL;
  return temp;
}
void Output::set_allocated_result(::mozc::commands::Result* result) {
  delete result_;
  result_ = result;
  if (result) {
    set_has_result();
  } else {
    clear_has_result();
  }
  // @@protoc_insertion_point(field_set_allocated:mozc.commands.Output.result)
}

// optional .mozc.commands.Preedit preedit = 5;
bool Output::has_preedit() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Output::set_has_preedit() {
  _has_bits_[0] |= 0x00000010u;
}
void Output::clear_has_preedit() {
  _has_bits_[0] &= ~0x00000010u;
}
void Output::clear_preedit() {
  if (preedit_ != NULL) preedit_->::mozc::commands::Preedit::Clear();
  clear_has_preedit();
}
const ::mozc::commands::Preedit& Output::preedit() const {
  // @@protoc_insertion_point(field_get:mozc.commands.Output.preedit)
  return preedit_ != NULL ? *preedit_ : *default_instance_->preedit_;
}
::mozc::commands::Preedit* Output::mutable_preedit() {
  set_has_preedit();
  if (preedit_ == NULL) {
    preedit_ = new ::mozc::commands::Preedit;
  }
  // @@protoc_insertion_point(field_mutable:mozc.commands.Output.preedit)
  return preedit_;
}
::mozc::commands::Preedit* Output::release_preedit() {
  // @@protoc_insertion_point(field_release:mozc.commands.Output.preedit)
  clear_has_preedit();
  ::mozc::commands::Preedit* temp = preedit_;
  preedit_ = NULL;
  return temp;
}
void Output::set_allocated_preedit(::mozc::commands::Preedit* preedit) {
  delete preedit_;
  preedit_ = preedit;
  if (preedit) {
    set_has_preedit();
  } else {
    clear_has_preedit();
  }
  // @@protoc_insertion_point(field_set_allocated:mozc.commands.Output.preedit)
}

// optional .mozc.commands.Candidates candidates = 6;
bool Output::has_candidates() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Output::set_has_candidates() {
  _has_bits_[0] |= 0x00000020u;
}
void Output::clear_has_candidates() {
  _has_bits_[0] &= ~0x00000020u;
}
void Output::clear_candidates() {
  if (candidates_ != NULL) candidates_->::mozc::commands::Candidates::Clear();
  clear_has_candidates();
}
const ::mozc::commands::Candidates& Output::candidates() const {
  // @@protoc_insertion_point(field_get:mozc.commands.Output.candidates)
  return candidates_ != NULL ? *candidates_ : *default_instance_->candidates_;
}
::mozc::commands::Candidates* Output::mutable_candidates() {
  set_has_candidates();
  if (candidates_ == NULL) {
    candidates_ = new ::mozc::commands::Candidates;
  }
  // @@protoc_insertion_point(field_mutable:mozc.commands.Output.candidates)
  return candidates_;
}
::mozc::commands::Candidates* Output::release_candidates() {
  // @@protoc_insertion_point(field_release:mozc.commands.Output.candidates)
  clear_has_candidates();
  ::mozc::commands::Candidates* temp = candidates_;
  candidates_ = NULL;
  return temp;
}
void Output::set_allocated_candidates(::mozc::commands::Candidates* candidates) {
  delete candidates_;
  candidates_ = candidates;
  if (candidates) {
    set_has_candidates();
  } else {
    clear_has_candidates();
  }
  // @@protoc_insertion_point(field_set_allocated:mozc.commands.Output.candidates)
}

// optional .mozc.commands.KeyEvent key = 7;
bool Output::has_key() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Output::set_has_key() {
  _has_bits_[0] |= 0x00000040u;
}
void Output::clear_has_key() {
  _has_bits_[0] &= ~0x00000040u;
}
void Output::clear_key() {
  if (key_ != NULL) key_->::mozc::commands::KeyEvent::Clear();
  clear_has_key();
}
const ::mozc::commands::KeyEvent& Output::key() const {
  // @@protoc_insertion_point(field_get:mozc.commands.Output.key)
  return key_ != NULL ? *key_ : *default_instance_->key_;
}
::mozc::commands::KeyEvent* Output::mutable_key() {
  set_has_key();
  if (key_ == NULL) {
    key_ = new ::mozc::commands::KeyEvent;
  }
  // @@protoc_insertion_point(field_mutable:mozc.commands.Output.key)
  return key_;
}
::mozc::commands::KeyEvent* Output::release_key() {
  // @@protoc_insertion_point(field_release:mozc.commands.Output.key)
  clear_has_key();
  ::mozc::commands::KeyEvent* temp = key_;
  key_ = NULL;
  return temp;
}
void Output::set_allocated_key(::mozc::commands::KeyEvent* key) {
  delete key_;
  key_ = key;
  if (key) {
    set_has_key();
  } else {
    clear_has_key();
  }
  // @@protoc_insertion_point(field_set_allocated:mozc.commands.Output.key)
}

// optional string url = 8;
bool Output::has_url() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Output::set_has_url() {
  _has_bits_[0] |= 0x00000080u;
}
void Output::clear_has_url() {
  _has_bits_[0] &= ~0x00000080u;
}
void Output::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
 const ::std::string& Output::url() const {
  // @@protoc_insertion_point(field_get:mozc.commands.Output.url)
  return url_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Output::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mozc.commands.Output.url)
}
 void Output::set_url(const char* value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mozc.commands.Output.url)
}
 void Output::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mozc.commands.Output.url)
}
 ::std::string* Output::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:mozc.commands.Output.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Output::release_url() {
  // @@protoc_insertion_point(field_release:mozc.commands.Output.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Output::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:mozc.commands.Output.url)
}

// optional .mozc.config.Config config = 9;
bool Output::has_config() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Output::set_has_config() {
  _has_bits_[0] |= 0x00000100u;
}
void Output::clear_has_config() {
  _has_bits_[0] &= ~0x00000100u;
}
void Output::clear_config() {
  if (config_ != NULL) config_->::mozc::config::Config::Clear();
  clear_has_config();
}
const ::mozc::config::Config& Output::config() const {
  // @@protoc_insertion_point(field_get:mozc.commands.Output.config)
  return config_ != NULL ? *config_ : *default_instance_->config_;
}
::mozc::config::Config* Output::mutable_config() {
  set_has_config();
  if (config_ == NULL) {
    config_ = new ::mozc::config::Config;
  }
  // @@protoc_insertion_point(field_mutable:mozc.commands.Output.config)
  return config_;
}
::mozc::config::Config* Output::release_config() {
  // @@protoc_insertion_point(field_release:mozc.commands.Output.config)
  clear_has_config();
  ::mozc::config::Config* temp = config_;
  config_ = NULL;
  return temp;
}
void Output::set_allocated_config(::mozc::config::Config* config) {
  delete config_;
  config_ = config;
  if (config) {
    set_has_config();
  } else {
    clear_has_config();
  }
  // @@protoc_insertion_point(field_set_allocated:mozc.commands.Output.config)
}

// optional .mozc.commands.Output.PreeditMethod preedit_method = 10 [default = ASCII];
bool Output::has_preedit_method() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void Output::set_has_preedit_method() {
  _has_bits_[0] |= 0x00000200u;
}
void Output::clear_has_preedit_method() {
  _has_bits_[0] &= ~0x00000200u;
}
void Output::clear_preedit_method() {
  preedit_method_ = 0;
  clear_has_preedit_method();
}
 ::mozc::commands::Output_PreeditMethod Output::preedit_method() const {
  // @@protoc_insertion_point(field_get:mozc.commands.Output.preedit_method)
  return static_cast< ::mozc::commands::Output_PreeditMethod >(preedit_method_);
}
 void Output::set_preedit_method(::mozc::commands::Output_PreeditMethod value) {
  assert(::mozc::commands::Output_PreeditMethod_IsValid(value));
  set_has_preedit_method();
  preedit_method_ = value;
  // @@protoc_insertion_point(field_set:mozc.commands.Output.preedit_method)
}

// optional .mozc.commands.Output.ErrorCode error_code = 11 [default = SESSION_SUCCESS];
bool Output::has_error_code() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void Output::set_has_error_code() {
  _has_bits_[0] |= 0x00000400u;
}
void Output::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000400u;
}
void Output::clear_error_code() {
  error_code_ = 0;
  clear_has_error_code();
}
 ::mozc::commands::Output_ErrorCode Output::error_code() const {
  // @@protoc_insertion_point(field_get:mozc.commands.Output.error_code)
  return static_cast< ::mozc::commands::Output_ErrorCode >(error_code_);
}
 void Output::set_error_code(::mozc::commands::Output_ErrorCode value) {
  assert(::mozc::commands::Output_ErrorCode_IsValid(value));
  set_has_error_code();
  error_code_ = value;
  // @@protoc_insertion_point(field_set:mozc.commands.Output.error_code)
}

// optional .mozc.commands.Status status = 13;
bool Output::has_status() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void Output::set_has_status() {
  _has_bits_[0] |= 0x00000800u;
}
void Output::clear_has_status() {
  _has_bits_[0] &= ~0x00000800u;
}
void Output::clear_status() {
  if (status_ != NULL) status_->::mozc::commands::Status::Clear();
  clear_has_status();
}
const ::mozc::commands::Status& Output::status() const {
  // @@protoc_insertion_point(field_get:mozc.commands.Output.status)
  return status_ != NULL ? *status_ : *default_instance_->status_;
}
::mozc::commands::Status* Output::mutable_status() {
  set_has_status();
  if (status_ == NULL) {
    status_ = new ::mozc::commands::Status;
  }
  // @@protoc_insertion_point(field_mutable:mozc.commands.Output.status)
  return status_;
}
::mozc::commands::Status* Output::release_status() {
  // @@protoc_insertion_point(field_release:mozc.commands.Output.status)
  clear_has_status();
  ::mozc::commands::Status* temp = status_;
  status_ = NULL;
  return temp;
}
void Output::set_allocated_status(::mozc::commands::Status* status) {
  delete status_;
  status_ = status;
  if (status) {
    set_has_status();
  } else {
    clear_has_status();
  }
  // @@protoc_insertion_point(field_set_allocated:mozc.commands.Output.status)
}

// optional .mozc.commands.CandidateList all_candidate_words = 14;
bool Output::has_all_candidate_words() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void Output::set_has_all_candidate_words() {
  _has_bits_[0] |= 0x00001000u;
}
void Output::clear_has_all_candidate_words() {
  _has_bits_[0] &= ~0x00001000u;
}
void Output::clear_all_candidate_words() {
  if (all_candidate_words_ != NULL) all_candidate_words_->::mozc::commands::CandidateList::Clear();
  clear_has_all_candidate_words();
}
const ::mozc::commands::CandidateList& Output::all_candidate_words() const {
  // @@protoc_insertion_point(field_get:mozc.commands.Output.all_candidate_words)
  return all_candidate_words_ != NULL ? *all_candidate_words_ : *default_instance_->all_candidate_words_;
}
::mozc::commands::CandidateList* Output::mutable_all_candidate_words() {
  set_has_all_candidate_words();
  if (all_candidate_words_ == NULL) {
    all_candidate_words_ = new ::mozc::commands::CandidateList;
  }
  // @@protoc_insertion_point(field_mutable:mozc.commands.Output.all_candidate_words)
  return all_candidate_words_;
}
::mozc::commands::CandidateList* Output::release_all_candidate_words() {
  // @@protoc_insertion_point(field_release:mozc.commands.Output.all_candidate_words)
  clear_has_all_candidate_words();
  ::mozc::commands::CandidateList* temp = all_candidate_words_;
  all_candidate_words_ = NULL;
  return temp;
}
void Output::set_allocated_all_candidate_words(::mozc::commands::CandidateList* all_candidate_words) {
  delete all_candidate_words_;
  all_candidate_words_ = all_candidate_words;
  if (all_candidate_words) {
    set_has_all_candidate_words();
  } else {
    clear_has_all_candidate_words();
  }
  // @@protoc_insertion_point(field_set_allocated:mozc.commands.Output.all_candidate_words)
}

// optional .mozc.commands.DeletionRange deletion_range = 16;
bool Output::has_deletion_range() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void Output::set_has_deletion_range() {
  _has_bits_[0] |= 0x00002000u;
}
void Output::clear_has_deletion_range() {
  _has_bits_[0] &= ~0x00002000u;
}
void Output::clear_deletion_range() {
  if (deletion_range_ != NULL) deletion_range_->::mozc::commands::DeletionRange::Clear();
  clear_has_deletion_range();
}
const ::mozc::commands::DeletionRange& Output::deletion_range() const {
  // @@protoc_insertion_point(field_get:mozc.commands.Output.deletion_range)
  return deletion_range_ != NULL ? *deletion_range_ : *default_instance_->deletion_range_;
}
::mozc::commands::DeletionRange* Output::mutable_deletion_range() {
  set_has_deletion_range();
  if (deletion_range_ == NULL) {
    deletion_range_ = new ::mozc::commands::DeletionRange;
  }
  // @@protoc_insertion_point(field_mutable:mozc.commands.Output.deletion_range)
  return deletion_range_;
}
::mozc::commands::DeletionRange* Output::release_deletion_range() {
  // @@protoc_insertion_point(field_release:mozc.commands.Output.deletion_range)
  clear_has_deletion_range();
  ::mozc::commands::DeletionRange* temp = deletion_range_;
  deletion_range_ = NULL;
  return temp;
}
void Output::set_allocated_deletion_range(::mozc::commands::DeletionRange* deletion_range) {
  delete deletion_range_;
  deletion_range_ = deletion_range;
  if (deletion_range) {
    set_has_deletion_range();
  } else {
    clear_has_deletion_range();
  }
  // @@protoc_insertion_point(field_set_allocated:mozc.commands.Output.deletion_range)
}

// optional .mozc.commands.Output.ToolMode launch_tool_mode = 17 [default = NO_TOOL];
bool Output::has_launch_tool_mode() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void Output::set_has_launch_tool_mode() {
  _has_bits_[0] |= 0x00004000u;
}
void Output::clear_has_launch_tool_mode() {
  _has_bits_[0] &= ~0x00004000u;
}
void Output::clear_launch_tool_mode() {
  launch_tool_mode_ = 0;
  clear_has_launch_tool_mode();
}
 ::mozc::commands::Output_ToolMode Output::launch_tool_mode() const {
  // @@protoc_insertion_point(field_get:mozc.commands.Output.launch_tool_mode)
  return static_cast< ::mozc::commands::Output_ToolMode >(launch_tool_mode_);
}
 void Output::set_launch_tool_mode(::mozc::commands::Output_ToolMode value) {
  assert(::mozc::commands::Output_ToolMode_IsValid(value));
  set_has_launch_tool_mode();
  launch_tool_mode_ = value;
  // @@protoc_insertion_point(field_set:mozc.commands.Output.launch_tool_mode)
}

// optional .mozc.commands.Output.Callback callback = 18;
bool Output::has_callback() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void Output::set_has_callback() {
  _has_bits_[0] |= 0x00008000u;
}
void Output::clear_has_callback() {
  _has_bits_[0] &= ~0x00008000u;
}
void Output::clear_callback() {
  if (callback_ != NULL) callback_->::mozc::commands::Output_Callback::Clear();
  clear_has_callback();
}
const ::mozc::commands::Output_Callback& Output::callback() const {
  // @@protoc_insertion_point(field_get:mozc.commands.Output.callback)
  return callback_ != NULL ? *callback_ : *default_instance_->callback_;
}
::mozc::commands::Output_Callback* Output::mutable_callback() {
  set_has_callback();
  if (callback_ == NULL) {
    callback_ = new ::mozc::commands::Output_Callback;
  }
  // @@protoc_insertion_point(field_mutable:mozc.commands.Output.callback)
  return callback_;
}
::mozc::commands::Output_Callback* Output::release_callback() {
  // @@protoc_insertion_point(field_release:mozc.commands.Output.callback)
  clear_has_callback();
  ::mozc::commands::Output_Callback* temp = callback_;
  callback_ = NULL;
  return temp;
}
void Output::set_allocated_callback(::mozc::commands::Output_Callback* callback) {
  delete callback_;
  callback_ = callback;
  if (callback) {
    set_has_callback();
  } else {
    clear_has_callback();
  }
  // @@protoc_insertion_point(field_set_allocated:mozc.commands.Output.callback)
}

// optional .mozc.commands.GenericStorageEntry storage_entry = 19;
bool Output::has_storage_entry() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void Output::set_has_storage_entry() {
  _has_bits_[0] |= 0x00010000u;
}
void Output::clear_has_storage_entry() {
  _has_bits_[0] &= ~0x00010000u;
}
void Output::clear_storage_entry() {
  if (storage_entry_ != NULL) storage_entry_->::mozc::commands::GenericStorageEntry::Clear();
  clear_has_storage_entry();
}
const ::mozc::commands::GenericStorageEntry& Output::storage_entry() const {
  // @@protoc_insertion_point(field_get:mozc.commands.Output.storage_entry)
  return storage_entry_ != NULL ? *storage_entry_ : *default_instance_->storage_entry_;
}
::mozc::commands::GenericStorageEntry* Output::mutable_storage_entry() {
  set_has_storage_entry();
  if (storage_entry_ == NULL) {
    storage_entry_ = new ::mozc::commands::GenericStorageEntry;
  }
  // @@protoc_insertion_point(field_mutable:mozc.commands.Output.storage_entry)
  return storage_entry_;
}
::mozc::commands::GenericStorageEntry* Output::release_storage_entry() {
  // @@protoc_insertion_point(field_release:mozc.commands.Output.storage_entry)
  clear_has_storage_entry();
  ::mozc::commands::GenericStorageEntry* temp = storage_entry_;
  storage_entry_ = NULL;
  return temp;
}
void Output::set_allocated_storage_entry(::mozc::commands::GenericStorageEntry* storage_entry) {
  delete storage_entry_;
  storage_entry_ = storage_entry;
  if (storage_entry) {
    set_has_storage_entry();
  } else {
    clear_has_storage_entry();
  }
  // @@protoc_insertion_point(field_set_allocated:mozc.commands.Output.storage_entry)
}

// optional .mozc.user_dictionary.UserDictionaryCommandStatus user_dictionary_command_status = 21;
bool Output::has_user_dictionary_command_status() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void Output::set_has_user_dictionary_command_status() {
  _has_bits_[0] |= 0x00020000u;
}
void Output::clear_has_user_dictionary_command_status() {
  _has_bits_[0] &= ~0x00020000u;
}
void Output::clear_user_dictionary_command_status() {
  if (user_dictionary_command_status_ != NULL) user_dictionary_command_status_->::mozc::user_dictionary::UserDictionaryCommandStatus::Clear();
  clear_has_user_dictionary_command_status();
}
const ::mozc::user_dictionary::UserDictionaryCommandStatus& Output::user_dictionary_command_status() const {
  // @@protoc_insertion_point(field_get:mozc.commands.Output.user_dictionary_command_status)
  return user_dictionary_command_status_ != NULL ? *user_dictionary_command_status_ : *default_instance_->user_dictionary_command_status_;
}
::mozc::user_dictionary::UserDictionaryCommandStatus* Output::mutable_user_dictionary_command_status() {
  set_has_user_dictionary_command_status();
  if (user_dictionary_command_status_ == NULL) {
    user_dictionary_command_status_ = new ::mozc::user_dictionary::UserDictionaryCommandStatus;
  }
  // @@protoc_insertion_point(field_mutable:mozc.commands.Output.user_dictionary_command_status)
  return user_dictionary_command_status_;
}
::mozc::user_dictionary::UserDictionaryCommandStatus* Output::release_user_dictionary_command_status() {
  // @@protoc_insertion_point(field_release:mozc.commands.Output.user_dictionary_command_status)
  clear_has_user_dictionary_command_status();
  ::mozc::user_dictionary::UserDictionaryCommandStatus* temp = user_dictionary_command_status_;
  user_dictionary_command_status_ = NULL;
  return temp;
}
void Output::set_allocated_user_dictionary_command_status(::mozc::user_dictionary::UserDictionaryCommandStatus* user_dictionary_command_status) {
  delete user_dictionary_command_status_;
  user_dictionary_command_status_ = user_dictionary_command_status;
  if (user_dictionary_command_status) {
    set_has_user_dictionary_command_status();
  } else {
    clear_has_user_dictionary_command_status();
  }
  // @@protoc_insertion_point(field_set_allocated:mozc.commands.Output.user_dictionary_command_status)
}

// optional .mozc.EngineReloadResponse engine_reload_response = 22;
bool Output::has_engine_reload_response() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void Output::set_has_engine_reload_response() {
  _has_bits_[0] |= 0x00040000u;
}
void Output::clear_has_engine_reload_response() {
  _has_bits_[0] &= ~0x00040000u;
}
void Output::clear_engine_reload_response() {
  if (engine_reload_response_ != NULL) engine_reload_response_->::mozc::EngineReloadResponse::Clear();
  clear_has_engine_reload_response();
}
const ::mozc::EngineReloadResponse& Output::engine_reload_response() const {
  // @@protoc_insertion_point(field_get:mozc.commands.Output.engine_reload_response)
  return engine_reload_response_ != NULL ? *engine_reload_response_ : *default_instance_->engine_reload_response_;
}
::mozc::EngineReloadResponse* Output::mutable_engine_reload_response() {
  set_has_engine_reload_response();
  if (engine_reload_response_ == NULL) {
    engine_reload_response_ = new ::mozc::EngineReloadResponse;
  }
  // @@protoc_insertion_point(field_mutable:mozc.commands.Output.engine_reload_response)
  return engine_reload_response_;
}
::mozc::EngineReloadResponse* Output::release_engine_reload_response() {
  // @@protoc_insertion_point(field_release:mozc.commands.Output.engine_reload_response)
  clear_has_engine_reload_response();
  ::mozc::EngineReloadResponse* temp = engine_reload_response_;
  engine_reload_response_ = NULL;
  return temp;
}
void Output::set_allocated_engine_reload_response(::mozc::EngineReloadResponse* engine_reload_response) {
  delete engine_reload_response_;
  engine_reload_response_ = engine_reload_response;
  if (engine_reload_response) {
    set_has_engine_reload_response();
  } else {
    clear_has_engine_reload_response();
  }
  // @@protoc_insertion_point(field_set_allocated:mozc.commands.Output.engine_reload_response)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Command::kInputFieldNumber;
const int Command::kOutputFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Command::Command()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mozc.commands.Command)
}

void Command::InitAsDefaultInstance() {
  input_ = const_cast< ::mozc::commands::Input*>(&::mozc::commands::Input::default_instance());
  output_ = const_cast< ::mozc::commands::Output*>(&::mozc::commands::Output::default_instance());
}

Command::Command(const Command& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mozc.commands.Command)
}

void Command::SharedCtor() {
  _cached_size_ = 0;
  input_ = NULL;
  output_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Command::~Command() {
  // @@protoc_insertion_point(destructor:mozc.commands.Command)
  SharedDtor();
}

void Command::SharedDtor() {
  if (this != default_instance_) {
    delete input_;
    delete output_;
  }
}

void Command::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Command::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Command_descriptor_;
}

const Command& Command::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2fcommands_2eproto();
  return *default_instance_;
}

Command* Command::default_instance_ = NULL;

Command* Command::New(::google::protobuf::Arena* arena) const {
  Command* n = new Command;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Command::Clear() {
// @@protoc_insertion_point(message_clear_start:mozc.commands.Command)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_input()) {
      if (input_ != NULL) input_->::mozc::commands::Input::Clear();
    }
    if (has_output()) {
      if (output_ != NULL) output_->::mozc::commands::Output::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Command::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mozc.commands.Command)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .mozc.commands.Input input = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_input()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_output;
        break;
      }

      // required .mozc.commands.Output output = 2;
      case 2: {
        if (tag == 18) {
         parse_output:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_output()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mozc.commands.Command)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mozc.commands.Command)
  return false;
#undef DO_
}

void Command::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mozc.commands.Command)
  // required .mozc.commands.Input input = 1;
  if (has_input()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->input_, output);
  }

  // required .mozc.commands.Output output = 2;
  if (has_output()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->output_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mozc.commands.Command)
}

::google::protobuf::uint8* Command::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mozc.commands.Command)
  // required .mozc.commands.Input input = 1;
  if (has_input()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->input_, false, target);
  }

  // required .mozc.commands.Output output = 2;
  if (has_output()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->output_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mozc.commands.Command)
  return target;
}

int Command::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:mozc.commands.Command)
  int total_size = 0;

  if (has_input()) {
    // required .mozc.commands.Input input = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->input_);
  }

  if (has_output()) {
    // required .mozc.commands.Output output = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->output_);
  }

  return total_size;
}
int Command::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:mozc.commands.Command)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .mozc.commands.Input input = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->input_);

    // required .mozc.commands.Output output = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->output_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Command::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mozc.commands.Command)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Command* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Command>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mozc.commands.Command)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mozc.commands.Command)
    MergeFrom(*source);
  }
}

void Command::MergeFrom(const Command& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mozc.commands.Command)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_input()) {
      mutable_input()->::mozc::commands::Input::MergeFrom(from.input());
    }
    if (from.has_output()) {
      mutable_output()->::mozc::commands::Output::MergeFrom(from.output());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Command::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mozc.commands.Command)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Command::CopyFrom(const Command& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mozc.commands.Command)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Command::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_input()) {
    if (!this->input_->IsInitialized()) return false;
  }
  if (has_output()) {
    if (!this->output_->IsInitialized()) return false;
  }
  return true;
}

void Command::Swap(Command* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Command::InternalSwap(Command* other) {
  std::swap(input_, other->input_);
  std::swap(output_, other->output_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Command::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Command_descriptor_;
  metadata.reflection = Command_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Command

// required .mozc.commands.Input input = 1;
bool Command::has_input() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Command::set_has_input() {
  _has_bits_[0] |= 0x00000001u;
}
void Command::clear_has_input() {
  _has_bits_[0] &= ~0x00000001u;
}
void Command::clear_input() {
  if (input_ != NULL) input_->::mozc::commands::Input::Clear();
  clear_has_input();
}
const ::mozc::commands::Input& Command::input() const {
  // @@protoc_insertion_point(field_get:mozc.commands.Command.input)
  return input_ != NULL ? *input_ : *default_instance_->input_;
}
::mozc::commands::Input* Command::mutable_input() {
  set_has_input();
  if (input_ == NULL) {
    input_ = new ::mozc::commands::Input;
  }
  // @@protoc_insertion_point(field_mutable:mozc.commands.Command.input)
  return input_;
}
::mozc::commands::Input* Command::release_input() {
  // @@protoc_insertion_point(field_release:mozc.commands.Command.input)
  clear_has_input();
  ::mozc::commands::Input* temp = input_;
  input_ = NULL;
  return temp;
}
void Command::set_allocated_input(::mozc::commands::Input* input) {
  delete input_;
  input_ = input;
  if (input) {
    set_has_input();
  } else {
    clear_has_input();
  }
  // @@protoc_insertion_point(field_set_allocated:mozc.commands.Command.input)
}

// required .mozc.commands.Output output = 2;
bool Command::has_output() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Command::set_has_output() {
  _has_bits_[0] |= 0x00000002u;
}
void Command::clear_has_output() {
  _has_bits_[0] &= ~0x00000002u;
}
void Command::clear_output() {
  if (output_ != NULL) output_->::mozc::commands::Output::Clear();
  clear_has_output();
}
const ::mozc::commands::Output& Command::output() const {
  // @@protoc_insertion_point(field_get:mozc.commands.Command.output)
  return output_ != NULL ? *output_ : *default_instance_->output_;
}
::mozc::commands::Output* Command::mutable_output() {
  set_has_output();
  if (output_ == NULL) {
    output_ = new ::mozc::commands::Output;
  }
  // @@protoc_insertion_point(field_mutable:mozc.commands.Command.output)
  return output_;
}
::mozc::commands::Output* Command::release_output() {
  // @@protoc_insertion_point(field_release:mozc.commands.Command.output)
  clear_has_output();
  ::mozc::commands::Output* temp = output_;
  output_ = NULL;
  return temp;
}
void Command::set_allocated_output(::mozc::commands::Output* output) {
  delete output_;
  output_ = output;
  if (output) {
    set_has_output();
  } else {
    clear_has_output();
  }
  // @@protoc_insertion_point(field_set_allocated:mozc.commands.Command.output)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CommandList::kCommandsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CommandList::CommandList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mozc.commands.CommandList)
}

void CommandList::InitAsDefaultInstance() {
}

CommandList::CommandList(const CommandList& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mozc.commands.CommandList)
}

void CommandList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandList::~CommandList() {
  // @@protoc_insertion_point(destructor:mozc.commands.CommandList)
  SharedDtor();
}

void CommandList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CommandList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandList_descriptor_;
}

const CommandList& CommandList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2fcommands_2eproto();
  return *default_instance_;
}

CommandList* CommandList::default_instance_ = NULL;

CommandList* CommandList::New(::google::protobuf::Arena* arena) const {
  CommandList* n = new CommandList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CommandList::Clear() {
// @@protoc_insertion_point(message_clear_start:mozc.commands.CommandList)
  commands_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CommandList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mozc.commands.CommandList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .mozc.commands.Command commands = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_commands:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_commands()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_commands;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mozc.commands.CommandList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mozc.commands.CommandList)
  return false;
#undef DO_
}

void CommandList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mozc.commands.CommandList)
  // repeated .mozc.commands.Command commands = 1;
  for (unsigned int i = 0, n = this->commands_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->commands(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mozc.commands.CommandList)
}

::google::protobuf::uint8* CommandList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mozc.commands.CommandList)
  // repeated .mozc.commands.Command commands = 1;
  for (unsigned int i = 0, n = this->commands_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->commands(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mozc.commands.CommandList)
  return target;
}

int CommandList::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:mozc.commands.CommandList)
  int total_size = 0;

  // repeated .mozc.commands.Command commands = 1;
  total_size += 1 * this->commands_size();
  for (int i = 0; i < this->commands_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->commands(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mozc.commands.CommandList)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const CommandList* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CommandList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mozc.commands.CommandList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mozc.commands.CommandList)
    MergeFrom(*source);
  }
}

void CommandList::MergeFrom(const CommandList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mozc.commands.CommandList)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  commands_.MergeFrom(from.commands_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CommandList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mozc.commands.CommandList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandList::CopyFrom(const CommandList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mozc.commands.CommandList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandList::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->commands())) return false;
  return true;
}

void CommandList::Swap(CommandList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CommandList::InternalSwap(CommandList* other) {
  commands_.UnsafeArenaSwap(&other->commands_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CommandList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandList_descriptor_;
  metadata.reflection = CommandList_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CommandList

// repeated .mozc.commands.Command commands = 1;
int CommandList::commands_size() const {
  return commands_.size();
}
void CommandList::clear_commands() {
  commands_.Clear();
}
const ::mozc::commands::Command& CommandList::commands(int index) const {
  // @@protoc_insertion_point(field_get:mozc.commands.CommandList.commands)
  return commands_.Get(index);
}
::mozc::commands::Command* CommandList::mutable_commands(int index) {
  // @@protoc_insertion_point(field_mutable:mozc.commands.CommandList.commands)
  return commands_.Mutable(index);
}
::mozc::commands::Command* CommandList::add_commands() {
  // @@protoc_insertion_point(field_add:mozc.commands.CommandList.commands)
  return commands_.Add();
}
::google::protobuf::RepeatedPtrField< ::mozc::commands::Command >*
CommandList::mutable_commands() {
  // @@protoc_insertion_point(field_mutable_list:mozc.commands.CommandList.commands)
  return &commands_;
}
const ::google::protobuf::RepeatedPtrField< ::mozc::commands::Command >&
CommandList::commands() const {
  // @@protoc_insertion_point(field_list:mozc.commands.CommandList.commands)
  return commands_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace commands
}  // namespace mozc

// @@protoc_insertion_point(global_scope)
