// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protocol/config.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "protocol/config.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace mozc {
namespace config {

namespace {

const ::google::protobuf::Descriptor* GeneralConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GeneralConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* Config_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Config_reflection_ = NULL;
const ::google::protobuf::Descriptor* Config_CharacterFormRule_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Config_CharacterFormRule_reflection_ = NULL;
const ::google::protobuf::Descriptor* Config_InformationListConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Config_InformationListConfig_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Config_PreeditMethod_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Config_SessionKeymap_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Config_PunctuationMethod_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Config_SymbolMethod_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Config_FundamentalCharacterForm_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Config_HistoryLearningLevel_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Config_SelectionShortcut_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Config_CharacterForm_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Config_ShiftKeyModeSwitch_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Config_NumpadCharacterForm_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Config_AutoConversionKey_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Config_YenSignCharacter_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_protocol_2fconfig_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_protocol_2fconfig_2eproto() {
  protobuf_AddDesc_protocol_2fconfig_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "protocol/config.proto");
  GOOGLE_CHECK(file != NULL);
  GeneralConfig_descriptor_ = file->message_type(0);
  static const int GeneralConfig_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeneralConfig, config_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeneralConfig, last_modified_product_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeneralConfig, last_modified_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeneralConfig, platform_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeneralConfig, ui_locale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeneralConfig, upload_usage_stats_),
  };
  GeneralConfig_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GeneralConfig_descriptor_,
      GeneralConfig::default_instance_,
      GeneralConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeneralConfig, _has_bits_[0]),
      -1,
      -1,
      sizeof(GeneralConfig),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeneralConfig, _internal_metadata_),
      -1);
  Config_descriptor_ = file->message_type(1);
  static const int Config_offsets_[43] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, general_config_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, verbose_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, incognito_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, check_default_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, presentation_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, preedit_method_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, session_keymap_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, custom_keymap_table_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, custom_roman_table_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, punctuation_method_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, symbol_method_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, space_character_form_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, use_keyboard_to_change_preedit_method_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, history_learning_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, selection_shortcut_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, character_form_rules_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, use_auto_ime_turn_off_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, use_cascading_window_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, shift_key_mode_switch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, numpad_character_form_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, use_auto_conversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, auto_conversion_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, yen_sign_character_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, use_japanese_layout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, use_kana_modifier_insensitive_conversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, use_typing_correction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, use_date_conversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, use_single_kanji_conversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, use_symbol_conversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, use_number_conversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, use_emoticon_conversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, use_calculator_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, use_t13n_conversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, use_zip_code_conversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, use_spelling_correction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, use_emoji_conversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, information_list_config_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, use_history_suggest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, use_dictionary_suggest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, use_realtime_conversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, suggestions_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, use_mode_indicator_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, allow_cloud_handwriting_),
  };
  Config_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Config_descriptor_,
      Config::default_instance_,
      Config_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, _has_bits_[0]),
      -1,
      -1,
      sizeof(Config),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, _internal_metadata_),
      -1);
  Config_CharacterFormRule_descriptor_ = Config_descriptor_->nested_type(0);
  static const int Config_CharacterFormRule_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config_CharacterFormRule, group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config_CharacterFormRule, preedit_character_form_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config_CharacterFormRule, conversion_character_form_),
  };
  Config_CharacterFormRule_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Config_CharacterFormRule_descriptor_,
      Config_CharacterFormRule::default_instance_,
      Config_CharacterFormRule_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config_CharacterFormRule, _has_bits_[0]),
      -1,
      -1,
      sizeof(Config_CharacterFormRule),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config_CharacterFormRule, _internal_metadata_),
      -1);
  Config_InformationListConfig_descriptor_ = Config_descriptor_->nested_type(1);
  static const int Config_InformationListConfig_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config_InformationListConfig, use_local_usage_dictionary_),
  };
  Config_InformationListConfig_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Config_InformationListConfig_descriptor_,
      Config_InformationListConfig::default_instance_,
      Config_InformationListConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config_InformationListConfig, _has_bits_[0]),
      -1,
      -1,
      sizeof(Config_InformationListConfig),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config_InformationListConfig, _internal_metadata_),
      -1);
  Config_PreeditMethod_descriptor_ = Config_descriptor_->enum_type(0);
  Config_SessionKeymap_descriptor_ = Config_descriptor_->enum_type(1);
  Config_PunctuationMethod_descriptor_ = Config_descriptor_->enum_type(2);
  Config_SymbolMethod_descriptor_ = Config_descriptor_->enum_type(3);
  Config_FundamentalCharacterForm_descriptor_ = Config_descriptor_->enum_type(4);
  Config_HistoryLearningLevel_descriptor_ = Config_descriptor_->enum_type(5);
  Config_SelectionShortcut_descriptor_ = Config_descriptor_->enum_type(6);
  Config_CharacterForm_descriptor_ = Config_descriptor_->enum_type(7);
  Config_ShiftKeyModeSwitch_descriptor_ = Config_descriptor_->enum_type(8);
  Config_NumpadCharacterForm_descriptor_ = Config_descriptor_->enum_type(9);
  Config_AutoConversionKey_descriptor_ = Config_descriptor_->enum_type(10);
  Config_YenSignCharacter_descriptor_ = Config_descriptor_->enum_type(11);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_protocol_2fconfig_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GeneralConfig_descriptor_, &GeneralConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Config_descriptor_, &Config::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Config_CharacterFormRule_descriptor_, &Config_CharacterFormRule::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Config_InformationListConfig_descriptor_, &Config_InformationListConfig::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_protocol_2fconfig_2eproto() {
  delete GeneralConfig::default_instance_;
  delete GeneralConfig_reflection_;
  delete GeneralConfig::_default_last_modified_product_version_;
  delete Config::default_instance_;
  delete Config_reflection_;
  delete Config_CharacterFormRule::default_instance_;
  delete Config_CharacterFormRule_reflection_;
  delete Config_InformationListConfig::default_instance_;
  delete Config_InformationListConfig_reflection_;
}

void protobuf_AddDesc_protocol_2fconfig_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_protocol_2fconfig_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025protocol/config.proto\022\013mozc.config\"\305\001\n"
    "\rGeneralConfig\022\031\n\016config_version\030\001 \001(\r:\001"
    "0\022.\n\035last_modified_product_version\030\002 \001(\t"
    ":\0070.0.0.0\022\035\n\022last_modified_time\030\003 \001(\004:\0010"
    "\022\022\n\010platform\030\004 \001(\t:\000\022\023\n\tui_locale\030\005 \001(\t:"
    "\000\022!\n\022upload_usage_stats\030\006 \001(\010:\005false\"\217\034\n"
    "\006Config\0222\n\016general_config\030\001 \001(\0132\032.mozc.c"
    "onfig.GeneralConfig\022\030\n\rverbose_level\030\n \001"
    "(\005:\0010\022\035\n\016incognito_mode\030\024 \001(\010:\005false\022\033\n\r"
    "check_default\030\026 \001(\010:\004true\022 \n\021presentatio"
    "n_mode\030\027 \001(\010:\005false\022@\n\016preedit_method\030( "
    "\001(\0162!.mozc.config.Config.PreeditMethod:\005"
    "ROMAN\022\?\n\016session_keymap\030) \001(\0162!.mozc.con"
    "fig.Config.SessionKeymap:\004NONE\022\033\n\023custom"
    "_keymap_table\030* \001(\014\022\032\n\022custom_roman_tabl"
    "e\030+ \001(\014\022O\n\022punctuation_method\030- \001(\0162%.mo"
    "zc.config.Config.PunctuationMethod:\014KUTE"
    "N_TOUTEN\022R\n\rsymbol_method\030. \001(\0162 .mozc.c"
    "onfig.Config.SymbolMethod:\031CORNER_BRACKE"
    "T_MIDDLE_DOT\022b\n\024space_character_form\030/ \001"
    "(\0162,.mozc.config.Config.FundamentalChara"
    "cterForm:\026FUNDAMENTAL_INPUT_MODE\0224\n%use_"
    "keyboard_to_change_preedit_method\0300 \001(\010:"
    "\005false\022Y\n\026history_learning_level\0302 \001(\0162("
    ".mozc.config.Config.HistoryLearningLevel"
    ":\017DEFAULT_HISTORY\022U\n\022selection_shortcut\030"
    "4 \001(\0162%.mozc.config.Config.SelectionShor"
    "tcut:\022SHORTCUT_123456789\022C\n\024character_fo"
    "rm_rules\0306 \003(\0132%.mozc.config.Config.Char"
    "acterFormRule\022#\n\025use_auto_ime_turn_off\0308"
    " \001(\010:\004true\022\"\n\024use_cascading_window\030: \001(\010"
    ":\004true\022W\n\025shift_key_mode_switch\030; \001(\0162&."
    "mozc.config.Config.ShiftKeyModeSwitch:\020A"
    "SCII_INPUT_MODE\022Y\n\025numpad_character_form"
    "\030< \001(\0162\'.mozc.config.Config.NumpadCharac"
    "terForm:\021NUMPAD_HALF_WIDTH\022\"\n\023use_auto_c"
    "onversion\030= \001(\010:\005false\022\037\n\023auto_conversio"
    "n_key\030> \001(\r:\00213\022J\n\022yen_sign_character\030\? "
    "\001(\0162$.mozc.config.Config.YenSignCharacte"
    "r:\010YEN_SIGN\022\"\n\023use_japanese_layout\030@ \001(\010"
    ":\005false\0227\n(use_kana_modifier_insensitive"
    "_conversion\030A \001(\010:\005false\022$\n\025use_typing_c"
    "orrection\030B \001(\010:\005false\022!\n\023use_date_conve"
    "rsion\030P \001(\010:\004true\022)\n\033use_single_kanji_co"
    "nversion\030Q \001(\010:\004true\022#\n\025use_symbol_conve"
    "rsion\030R \001(\010:\004true\022#\n\025use_number_conversi"
    "on\030S \001(\010:\004true\022%\n\027use_emoticon_conversio"
    "n\030T \001(\010:\004true\022\034\n\016use_calculator\030U \001(\010:\004t"
    "rue\022!\n\023use_t13n_conversion\030V \001(\010:\004true\022%"
    "\n\027use_zip_code_conversion\030W \001(\010:\004true\022%\n"
    "\027use_spelling_correction\030X \001(\010:\004true\022#\n\024"
    "use_emoji_conversion\030Y \001(\010:\005false\022J\n\027inf"
    "ormation_list_config\030Z \001(\0132).mozc.config"
    ".Config.InformationListConfig\022!\n\023use_his"
    "tory_suggest\030d \001(\010:\004true\022$\n\026use_dictiona"
    "ry_suggest\030e \001(\010:\004true\022%\n\027use_realtime_c"
    "onversion\030f \001(\010:\004true\022\033\n\020suggestions_siz"
    "e\030n \001(\r:\0013\022 \n\022use_mode_indicator\030x \001(\010:\004"
    "true\022\'\n\027allow_cloud_handwriting\030\255\002 \001(\010:\005"
    "false\032\303\001\n\021CharacterFormRule\022\r\n\005group\030\001 \001"
    "(\t\022M\n\026preedit_character_form\030\002 \001(\0162!.moz"
    "c.config.Config.CharacterForm:\nFULL_WIDT"
    "H\022P\n\031conversion_character_form\030\003 \001(\0162!.m"
    "ozc.config.Config.CharacterForm:\nFULL_WI"
    "DTH\032M\n\025InformationListConfig\022(\n\032use_loca"
    "l_usage_dictionary\030\001 \001(\010:\004trueJ\004\010\002\020\003J\004\010\n"
    "\020\013\"$\n\rPreeditMethod\022\t\n\005ROMAN\020\000\022\010\n\004KANA\020\001"
    "\"j\n\rSessionKeymap\022\021\n\004NONE\020\377\377\377\377\377\377\377\377\377\001\022\n\n\006"
    "CUSTOM\020\000\022\010\n\004ATOK\020\001\022\t\n\005MSIME\020\002\022\013\n\007KOTOERI"
    "\020\003\022\n\n\006MOBILE\020\004\022\014\n\010CHROMEOS\020\005\"[\n\021Punctuat"
    "ionMethod\022\020\n\014KUTEN_TOUTEN\020\000\022\020\n\014COMMA_PER"
    "IOD\020\001\022\020\n\014KUTEN_PERIOD\020\002\022\020\n\014COMMA_TOUTEN\020"
    "\003\"\200\001\n\014SymbolMethod\022\035\n\031CORNER_BRACKET_MID"
    "DLE_DOT\020\000\022\030\n\024SQUARE_BRACKET_SLASH\020\001\022\030\n\024C"
    "ORNER_BRACKET_SLASH\020\002\022\035\n\031SQUARE_BRACKET_"
    "MIDDLE_DOT\020\003\"n\n\030FundamentalCharacterForm"
    "\022\032\n\026FUNDAMENTAL_INPUT_MODE\020\000\022\032\n\026FUNDAMEN"
    "TAL_FULL_WIDTH\020\001\022\032\n\026FUNDAMENTAL_HALF_WID"
    "TH\020\002\"J\n\024HistoryLearningLevel\022\023\n\017DEFAULT_"
    "HISTORY\020\000\022\r\n\tREAD_ONLY\020\001\022\016\n\nNO_HISTORY\020\002"
    "\"T\n\021SelectionShortcut\022\017\n\013NO_SHORTCUT\020\000\022\026"
    "\n\022SHORTCUT_123456789\020\001\022\026\n\022SHORTCUT_ASDFG"
    "HJKL\020\002\"Q\n\rCharacterForm\022\016\n\nHALF_WIDTH\020\000\022"
    "\016\n\nFULL_WIDTH\020\001\022\r\n\tLAST_FORM\020\002\022\021\n\rNO_CON"
    "VERSION\020\003\"L\n\022ShiftKeyModeSwitch\022\007\n\003OFF\020\000"
    "\022\024\n\020ASCII_INPUT_MODE\020\001\022\027\n\023KATAKANA_INPUT"
    "_MODE\020\002\"s\n\023NumpadCharacterForm\022\025\n\021NUMPAD"
    "_INPUT_MODE\020\000\022\025\n\021NUMPAD_FULL_WIDTH\020\001\022\025\n\021"
    "NUMPAD_HALF_WIDTH\020\002\022\027\n\023NUMPAD_DIRECT_INP"
    "UT\020\003\"\254\001\n\021AutoConversionKey\022\027\n\023AUTO_CONVE"
    "RSION_OFF\020\000\022\031\n\025AUTO_CONVERSION_KUTEN\020\001\022\032"
    "\n\026AUTO_CONVERSION_TOUTEN\020\002\022!\n\035AUTO_CONVE"
    "RSION_QUESTION_MARK\020\004\022$\n AUTO_CONVERSION"
    "_EXCLAMATION_MARK\020\010\"/\n\020YenSignCharacter\022"
    "\014\n\010YEN_SIGN\020\000\022\r\n\tBACKSLASH\020\001J\004\010\002\020\nJ\004\010\013\020\014"
    "J\004\010\025\020\026J\006\010\254\002\020\255\002J\006\010\344\007\020\345\007J\006\010\346\007\020\347\007J\006\010\347\007\020\350\007B="
    "\n.org.mozc.android.inputmethod.japanese."
    "protobufB\013ProtoConfig", 3901);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "protocol/config.proto", &protobuf_RegisterTypes);
  GeneralConfig::_default_last_modified_product_version_ =
      new ::std::string("0.0.0.0", 7);
  GeneralConfig::default_instance_ = new GeneralConfig();
  Config::default_instance_ = new Config();
  Config_CharacterFormRule::default_instance_ = new Config_CharacterFormRule();
  Config_InformationListConfig::default_instance_ = new Config_InformationListConfig();
  GeneralConfig::default_instance_->InitAsDefaultInstance();
  Config::default_instance_->InitAsDefaultInstance();
  Config_CharacterFormRule::default_instance_->InitAsDefaultInstance();
  Config_InformationListConfig::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_protocol_2fconfig_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_protocol_2fconfig_2eproto {
  StaticDescriptorInitializer_protocol_2fconfig_2eproto() {
    protobuf_AddDesc_protocol_2fconfig_2eproto();
  }
} static_descriptor_initializer_protocol_2fconfig_2eproto_;

// ===================================================================

::std::string* GeneralConfig::_default_last_modified_product_version_ = NULL;
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GeneralConfig::kConfigVersionFieldNumber;
const int GeneralConfig::kLastModifiedProductVersionFieldNumber;
const int GeneralConfig::kLastModifiedTimeFieldNumber;
const int GeneralConfig::kPlatformFieldNumber;
const int GeneralConfig::kUiLocaleFieldNumber;
const int GeneralConfig::kUploadUsageStatsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GeneralConfig::GeneralConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mozc.config.GeneralConfig)
}

void GeneralConfig::InitAsDefaultInstance() {
}

GeneralConfig::GeneralConfig(const GeneralConfig& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mozc.config.GeneralConfig)
}

void GeneralConfig::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  config_version_ = 0u;
  last_modified_product_version_.UnsafeSetDefault(_default_last_modified_product_version_);
  last_modified_time_ = GOOGLE_ULONGLONG(0);
  platform_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ui_locale_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  upload_usage_stats_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GeneralConfig::~GeneralConfig() {
  // @@protoc_insertion_point(destructor:mozc.config.GeneralConfig)
  SharedDtor();
}

void GeneralConfig::SharedDtor() {
  last_modified_product_version_.DestroyNoArena(_default_last_modified_product_version_);
  platform_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ui_locale_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void GeneralConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GeneralConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GeneralConfig_descriptor_;
}

const GeneralConfig& GeneralConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2fconfig_2eproto();
  return *default_instance_;
}

GeneralConfig* GeneralConfig::default_instance_ = NULL;

GeneralConfig* GeneralConfig::New(::google::protobuf::Arena* arena) const {
  GeneralConfig* n = new GeneralConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GeneralConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:mozc.config.GeneralConfig)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(GeneralConfig, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<GeneralConfig*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 63u) {
    ZR_(last_modified_time_, upload_usage_stats_);
    if (has_last_modified_product_version()) {
      last_modified_product_version_.ClearToDefaultNoArena(_default_last_modified_product_version_);
    }
    if (has_platform()) {
      platform_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_ui_locale()) {
      ui_locale_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool GeneralConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mozc.config.GeneralConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 config_version = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &config_version_)));
          set_has_config_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_last_modified_product_version;
        break;
      }

      // optional string last_modified_product_version = 2 [default = "0.0.0.0"];
      case 2: {
        if (tag == 18) {
         parse_last_modified_product_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_last_modified_product_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->last_modified_product_version().data(), this->last_modified_product_version().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mozc.config.GeneralConfig.last_modified_product_version");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_last_modified_time;
        break;
      }

      // optional uint64 last_modified_time = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_last_modified_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &last_modified_time_)));
          set_has_last_modified_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_platform;
        break;
      }

      // optional string platform = 4 [default = ""];
      case 4: {
        if (tag == 34) {
         parse_platform:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_platform()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->platform().data(), this->platform().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mozc.config.GeneralConfig.platform");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_ui_locale;
        break;
      }

      // optional string ui_locale = 5 [default = ""];
      case 5: {
        if (tag == 42) {
         parse_ui_locale:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ui_locale()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ui_locale().data(), this->ui_locale().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mozc.config.GeneralConfig.ui_locale");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_upload_usage_stats;
        break;
      }

      // optional bool upload_usage_stats = 6 [default = false];
      case 6: {
        if (tag == 48) {
         parse_upload_usage_stats:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &upload_usage_stats_)));
          set_has_upload_usage_stats();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mozc.config.GeneralConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mozc.config.GeneralConfig)
  return false;
#undef DO_
}

void GeneralConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mozc.config.GeneralConfig)
  // optional uint32 config_version = 1 [default = 0];
  if (has_config_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->config_version(), output);
  }

  // optional string last_modified_product_version = 2 [default = "0.0.0.0"];
  if (has_last_modified_product_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->last_modified_product_version().data(), this->last_modified_product_version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mozc.config.GeneralConfig.last_modified_product_version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->last_modified_product_version(), output);
  }

  // optional uint64 last_modified_time = 3 [default = 0];
  if (has_last_modified_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->last_modified_time(), output);
  }

  // optional string platform = 4 [default = ""];
  if (has_platform()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->platform().data(), this->platform().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mozc.config.GeneralConfig.platform");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->platform(), output);
  }

  // optional string ui_locale = 5 [default = ""];
  if (has_ui_locale()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ui_locale().data(), this->ui_locale().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mozc.config.GeneralConfig.ui_locale");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->ui_locale(), output);
  }

  // optional bool upload_usage_stats = 6 [default = false];
  if (has_upload_usage_stats()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->upload_usage_stats(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mozc.config.GeneralConfig)
}

::google::protobuf::uint8* GeneralConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mozc.config.GeneralConfig)
  // optional uint32 config_version = 1 [default = 0];
  if (has_config_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->config_version(), target);
  }

  // optional string last_modified_product_version = 2 [default = "0.0.0.0"];
  if (has_last_modified_product_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->last_modified_product_version().data(), this->last_modified_product_version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mozc.config.GeneralConfig.last_modified_product_version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->last_modified_product_version(), target);
  }

  // optional uint64 last_modified_time = 3 [default = 0];
  if (has_last_modified_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->last_modified_time(), target);
  }

  // optional string platform = 4 [default = ""];
  if (has_platform()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->platform().data(), this->platform().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mozc.config.GeneralConfig.platform");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->platform(), target);
  }

  // optional string ui_locale = 5 [default = ""];
  if (has_ui_locale()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ui_locale().data(), this->ui_locale().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mozc.config.GeneralConfig.ui_locale");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->ui_locale(), target);
  }

  // optional bool upload_usage_stats = 6 [default = false];
  if (has_upload_usage_stats()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->upload_usage_stats(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mozc.config.GeneralConfig)
  return target;
}

int GeneralConfig::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:mozc.config.GeneralConfig)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 63u) {
    // optional uint32 config_version = 1 [default = 0];
    if (has_config_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->config_version());
    }

    // optional string last_modified_product_version = 2 [default = "0.0.0.0"];
    if (has_last_modified_product_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->last_modified_product_version());
    }

    // optional uint64 last_modified_time = 3 [default = 0];
    if (has_last_modified_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->last_modified_time());
    }

    // optional string platform = 4 [default = ""];
    if (has_platform()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->platform());
    }

    // optional string ui_locale = 5 [default = ""];
    if (has_ui_locale()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ui_locale());
    }

    // optional bool upload_usage_stats = 6 [default = false];
    if (has_upload_usage_stats()) {
      total_size += 1 + 1;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GeneralConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mozc.config.GeneralConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const GeneralConfig* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GeneralConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mozc.config.GeneralConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mozc.config.GeneralConfig)
    MergeFrom(*source);
  }
}

void GeneralConfig::MergeFrom(const GeneralConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mozc.config.GeneralConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_config_version()) {
      set_config_version(from.config_version());
    }
    if (from.has_last_modified_product_version()) {
      set_has_last_modified_product_version();
      last_modified_product_version_.AssignWithDefault(_default_last_modified_product_version_, from.last_modified_product_version_);
    }
    if (from.has_last_modified_time()) {
      set_last_modified_time(from.last_modified_time());
    }
    if (from.has_platform()) {
      set_has_platform();
      platform_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.platform_);
    }
    if (from.has_ui_locale()) {
      set_has_ui_locale();
      ui_locale_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ui_locale_);
    }
    if (from.has_upload_usage_stats()) {
      set_upload_usage_stats(from.upload_usage_stats());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void GeneralConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mozc.config.GeneralConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GeneralConfig::CopyFrom(const GeneralConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mozc.config.GeneralConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GeneralConfig::IsInitialized() const {

  return true;
}

void GeneralConfig::Swap(GeneralConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GeneralConfig::InternalSwap(GeneralConfig* other) {
  std::swap(config_version_, other->config_version_);
  last_modified_product_version_.Swap(&other->last_modified_product_version_);
  std::swap(last_modified_time_, other->last_modified_time_);
  platform_.Swap(&other->platform_);
  ui_locale_.Swap(&other->ui_locale_);
  std::swap(upload_usage_stats_, other->upload_usage_stats_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GeneralConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GeneralConfig_descriptor_;
  metadata.reflection = GeneralConfig_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GeneralConfig

// optional uint32 config_version = 1 [default = 0];
bool GeneralConfig::has_config_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GeneralConfig::set_has_config_version() {
  _has_bits_[0] |= 0x00000001u;
}
void GeneralConfig::clear_has_config_version() {
  _has_bits_[0] &= ~0x00000001u;
}
void GeneralConfig::clear_config_version() {
  config_version_ = 0u;
  clear_has_config_version();
}
 ::google::protobuf::uint32 GeneralConfig::config_version() const {
  // @@protoc_insertion_point(field_get:mozc.config.GeneralConfig.config_version)
  return config_version_;
}
 void GeneralConfig::set_config_version(::google::protobuf::uint32 value) {
  set_has_config_version();
  config_version_ = value;
  // @@protoc_insertion_point(field_set:mozc.config.GeneralConfig.config_version)
}

// optional string last_modified_product_version = 2 [default = "0.0.0.0"];
bool GeneralConfig::has_last_modified_product_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GeneralConfig::set_has_last_modified_product_version() {
  _has_bits_[0] |= 0x00000002u;
}
void GeneralConfig::clear_has_last_modified_product_version() {
  _has_bits_[0] &= ~0x00000002u;
}
void GeneralConfig::clear_last_modified_product_version() {
  last_modified_product_version_.ClearToDefaultNoArena(_default_last_modified_product_version_);
  clear_has_last_modified_product_version();
}
 const ::std::string& GeneralConfig::last_modified_product_version() const {
  // @@protoc_insertion_point(field_get:mozc.config.GeneralConfig.last_modified_product_version)
  return last_modified_product_version_.GetNoArena(_default_last_modified_product_version_);
}
 void GeneralConfig::set_last_modified_product_version(const ::std::string& value) {
  set_has_last_modified_product_version();
  last_modified_product_version_.SetNoArena(_default_last_modified_product_version_, value);
  // @@protoc_insertion_point(field_set:mozc.config.GeneralConfig.last_modified_product_version)
}
 void GeneralConfig::set_last_modified_product_version(const char* value) {
  set_has_last_modified_product_version();
  last_modified_product_version_.SetNoArena(_default_last_modified_product_version_, ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mozc.config.GeneralConfig.last_modified_product_version)
}
 void GeneralConfig::set_last_modified_product_version(const char* value, size_t size) {
  set_has_last_modified_product_version();
  last_modified_product_version_.SetNoArena(_default_last_modified_product_version_,
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mozc.config.GeneralConfig.last_modified_product_version)
}
 ::std::string* GeneralConfig::mutable_last_modified_product_version() {
  set_has_last_modified_product_version();
  // @@protoc_insertion_point(field_mutable:mozc.config.GeneralConfig.last_modified_product_version)
  return last_modified_product_version_.MutableNoArena(_default_last_modified_product_version_);
}
 ::std::string* GeneralConfig::release_last_modified_product_version() {
  // @@protoc_insertion_point(field_release:mozc.config.GeneralConfig.last_modified_product_version)
  clear_has_last_modified_product_version();
  return last_modified_product_version_.ReleaseNoArena(_default_last_modified_product_version_);
}
 void GeneralConfig::set_allocated_last_modified_product_version(::std::string* last_modified_product_version) {
  if (last_modified_product_version != NULL) {
    set_has_last_modified_product_version();
  } else {
    clear_has_last_modified_product_version();
  }
  last_modified_product_version_.SetAllocatedNoArena(_default_last_modified_product_version_, last_modified_product_version);
  // @@protoc_insertion_point(field_set_allocated:mozc.config.GeneralConfig.last_modified_product_version)
}

// optional uint64 last_modified_time = 3 [default = 0];
bool GeneralConfig::has_last_modified_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GeneralConfig::set_has_last_modified_time() {
  _has_bits_[0] |= 0x00000004u;
}
void GeneralConfig::clear_has_last_modified_time() {
  _has_bits_[0] &= ~0x00000004u;
}
void GeneralConfig::clear_last_modified_time() {
  last_modified_time_ = GOOGLE_ULONGLONG(0);
  clear_has_last_modified_time();
}
 ::google::protobuf::uint64 GeneralConfig::last_modified_time() const {
  // @@protoc_insertion_point(field_get:mozc.config.GeneralConfig.last_modified_time)
  return last_modified_time_;
}
 void GeneralConfig::set_last_modified_time(::google::protobuf::uint64 value) {
  set_has_last_modified_time();
  last_modified_time_ = value;
  // @@protoc_insertion_point(field_set:mozc.config.GeneralConfig.last_modified_time)
}

// optional string platform = 4 [default = ""];
bool GeneralConfig::has_platform() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void GeneralConfig::set_has_platform() {
  _has_bits_[0] |= 0x00000008u;
}
void GeneralConfig::clear_has_platform() {
  _has_bits_[0] &= ~0x00000008u;
}
void GeneralConfig::clear_platform() {
  platform_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_platform();
}
 const ::std::string& GeneralConfig::platform() const {
  // @@protoc_insertion_point(field_get:mozc.config.GeneralConfig.platform)
  return platform_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GeneralConfig::set_platform(const ::std::string& value) {
  set_has_platform();
  platform_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mozc.config.GeneralConfig.platform)
}
 void GeneralConfig::set_platform(const char* value) {
  set_has_platform();
  platform_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mozc.config.GeneralConfig.platform)
}
 void GeneralConfig::set_platform(const char* value, size_t size) {
  set_has_platform();
  platform_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mozc.config.GeneralConfig.platform)
}
 ::std::string* GeneralConfig::mutable_platform() {
  set_has_platform();
  // @@protoc_insertion_point(field_mutable:mozc.config.GeneralConfig.platform)
  return platform_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GeneralConfig::release_platform() {
  // @@protoc_insertion_point(field_release:mozc.config.GeneralConfig.platform)
  clear_has_platform();
  return platform_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GeneralConfig::set_allocated_platform(::std::string* platform) {
  if (platform != NULL) {
    set_has_platform();
  } else {
    clear_has_platform();
  }
  platform_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), platform);
  // @@protoc_insertion_point(field_set_allocated:mozc.config.GeneralConfig.platform)
}

// optional string ui_locale = 5 [default = ""];
bool GeneralConfig::has_ui_locale() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void GeneralConfig::set_has_ui_locale() {
  _has_bits_[0] |= 0x00000010u;
}
void GeneralConfig::clear_has_ui_locale() {
  _has_bits_[0] &= ~0x00000010u;
}
void GeneralConfig::clear_ui_locale() {
  ui_locale_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ui_locale();
}
 const ::std::string& GeneralConfig::ui_locale() const {
  // @@protoc_insertion_point(field_get:mozc.config.GeneralConfig.ui_locale)
  return ui_locale_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GeneralConfig::set_ui_locale(const ::std::string& value) {
  set_has_ui_locale();
  ui_locale_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mozc.config.GeneralConfig.ui_locale)
}
 void GeneralConfig::set_ui_locale(const char* value) {
  set_has_ui_locale();
  ui_locale_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mozc.config.GeneralConfig.ui_locale)
}
 void GeneralConfig::set_ui_locale(const char* value, size_t size) {
  set_has_ui_locale();
  ui_locale_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mozc.config.GeneralConfig.ui_locale)
}
 ::std::string* GeneralConfig::mutable_ui_locale() {
  set_has_ui_locale();
  // @@protoc_insertion_point(field_mutable:mozc.config.GeneralConfig.ui_locale)
  return ui_locale_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GeneralConfig::release_ui_locale() {
  // @@protoc_insertion_point(field_release:mozc.config.GeneralConfig.ui_locale)
  clear_has_ui_locale();
  return ui_locale_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GeneralConfig::set_allocated_ui_locale(::std::string* ui_locale) {
  if (ui_locale != NULL) {
    set_has_ui_locale();
  } else {
    clear_has_ui_locale();
  }
  ui_locale_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ui_locale);
  // @@protoc_insertion_point(field_set_allocated:mozc.config.GeneralConfig.ui_locale)
}

// optional bool upload_usage_stats = 6 [default = false];
bool GeneralConfig::has_upload_usage_stats() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void GeneralConfig::set_has_upload_usage_stats() {
  _has_bits_[0] |= 0x00000020u;
}
void GeneralConfig::clear_has_upload_usage_stats() {
  _has_bits_[0] &= ~0x00000020u;
}
void GeneralConfig::clear_upload_usage_stats() {
  upload_usage_stats_ = false;
  clear_has_upload_usage_stats();
}
 bool GeneralConfig::upload_usage_stats() const {
  // @@protoc_insertion_point(field_get:mozc.config.GeneralConfig.upload_usage_stats)
  return upload_usage_stats_;
}
 void GeneralConfig::set_upload_usage_stats(bool value) {
  set_has_upload_usage_stats();
  upload_usage_stats_ = value;
  // @@protoc_insertion_point(field_set:mozc.config.GeneralConfig.upload_usage_stats)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* Config_PreeditMethod_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Config_PreeditMethod_descriptor_;
}
bool Config_PreeditMethod_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Config_PreeditMethod Config::ROMAN;
const Config_PreeditMethod Config::KANA;
const Config_PreeditMethod Config::PreeditMethod_MIN;
const Config_PreeditMethod Config::PreeditMethod_MAX;
const int Config::PreeditMethod_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Config_SessionKeymap_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Config_SessionKeymap_descriptor_;
}
bool Config_SessionKeymap_IsValid(int value) {
  switch(value) {
    case -1:
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Config_SessionKeymap Config::NONE;
const Config_SessionKeymap Config::CUSTOM;
const Config_SessionKeymap Config::ATOK;
const Config_SessionKeymap Config::MSIME;
const Config_SessionKeymap Config::KOTOERI;
const Config_SessionKeymap Config::MOBILE;
const Config_SessionKeymap Config::CHROMEOS;
const Config_SessionKeymap Config::SessionKeymap_MIN;
const Config_SessionKeymap Config::SessionKeymap_MAX;
const int Config::SessionKeymap_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Config_PunctuationMethod_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Config_PunctuationMethod_descriptor_;
}
bool Config_PunctuationMethod_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Config_PunctuationMethod Config::KUTEN_TOUTEN;
const Config_PunctuationMethod Config::COMMA_PERIOD;
const Config_PunctuationMethod Config::KUTEN_PERIOD;
const Config_PunctuationMethod Config::COMMA_TOUTEN;
const Config_PunctuationMethod Config::PunctuationMethod_MIN;
const Config_PunctuationMethod Config::PunctuationMethod_MAX;
const int Config::PunctuationMethod_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Config_SymbolMethod_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Config_SymbolMethod_descriptor_;
}
bool Config_SymbolMethod_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Config_SymbolMethod Config::CORNER_BRACKET_MIDDLE_DOT;
const Config_SymbolMethod Config::SQUARE_BRACKET_SLASH;
const Config_SymbolMethod Config::CORNER_BRACKET_SLASH;
const Config_SymbolMethod Config::SQUARE_BRACKET_MIDDLE_DOT;
const Config_SymbolMethod Config::SymbolMethod_MIN;
const Config_SymbolMethod Config::SymbolMethod_MAX;
const int Config::SymbolMethod_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Config_FundamentalCharacterForm_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Config_FundamentalCharacterForm_descriptor_;
}
bool Config_FundamentalCharacterForm_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Config_FundamentalCharacterForm Config::FUNDAMENTAL_INPUT_MODE;
const Config_FundamentalCharacterForm Config::FUNDAMENTAL_FULL_WIDTH;
const Config_FundamentalCharacterForm Config::FUNDAMENTAL_HALF_WIDTH;
const Config_FundamentalCharacterForm Config::FundamentalCharacterForm_MIN;
const Config_FundamentalCharacterForm Config::FundamentalCharacterForm_MAX;
const int Config::FundamentalCharacterForm_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Config_HistoryLearningLevel_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Config_HistoryLearningLevel_descriptor_;
}
bool Config_HistoryLearningLevel_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Config_HistoryLearningLevel Config::DEFAULT_HISTORY;
const Config_HistoryLearningLevel Config::READ_ONLY;
const Config_HistoryLearningLevel Config::NO_HISTORY;
const Config_HistoryLearningLevel Config::HistoryLearningLevel_MIN;
const Config_HistoryLearningLevel Config::HistoryLearningLevel_MAX;
const int Config::HistoryLearningLevel_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Config_SelectionShortcut_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Config_SelectionShortcut_descriptor_;
}
bool Config_SelectionShortcut_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Config_SelectionShortcut Config::NO_SHORTCUT;
const Config_SelectionShortcut Config::SHORTCUT_123456789;
const Config_SelectionShortcut Config::SHORTCUT_ASDFGHJKL;
const Config_SelectionShortcut Config::SelectionShortcut_MIN;
const Config_SelectionShortcut Config::SelectionShortcut_MAX;
const int Config::SelectionShortcut_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Config_CharacterForm_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Config_CharacterForm_descriptor_;
}
bool Config_CharacterForm_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Config_CharacterForm Config::HALF_WIDTH;
const Config_CharacterForm Config::FULL_WIDTH;
const Config_CharacterForm Config::LAST_FORM;
const Config_CharacterForm Config::NO_CONVERSION;
const Config_CharacterForm Config::CharacterForm_MIN;
const Config_CharacterForm Config::CharacterForm_MAX;
const int Config::CharacterForm_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Config_ShiftKeyModeSwitch_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Config_ShiftKeyModeSwitch_descriptor_;
}
bool Config_ShiftKeyModeSwitch_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Config_ShiftKeyModeSwitch Config::OFF;
const Config_ShiftKeyModeSwitch Config::ASCII_INPUT_MODE;
const Config_ShiftKeyModeSwitch Config::KATAKANA_INPUT_MODE;
const Config_ShiftKeyModeSwitch Config::ShiftKeyModeSwitch_MIN;
const Config_ShiftKeyModeSwitch Config::ShiftKeyModeSwitch_MAX;
const int Config::ShiftKeyModeSwitch_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Config_NumpadCharacterForm_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Config_NumpadCharacterForm_descriptor_;
}
bool Config_NumpadCharacterForm_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Config_NumpadCharacterForm Config::NUMPAD_INPUT_MODE;
const Config_NumpadCharacterForm Config::NUMPAD_FULL_WIDTH;
const Config_NumpadCharacterForm Config::NUMPAD_HALF_WIDTH;
const Config_NumpadCharacterForm Config::NUMPAD_DIRECT_INPUT;
const Config_NumpadCharacterForm Config::NumpadCharacterForm_MIN;
const Config_NumpadCharacterForm Config::NumpadCharacterForm_MAX;
const int Config::NumpadCharacterForm_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Config_AutoConversionKey_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Config_AutoConversionKey_descriptor_;
}
bool Config_AutoConversionKey_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Config_AutoConversionKey Config::AUTO_CONVERSION_OFF;
const Config_AutoConversionKey Config::AUTO_CONVERSION_KUTEN;
const Config_AutoConversionKey Config::AUTO_CONVERSION_TOUTEN;
const Config_AutoConversionKey Config::AUTO_CONVERSION_QUESTION_MARK;
const Config_AutoConversionKey Config::AUTO_CONVERSION_EXCLAMATION_MARK;
const Config_AutoConversionKey Config::AutoConversionKey_MIN;
const Config_AutoConversionKey Config::AutoConversionKey_MAX;
const int Config::AutoConversionKey_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Config_YenSignCharacter_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Config_YenSignCharacter_descriptor_;
}
bool Config_YenSignCharacter_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Config_YenSignCharacter Config::YEN_SIGN;
const Config_YenSignCharacter Config::BACKSLASH;
const Config_YenSignCharacter Config::YenSignCharacter_MIN;
const Config_YenSignCharacter Config::YenSignCharacter_MAX;
const int Config::YenSignCharacter_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Config_CharacterFormRule::kGroupFieldNumber;
const int Config_CharacterFormRule::kPreeditCharacterFormFieldNumber;
const int Config_CharacterFormRule::kConversionCharacterFormFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Config_CharacterFormRule::Config_CharacterFormRule()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mozc.config.Config.CharacterFormRule)
}

void Config_CharacterFormRule::InitAsDefaultInstance() {
}

Config_CharacterFormRule::Config_CharacterFormRule(const Config_CharacterFormRule& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mozc.config.Config.CharacterFormRule)
}

void Config_CharacterFormRule::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  group_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  preedit_character_form_ = 1;
  conversion_character_form_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Config_CharacterFormRule::~Config_CharacterFormRule() {
  // @@protoc_insertion_point(destructor:mozc.config.Config.CharacterFormRule)
  SharedDtor();
}

void Config_CharacterFormRule::SharedDtor() {
  group_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Config_CharacterFormRule::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Config_CharacterFormRule::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Config_CharacterFormRule_descriptor_;
}

const Config_CharacterFormRule& Config_CharacterFormRule::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2fconfig_2eproto();
  return *default_instance_;
}

Config_CharacterFormRule* Config_CharacterFormRule::default_instance_ = NULL;

Config_CharacterFormRule* Config_CharacterFormRule::New(::google::protobuf::Arena* arena) const {
  Config_CharacterFormRule* n = new Config_CharacterFormRule;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Config_CharacterFormRule::Clear() {
// @@protoc_insertion_point(message_clear_start:mozc.config.Config.CharacterFormRule)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_group()) {
      group_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    preedit_character_form_ = 1;
    conversion_character_form_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Config_CharacterFormRule::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mozc.config.Config.CharacterFormRule)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string group = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->group().data(), this->group().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mozc.config.Config.CharacterFormRule.group");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_preedit_character_form;
        break;
      }

      // optional .mozc.config.Config.CharacterForm preedit_character_form = 2 [default = FULL_WIDTH];
      case 2: {
        if (tag == 16) {
         parse_preedit_character_form:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mozc::config::Config_CharacterForm_IsValid(value)) {
            set_preedit_character_form(static_cast< ::mozc::config::Config_CharacterForm >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_conversion_character_form;
        break;
      }

      // optional .mozc.config.Config.CharacterForm conversion_character_form = 3 [default = FULL_WIDTH];
      case 3: {
        if (tag == 24) {
         parse_conversion_character_form:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mozc::config::Config_CharacterForm_IsValid(value)) {
            set_conversion_character_form(static_cast< ::mozc::config::Config_CharacterForm >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mozc.config.Config.CharacterFormRule)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mozc.config.Config.CharacterFormRule)
  return false;
#undef DO_
}

void Config_CharacterFormRule::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mozc.config.Config.CharacterFormRule)
  // optional string group = 1;
  if (has_group()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->group().data(), this->group().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mozc.config.Config.CharacterFormRule.group");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->group(), output);
  }

  // optional .mozc.config.Config.CharacterForm preedit_character_form = 2 [default = FULL_WIDTH];
  if (has_preedit_character_form()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->preedit_character_form(), output);
  }

  // optional .mozc.config.Config.CharacterForm conversion_character_form = 3 [default = FULL_WIDTH];
  if (has_conversion_character_form()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->conversion_character_form(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mozc.config.Config.CharacterFormRule)
}

::google::protobuf::uint8* Config_CharacterFormRule::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mozc.config.Config.CharacterFormRule)
  // optional string group = 1;
  if (has_group()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->group().data(), this->group().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mozc.config.Config.CharacterFormRule.group");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->group(), target);
  }

  // optional .mozc.config.Config.CharacterForm preedit_character_form = 2 [default = FULL_WIDTH];
  if (has_preedit_character_form()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->preedit_character_form(), target);
  }

  // optional .mozc.config.Config.CharacterForm conversion_character_form = 3 [default = FULL_WIDTH];
  if (has_conversion_character_form()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->conversion_character_form(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mozc.config.Config.CharacterFormRule)
  return target;
}

int Config_CharacterFormRule::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:mozc.config.Config.CharacterFormRule)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional string group = 1;
    if (has_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->group());
    }

    // optional .mozc.config.Config.CharacterForm preedit_character_form = 2 [default = FULL_WIDTH];
    if (has_preedit_character_form()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->preedit_character_form());
    }

    // optional .mozc.config.Config.CharacterForm conversion_character_form = 3 [default = FULL_WIDTH];
    if (has_conversion_character_form()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->conversion_character_form());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Config_CharacterFormRule::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mozc.config.Config.CharacterFormRule)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Config_CharacterFormRule* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Config_CharacterFormRule>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mozc.config.Config.CharacterFormRule)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mozc.config.Config.CharacterFormRule)
    MergeFrom(*source);
  }
}

void Config_CharacterFormRule::MergeFrom(const Config_CharacterFormRule& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mozc.config.Config.CharacterFormRule)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_group()) {
      set_has_group();
      group_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.group_);
    }
    if (from.has_preedit_character_form()) {
      set_preedit_character_form(from.preedit_character_form());
    }
    if (from.has_conversion_character_form()) {
      set_conversion_character_form(from.conversion_character_form());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Config_CharacterFormRule::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mozc.config.Config.CharacterFormRule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Config_CharacterFormRule::CopyFrom(const Config_CharacterFormRule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mozc.config.Config.CharacterFormRule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Config_CharacterFormRule::IsInitialized() const {

  return true;
}

void Config_CharacterFormRule::Swap(Config_CharacterFormRule* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Config_CharacterFormRule::InternalSwap(Config_CharacterFormRule* other) {
  group_.Swap(&other->group_);
  std::swap(preedit_character_form_, other->preedit_character_form_);
  std::swap(conversion_character_form_, other->conversion_character_form_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Config_CharacterFormRule::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Config_CharacterFormRule_descriptor_;
  metadata.reflection = Config_CharacterFormRule_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Config_InformationListConfig::kUseLocalUsageDictionaryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Config_InformationListConfig::Config_InformationListConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mozc.config.Config.InformationListConfig)
}

void Config_InformationListConfig::InitAsDefaultInstance() {
}

Config_InformationListConfig::Config_InformationListConfig(const Config_InformationListConfig& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mozc.config.Config.InformationListConfig)
}

void Config_InformationListConfig::SharedCtor() {
  _cached_size_ = 0;
  use_local_usage_dictionary_ = true;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Config_InformationListConfig::~Config_InformationListConfig() {
  // @@protoc_insertion_point(destructor:mozc.config.Config.InformationListConfig)
  SharedDtor();
}

void Config_InformationListConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Config_InformationListConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Config_InformationListConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Config_InformationListConfig_descriptor_;
}

const Config_InformationListConfig& Config_InformationListConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2fconfig_2eproto();
  return *default_instance_;
}

Config_InformationListConfig* Config_InformationListConfig::default_instance_ = NULL;

Config_InformationListConfig* Config_InformationListConfig::New(::google::protobuf::Arena* arena) const {
  Config_InformationListConfig* n = new Config_InformationListConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Config_InformationListConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:mozc.config.Config.InformationListConfig)
  use_local_usage_dictionary_ = true;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Config_InformationListConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mozc.config.Config.InformationListConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool use_local_usage_dictionary = 1 [default = true];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_local_usage_dictionary_)));
          set_has_use_local_usage_dictionary();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mozc.config.Config.InformationListConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mozc.config.Config.InformationListConfig)
  return false;
#undef DO_
}

void Config_InformationListConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mozc.config.Config.InformationListConfig)
  // optional bool use_local_usage_dictionary = 1 [default = true];
  if (has_use_local_usage_dictionary()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->use_local_usage_dictionary(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mozc.config.Config.InformationListConfig)
}

::google::protobuf::uint8* Config_InformationListConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mozc.config.Config.InformationListConfig)
  // optional bool use_local_usage_dictionary = 1 [default = true];
  if (has_use_local_usage_dictionary()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->use_local_usage_dictionary(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mozc.config.Config.InformationListConfig)
  return target;
}

int Config_InformationListConfig::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:mozc.config.Config.InformationListConfig)
  int total_size = 0;

  // optional bool use_local_usage_dictionary = 1 [default = true];
  if (has_use_local_usage_dictionary()) {
    total_size += 1 + 1;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Config_InformationListConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mozc.config.Config.InformationListConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Config_InformationListConfig* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Config_InformationListConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mozc.config.Config.InformationListConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mozc.config.Config.InformationListConfig)
    MergeFrom(*source);
  }
}

void Config_InformationListConfig::MergeFrom(const Config_InformationListConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mozc.config.Config.InformationListConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_use_local_usage_dictionary()) {
      set_use_local_usage_dictionary(from.use_local_usage_dictionary());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Config_InformationListConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mozc.config.Config.InformationListConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Config_InformationListConfig::CopyFrom(const Config_InformationListConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mozc.config.Config.InformationListConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Config_InformationListConfig::IsInitialized() const {

  return true;
}

void Config_InformationListConfig::Swap(Config_InformationListConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Config_InformationListConfig::InternalSwap(Config_InformationListConfig* other) {
  std::swap(use_local_usage_dictionary_, other->use_local_usage_dictionary_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Config_InformationListConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Config_InformationListConfig_descriptor_;
  metadata.reflection = Config_InformationListConfig_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Config::kGeneralConfigFieldNumber;
const int Config::kVerboseLevelFieldNumber;
const int Config::kIncognitoModeFieldNumber;
const int Config::kCheckDefaultFieldNumber;
const int Config::kPresentationModeFieldNumber;
const int Config::kPreeditMethodFieldNumber;
const int Config::kSessionKeymapFieldNumber;
const int Config::kCustomKeymapTableFieldNumber;
const int Config::kCustomRomanTableFieldNumber;
const int Config::kPunctuationMethodFieldNumber;
const int Config::kSymbolMethodFieldNumber;
const int Config::kSpaceCharacterFormFieldNumber;
const int Config::kUseKeyboardToChangePreeditMethodFieldNumber;
const int Config::kHistoryLearningLevelFieldNumber;
const int Config::kSelectionShortcutFieldNumber;
const int Config::kCharacterFormRulesFieldNumber;
const int Config::kUseAutoImeTurnOffFieldNumber;
const int Config::kUseCascadingWindowFieldNumber;
const int Config::kShiftKeyModeSwitchFieldNumber;
const int Config::kNumpadCharacterFormFieldNumber;
const int Config::kUseAutoConversionFieldNumber;
const int Config::kAutoConversionKeyFieldNumber;
const int Config::kYenSignCharacterFieldNumber;
const int Config::kUseJapaneseLayoutFieldNumber;
const int Config::kUseKanaModifierInsensitiveConversionFieldNumber;
const int Config::kUseTypingCorrectionFieldNumber;
const int Config::kUseDateConversionFieldNumber;
const int Config::kUseSingleKanjiConversionFieldNumber;
const int Config::kUseSymbolConversionFieldNumber;
const int Config::kUseNumberConversionFieldNumber;
const int Config::kUseEmoticonConversionFieldNumber;
const int Config::kUseCalculatorFieldNumber;
const int Config::kUseT13NConversionFieldNumber;
const int Config::kUseZipCodeConversionFieldNumber;
const int Config::kUseSpellingCorrectionFieldNumber;
const int Config::kUseEmojiConversionFieldNumber;
const int Config::kInformationListConfigFieldNumber;
const int Config::kUseHistorySuggestFieldNumber;
const int Config::kUseDictionarySuggestFieldNumber;
const int Config::kUseRealtimeConversionFieldNumber;
const int Config::kSuggestionsSizeFieldNumber;
const int Config::kUseModeIndicatorFieldNumber;
const int Config::kAllowCloudHandwritingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Config::Config()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mozc.config.Config)
}

void Config::InitAsDefaultInstance() {
  general_config_ = const_cast< ::mozc::config::GeneralConfig*>(&::mozc::config::GeneralConfig::default_instance());
  information_list_config_ = const_cast< ::mozc::config::Config_InformationListConfig*>(&::mozc::config::Config_InformationListConfig::default_instance());
}

Config::Config(const Config& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mozc.config.Config)
}

void Config::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  general_config_ = NULL;
  verbose_level_ = 0;
  incognito_mode_ = false;
  check_default_ = true;
  presentation_mode_ = false;
  preedit_method_ = 0;
  session_keymap_ = -1;
  custom_keymap_table_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  custom_roman_table_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  punctuation_method_ = 0;
  symbol_method_ = 0;
  space_character_form_ = 0;
  use_keyboard_to_change_preedit_method_ = false;
  history_learning_level_ = 0;
  selection_shortcut_ = 1;
  use_auto_ime_turn_off_ = true;
  use_cascading_window_ = true;
  shift_key_mode_switch_ = 1;
  numpad_character_form_ = 2;
  use_auto_conversion_ = false;
  auto_conversion_key_ = 13u;
  yen_sign_character_ = 0;
  use_japanese_layout_ = false;
  use_kana_modifier_insensitive_conversion_ = false;
  use_typing_correction_ = false;
  use_date_conversion_ = true;
  use_single_kanji_conversion_ = true;
  use_symbol_conversion_ = true;
  use_number_conversion_ = true;
  use_emoticon_conversion_ = true;
  use_calculator_ = true;
  use_t13n_conversion_ = true;
  use_zip_code_conversion_ = true;
  use_spelling_correction_ = true;
  use_emoji_conversion_ = false;
  information_list_config_ = NULL;
  use_history_suggest_ = true;
  use_dictionary_suggest_ = true;
  use_realtime_conversion_ = true;
  suggestions_size_ = 3u;
  use_mode_indicator_ = true;
  allow_cloud_handwriting_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Config::~Config() {
  // @@protoc_insertion_point(destructor:mozc.config.Config)
  SharedDtor();
}

void Config::SharedDtor() {
  custom_keymap_table_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  custom_roman_table_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete general_config_;
    delete information_list_config_;
  }
}

void Config::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Config::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Config_descriptor_;
}

const Config& Config::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2fconfig_2eproto();
  return *default_instance_;
}

Config* Config::default_instance_ = NULL;

Config* Config::New(::google::protobuf::Arena* arena) const {
  Config* n = new Config;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Config::Clear() {
// @@protoc_insertion_point(message_clear_start:mozc.config.Config)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Config, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Config*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(verbose_level_, incognito_mode_);
    if (has_general_config()) {
      if (general_config_ != NULL) general_config_->::mozc::config::GeneralConfig::Clear();
    }
    check_default_ = true;
    presentation_mode_ = false;
    session_keymap_ = -1;
    if (has_custom_keymap_table()) {
      custom_keymap_table_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  if (_has_bits_[8 / 32] & 32512u) {
    ZR_(punctuation_method_, history_learning_level_);
    if (has_custom_roman_table()) {
      custom_roman_table_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    use_keyboard_to_change_preedit_method_ = false;
    selection_shortcut_ = 1;
  }
  if (_has_bits_[16 / 32] & 16711680u) {
    ZR_(use_auto_conversion_, use_japanese_layout_);
    use_auto_ime_turn_off_ = true;
    use_cascading_window_ = true;
    shift_key_mode_switch_ = 1;
    numpad_character_form_ = 2;
    auto_conversion_key_ = 13u;
    yen_sign_character_ = 0;
  }
  if (_has_bits_[24 / 32] & 4278190080u) {
    ZR_(use_kana_modifier_insensitive_conversion_, use_typing_correction_);
    use_date_conversion_ = true;
    use_single_kanji_conversion_ = true;
    use_symbol_conversion_ = true;
    use_number_conversion_ = true;
    use_emoticon_conversion_ = true;
    use_calculator_ = true;
  }
  if (_has_bits_[32 / 32] & 255u) {
    use_t13n_conversion_ = true;
    use_zip_code_conversion_ = true;
    use_spelling_correction_ = true;
    use_emoji_conversion_ = false;
    if (has_information_list_config()) {
      if (information_list_config_ != NULL) information_list_config_->::mozc::config::Config_InformationListConfig::Clear();
    }
    use_history_suggest_ = true;
    use_dictionary_suggest_ = true;
    use_realtime_conversion_ = true;
  }
  if (_has_bits_[40 / 32] & 1792u) {
    suggestions_size_ = 3u;
    use_mode_indicator_ = true;
    allow_cloud_handwriting_ = false;
  }

#undef ZR_HELPER_
#undef ZR_

  character_form_rules_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Config::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mozc.config.Config)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .mozc.config.GeneralConfig general_config = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_general_config()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_verbose_level;
        break;
      }

      // optional int32 verbose_level = 10 [default = 0];
      case 10: {
        if (tag == 80) {
         parse_verbose_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &verbose_level_)));
          set_has_verbose_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_incognito_mode;
        break;
      }

      // optional bool incognito_mode = 20 [default = false];
      case 20: {
        if (tag == 160) {
         parse_incognito_mode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &incognito_mode_)));
          set_has_incognito_mode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_check_default;
        break;
      }

      // optional bool check_default = 22 [default = true];
      case 22: {
        if (tag == 176) {
         parse_check_default:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &check_default_)));
          set_has_check_default();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(184)) goto parse_presentation_mode;
        break;
      }

      // optional bool presentation_mode = 23 [default = false];
      case 23: {
        if (tag == 184) {
         parse_presentation_mode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &presentation_mode_)));
          set_has_presentation_mode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(320)) goto parse_preedit_method;
        break;
      }

      // optional .mozc.config.Config.PreeditMethod preedit_method = 40 [default = ROMAN];
      case 40: {
        if (tag == 320) {
         parse_preedit_method:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mozc::config::Config_PreeditMethod_IsValid(value)) {
            set_preedit_method(static_cast< ::mozc::config::Config_PreeditMethod >(value));
          } else {
            mutable_unknown_fields()->AddVarint(40, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(328)) goto parse_session_keymap;
        break;
      }

      // optional .mozc.config.Config.SessionKeymap session_keymap = 41 [default = NONE];
      case 41: {
        if (tag == 328) {
         parse_session_keymap:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mozc::config::Config_SessionKeymap_IsValid(value)) {
            set_session_keymap(static_cast< ::mozc::config::Config_SessionKeymap >(value));
          } else {
            mutable_unknown_fields()->AddVarint(41, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(338)) goto parse_custom_keymap_table;
        break;
      }

      // optional bytes custom_keymap_table = 42;
      case 42: {
        if (tag == 338) {
         parse_custom_keymap_table:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_custom_keymap_table()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(346)) goto parse_custom_roman_table;
        break;
      }

      // optional bytes custom_roman_table = 43;
      case 43: {
        if (tag == 346) {
         parse_custom_roman_table:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_custom_roman_table()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(360)) goto parse_punctuation_method;
        break;
      }

      // optional .mozc.config.Config.PunctuationMethod punctuation_method = 45 [default = KUTEN_TOUTEN];
      case 45: {
        if (tag == 360) {
         parse_punctuation_method:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mozc::config::Config_PunctuationMethod_IsValid(value)) {
            set_punctuation_method(static_cast< ::mozc::config::Config_PunctuationMethod >(value));
          } else {
            mutable_unknown_fields()->AddVarint(45, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(368)) goto parse_symbol_method;
        break;
      }

      // optional .mozc.config.Config.SymbolMethod symbol_method = 46 [default = CORNER_BRACKET_MIDDLE_DOT];
      case 46: {
        if (tag == 368) {
         parse_symbol_method:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mozc::config::Config_SymbolMethod_IsValid(value)) {
            set_symbol_method(static_cast< ::mozc::config::Config_SymbolMethod >(value));
          } else {
            mutable_unknown_fields()->AddVarint(46, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(376)) goto parse_space_character_form;
        break;
      }

      // optional .mozc.config.Config.FundamentalCharacterForm space_character_form = 47 [default = FUNDAMENTAL_INPUT_MODE];
      case 47: {
        if (tag == 376) {
         parse_space_character_form:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mozc::config::Config_FundamentalCharacterForm_IsValid(value)) {
            set_space_character_form(static_cast< ::mozc::config::Config_FundamentalCharacterForm >(value));
          } else {
            mutable_unknown_fields()->AddVarint(47, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(384)) goto parse_use_keyboard_to_change_preedit_method;
        break;
      }

      // optional bool use_keyboard_to_change_preedit_method = 48 [default = false];
      case 48: {
        if (tag == 384) {
         parse_use_keyboard_to_change_preedit_method:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_keyboard_to_change_preedit_method_)));
          set_has_use_keyboard_to_change_preedit_method();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(400)) goto parse_history_learning_level;
        break;
      }

      // optional .mozc.config.Config.HistoryLearningLevel history_learning_level = 50 [default = DEFAULT_HISTORY];
      case 50: {
        if (tag == 400) {
         parse_history_learning_level:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mozc::config::Config_HistoryLearningLevel_IsValid(value)) {
            set_history_learning_level(static_cast< ::mozc::config::Config_HistoryLearningLevel >(value));
          } else {
            mutable_unknown_fields()->AddVarint(50, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(416)) goto parse_selection_shortcut;
        break;
      }

      // optional .mozc.config.Config.SelectionShortcut selection_shortcut = 52 [default = SHORTCUT_123456789];
      case 52: {
        if (tag == 416) {
         parse_selection_shortcut:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mozc::config::Config_SelectionShortcut_IsValid(value)) {
            set_selection_shortcut(static_cast< ::mozc::config::Config_SelectionShortcut >(value));
          } else {
            mutable_unknown_fields()->AddVarint(52, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(434)) goto parse_character_form_rules;
        break;
      }

      // repeated .mozc.config.Config.CharacterFormRule character_form_rules = 54;
      case 54: {
        if (tag == 434) {
         parse_character_form_rules:
          DO_(input->IncrementRecursionDepth());
         parse_loop_character_form_rules:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_character_form_rules()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(434)) goto parse_loop_character_form_rules;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(448)) goto parse_use_auto_ime_turn_off;
        break;
      }

      // optional bool use_auto_ime_turn_off = 56 [default = true];
      case 56: {
        if (tag == 448) {
         parse_use_auto_ime_turn_off:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_auto_ime_turn_off_)));
          set_has_use_auto_ime_turn_off();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(464)) goto parse_use_cascading_window;
        break;
      }

      // optional bool use_cascading_window = 58 [default = true];
      case 58: {
        if (tag == 464) {
         parse_use_cascading_window:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_cascading_window_)));
          set_has_use_cascading_window();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(472)) goto parse_shift_key_mode_switch;
        break;
      }

      // optional .mozc.config.Config.ShiftKeyModeSwitch shift_key_mode_switch = 59 [default = ASCII_INPUT_MODE];
      case 59: {
        if (tag == 472) {
         parse_shift_key_mode_switch:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mozc::config::Config_ShiftKeyModeSwitch_IsValid(value)) {
            set_shift_key_mode_switch(static_cast< ::mozc::config::Config_ShiftKeyModeSwitch >(value));
          } else {
            mutable_unknown_fields()->AddVarint(59, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(480)) goto parse_numpad_character_form;
        break;
      }

      // optional .mozc.config.Config.NumpadCharacterForm numpad_character_form = 60 [default = NUMPAD_HALF_WIDTH];
      case 60: {
        if (tag == 480) {
         parse_numpad_character_form:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mozc::config::Config_NumpadCharacterForm_IsValid(value)) {
            set_numpad_character_form(static_cast< ::mozc::config::Config_NumpadCharacterForm >(value));
          } else {
            mutable_unknown_fields()->AddVarint(60, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(488)) goto parse_use_auto_conversion;
        break;
      }

      // optional bool use_auto_conversion = 61 [default = false];
      case 61: {
        if (tag == 488) {
         parse_use_auto_conversion:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_auto_conversion_)));
          set_has_use_auto_conversion();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(496)) goto parse_auto_conversion_key;
        break;
      }

      // optional uint32 auto_conversion_key = 62 [default = 13];
      case 62: {
        if (tag == 496) {
         parse_auto_conversion_key:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &auto_conversion_key_)));
          set_has_auto_conversion_key();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(504)) goto parse_yen_sign_character;
        break;
      }

      // optional .mozc.config.Config.YenSignCharacter yen_sign_character = 63 [default = YEN_SIGN];
      case 63: {
        if (tag == 504) {
         parse_yen_sign_character:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mozc::config::Config_YenSignCharacter_IsValid(value)) {
            set_yen_sign_character(static_cast< ::mozc::config::Config_YenSignCharacter >(value));
          } else {
            mutable_unknown_fields()->AddVarint(63, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(512)) goto parse_use_japanese_layout;
        break;
      }

      // optional bool use_japanese_layout = 64 [default = false];
      case 64: {
        if (tag == 512) {
         parse_use_japanese_layout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_japanese_layout_)));
          set_has_use_japanese_layout();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(520)) goto parse_use_kana_modifier_insensitive_conversion;
        break;
      }

      // optional bool use_kana_modifier_insensitive_conversion = 65 [default = false];
      case 65: {
        if (tag == 520) {
         parse_use_kana_modifier_insensitive_conversion:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_kana_modifier_insensitive_conversion_)));
          set_has_use_kana_modifier_insensitive_conversion();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(528)) goto parse_use_typing_correction;
        break;
      }

      // optional bool use_typing_correction = 66 [default = false];
      case 66: {
        if (tag == 528) {
         parse_use_typing_correction:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_typing_correction_)));
          set_has_use_typing_correction();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(640)) goto parse_use_date_conversion;
        break;
      }

      // optional bool use_date_conversion = 80 [default = true];
      case 80: {
        if (tag == 640) {
         parse_use_date_conversion:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_date_conversion_)));
          set_has_use_date_conversion();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(648)) goto parse_use_single_kanji_conversion;
        break;
      }

      // optional bool use_single_kanji_conversion = 81 [default = true];
      case 81: {
        if (tag == 648) {
         parse_use_single_kanji_conversion:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_single_kanji_conversion_)));
          set_has_use_single_kanji_conversion();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(656)) goto parse_use_symbol_conversion;
        break;
      }

      // optional bool use_symbol_conversion = 82 [default = true];
      case 82: {
        if (tag == 656) {
         parse_use_symbol_conversion:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_symbol_conversion_)));
          set_has_use_symbol_conversion();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(664)) goto parse_use_number_conversion;
        break;
      }

      // optional bool use_number_conversion = 83 [default = true];
      case 83: {
        if (tag == 664) {
         parse_use_number_conversion:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_number_conversion_)));
          set_has_use_number_conversion();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(672)) goto parse_use_emoticon_conversion;
        break;
      }

      // optional bool use_emoticon_conversion = 84 [default = true];
      case 84: {
        if (tag == 672) {
         parse_use_emoticon_conversion:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_emoticon_conversion_)));
          set_has_use_emoticon_conversion();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(680)) goto parse_use_calculator;
        break;
      }

      // optional bool use_calculator = 85 [default = true];
      case 85: {
        if (tag == 680) {
         parse_use_calculator:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_calculator_)));
          set_has_use_calculator();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(688)) goto parse_use_t13n_conversion;
        break;
      }

      // optional bool use_t13n_conversion = 86 [default = true];
      case 86: {
        if (tag == 688) {
         parse_use_t13n_conversion:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_t13n_conversion_)));
          set_has_use_t13n_conversion();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(696)) goto parse_use_zip_code_conversion;
        break;
      }

      // optional bool use_zip_code_conversion = 87 [default = true];
      case 87: {
        if (tag == 696) {
         parse_use_zip_code_conversion:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_zip_code_conversion_)));
          set_has_use_zip_code_conversion();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(704)) goto parse_use_spelling_correction;
        break;
      }

      // optional bool use_spelling_correction = 88 [default = true];
      case 88: {
        if (tag == 704) {
         parse_use_spelling_correction:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_spelling_correction_)));
          set_has_use_spelling_correction();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(712)) goto parse_use_emoji_conversion;
        break;
      }

      // optional bool use_emoji_conversion = 89 [default = false];
      case 89: {
        if (tag == 712) {
         parse_use_emoji_conversion:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_emoji_conversion_)));
          set_has_use_emoji_conversion();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(722)) goto parse_information_list_config;
        break;
      }

      // optional .mozc.config.Config.InformationListConfig information_list_config = 90;
      case 90: {
        if (tag == 722) {
         parse_information_list_config:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_information_list_config()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(800)) goto parse_use_history_suggest;
        break;
      }

      // optional bool use_history_suggest = 100 [default = true];
      case 100: {
        if (tag == 800) {
         parse_use_history_suggest:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_history_suggest_)));
          set_has_use_history_suggest();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(808)) goto parse_use_dictionary_suggest;
        break;
      }

      // optional bool use_dictionary_suggest = 101 [default = true];
      case 101: {
        if (tag == 808) {
         parse_use_dictionary_suggest:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_dictionary_suggest_)));
          set_has_use_dictionary_suggest();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(816)) goto parse_use_realtime_conversion;
        break;
      }

      // optional bool use_realtime_conversion = 102 [default = true];
      case 102: {
        if (tag == 816) {
         parse_use_realtime_conversion:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_realtime_conversion_)));
          set_has_use_realtime_conversion();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(880)) goto parse_suggestions_size;
        break;
      }

      // optional uint32 suggestions_size = 110 [default = 3];
      case 110: {
        if (tag == 880) {
         parse_suggestions_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &suggestions_size_)));
          set_has_suggestions_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(960)) goto parse_use_mode_indicator;
        break;
      }

      // optional bool use_mode_indicator = 120 [default = true];
      case 120: {
        if (tag == 960) {
         parse_use_mode_indicator:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_mode_indicator_)));
          set_has_use_mode_indicator();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(2408)) goto parse_allow_cloud_handwriting;
        break;
      }

      // optional bool allow_cloud_handwriting = 301 [default = false];
      case 301: {
        if (tag == 2408) {
         parse_allow_cloud_handwriting:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &allow_cloud_handwriting_)));
          set_has_allow_cloud_handwriting();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mozc.config.Config)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mozc.config.Config)
  return false;
#undef DO_
}

void Config::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mozc.config.Config)
  // optional .mozc.config.GeneralConfig general_config = 1;
  if (has_general_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->general_config_, output);
  }

  // optional int32 verbose_level = 10 [default = 0];
  if (has_verbose_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->verbose_level(), output);
  }

  // optional bool incognito_mode = 20 [default = false];
  if (has_incognito_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(20, this->incognito_mode(), output);
  }

  // optional bool check_default = 22 [default = true];
  if (has_check_default()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(22, this->check_default(), output);
  }

  // optional bool presentation_mode = 23 [default = false];
  if (has_presentation_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(23, this->presentation_mode(), output);
  }

  // optional .mozc.config.Config.PreeditMethod preedit_method = 40 [default = ROMAN];
  if (has_preedit_method()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      40, this->preedit_method(), output);
  }

  // optional .mozc.config.Config.SessionKeymap session_keymap = 41 [default = NONE];
  if (has_session_keymap()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      41, this->session_keymap(), output);
  }

  // optional bytes custom_keymap_table = 42;
  if (has_custom_keymap_table()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      42, this->custom_keymap_table(), output);
  }

  // optional bytes custom_roman_table = 43;
  if (has_custom_roman_table()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      43, this->custom_roman_table(), output);
  }

  // optional .mozc.config.Config.PunctuationMethod punctuation_method = 45 [default = KUTEN_TOUTEN];
  if (has_punctuation_method()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      45, this->punctuation_method(), output);
  }

  // optional .mozc.config.Config.SymbolMethod symbol_method = 46 [default = CORNER_BRACKET_MIDDLE_DOT];
  if (has_symbol_method()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      46, this->symbol_method(), output);
  }

  // optional .mozc.config.Config.FundamentalCharacterForm space_character_form = 47 [default = FUNDAMENTAL_INPUT_MODE];
  if (has_space_character_form()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      47, this->space_character_form(), output);
  }

  // optional bool use_keyboard_to_change_preedit_method = 48 [default = false];
  if (has_use_keyboard_to_change_preedit_method()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(48, this->use_keyboard_to_change_preedit_method(), output);
  }

  // optional .mozc.config.Config.HistoryLearningLevel history_learning_level = 50 [default = DEFAULT_HISTORY];
  if (has_history_learning_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      50, this->history_learning_level(), output);
  }

  // optional .mozc.config.Config.SelectionShortcut selection_shortcut = 52 [default = SHORTCUT_123456789];
  if (has_selection_shortcut()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      52, this->selection_shortcut(), output);
  }

  // repeated .mozc.config.Config.CharacterFormRule character_form_rules = 54;
  for (unsigned int i = 0, n = this->character_form_rules_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      54, this->character_form_rules(i), output);
  }

  // optional bool use_auto_ime_turn_off = 56 [default = true];
  if (has_use_auto_ime_turn_off()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(56, this->use_auto_ime_turn_off(), output);
  }

  // optional bool use_cascading_window = 58 [default = true];
  if (has_use_cascading_window()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(58, this->use_cascading_window(), output);
  }

  // optional .mozc.config.Config.ShiftKeyModeSwitch shift_key_mode_switch = 59 [default = ASCII_INPUT_MODE];
  if (has_shift_key_mode_switch()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      59, this->shift_key_mode_switch(), output);
  }

  // optional .mozc.config.Config.NumpadCharacterForm numpad_character_form = 60 [default = NUMPAD_HALF_WIDTH];
  if (has_numpad_character_form()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      60, this->numpad_character_form(), output);
  }

  // optional bool use_auto_conversion = 61 [default = false];
  if (has_use_auto_conversion()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(61, this->use_auto_conversion(), output);
  }

  // optional uint32 auto_conversion_key = 62 [default = 13];
  if (has_auto_conversion_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(62, this->auto_conversion_key(), output);
  }

  // optional .mozc.config.Config.YenSignCharacter yen_sign_character = 63 [default = YEN_SIGN];
  if (has_yen_sign_character()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      63, this->yen_sign_character(), output);
  }

  // optional bool use_japanese_layout = 64 [default = false];
  if (has_use_japanese_layout()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(64, this->use_japanese_layout(), output);
  }

  // optional bool use_kana_modifier_insensitive_conversion = 65 [default = false];
  if (has_use_kana_modifier_insensitive_conversion()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(65, this->use_kana_modifier_insensitive_conversion(), output);
  }

  // optional bool use_typing_correction = 66 [default = false];
  if (has_use_typing_correction()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(66, this->use_typing_correction(), output);
  }

  // optional bool use_date_conversion = 80 [default = true];
  if (has_use_date_conversion()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(80, this->use_date_conversion(), output);
  }

  // optional bool use_single_kanji_conversion = 81 [default = true];
  if (has_use_single_kanji_conversion()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(81, this->use_single_kanji_conversion(), output);
  }

  // optional bool use_symbol_conversion = 82 [default = true];
  if (has_use_symbol_conversion()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(82, this->use_symbol_conversion(), output);
  }

  // optional bool use_number_conversion = 83 [default = true];
  if (has_use_number_conversion()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(83, this->use_number_conversion(), output);
  }

  // optional bool use_emoticon_conversion = 84 [default = true];
  if (has_use_emoticon_conversion()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(84, this->use_emoticon_conversion(), output);
  }

  // optional bool use_calculator = 85 [default = true];
  if (has_use_calculator()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(85, this->use_calculator(), output);
  }

  // optional bool use_t13n_conversion = 86 [default = true];
  if (has_use_t13n_conversion()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(86, this->use_t13n_conversion(), output);
  }

  // optional bool use_zip_code_conversion = 87 [default = true];
  if (has_use_zip_code_conversion()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(87, this->use_zip_code_conversion(), output);
  }

  // optional bool use_spelling_correction = 88 [default = true];
  if (has_use_spelling_correction()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(88, this->use_spelling_correction(), output);
  }

  // optional bool use_emoji_conversion = 89 [default = false];
  if (has_use_emoji_conversion()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(89, this->use_emoji_conversion(), output);
  }

  // optional .mozc.config.Config.InformationListConfig information_list_config = 90;
  if (has_information_list_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      90, *this->information_list_config_, output);
  }

  // optional bool use_history_suggest = 100 [default = true];
  if (has_use_history_suggest()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(100, this->use_history_suggest(), output);
  }

  // optional bool use_dictionary_suggest = 101 [default = true];
  if (has_use_dictionary_suggest()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(101, this->use_dictionary_suggest(), output);
  }

  // optional bool use_realtime_conversion = 102 [default = true];
  if (has_use_realtime_conversion()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(102, this->use_realtime_conversion(), output);
  }

  // optional uint32 suggestions_size = 110 [default = 3];
  if (has_suggestions_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(110, this->suggestions_size(), output);
  }

  // optional bool use_mode_indicator = 120 [default = true];
  if (has_use_mode_indicator()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(120, this->use_mode_indicator(), output);
  }

  // optional bool allow_cloud_handwriting = 301 [default = false];
  if (has_allow_cloud_handwriting()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(301, this->allow_cloud_handwriting(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mozc.config.Config)
}

::google::protobuf::uint8* Config::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mozc.config.Config)
  // optional .mozc.config.GeneralConfig general_config = 1;
  if (has_general_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->general_config_, false, target);
  }

  // optional int32 verbose_level = 10 [default = 0];
  if (has_verbose_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->verbose_level(), target);
  }

  // optional bool incognito_mode = 20 [default = false];
  if (has_incognito_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(20, this->incognito_mode(), target);
  }

  // optional bool check_default = 22 [default = true];
  if (has_check_default()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(22, this->check_default(), target);
  }

  // optional bool presentation_mode = 23 [default = false];
  if (has_presentation_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(23, this->presentation_mode(), target);
  }

  // optional .mozc.config.Config.PreeditMethod preedit_method = 40 [default = ROMAN];
  if (has_preedit_method()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      40, this->preedit_method(), target);
  }

  // optional .mozc.config.Config.SessionKeymap session_keymap = 41 [default = NONE];
  if (has_session_keymap()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      41, this->session_keymap(), target);
  }

  // optional bytes custom_keymap_table = 42;
  if (has_custom_keymap_table()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        42, this->custom_keymap_table(), target);
  }

  // optional bytes custom_roman_table = 43;
  if (has_custom_roman_table()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        43, this->custom_roman_table(), target);
  }

  // optional .mozc.config.Config.PunctuationMethod punctuation_method = 45 [default = KUTEN_TOUTEN];
  if (has_punctuation_method()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      45, this->punctuation_method(), target);
  }

  // optional .mozc.config.Config.SymbolMethod symbol_method = 46 [default = CORNER_BRACKET_MIDDLE_DOT];
  if (has_symbol_method()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      46, this->symbol_method(), target);
  }

  // optional .mozc.config.Config.FundamentalCharacterForm space_character_form = 47 [default = FUNDAMENTAL_INPUT_MODE];
  if (has_space_character_form()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      47, this->space_character_form(), target);
  }

  // optional bool use_keyboard_to_change_preedit_method = 48 [default = false];
  if (has_use_keyboard_to_change_preedit_method()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(48, this->use_keyboard_to_change_preedit_method(), target);
  }

  // optional .mozc.config.Config.HistoryLearningLevel history_learning_level = 50 [default = DEFAULT_HISTORY];
  if (has_history_learning_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      50, this->history_learning_level(), target);
  }

  // optional .mozc.config.Config.SelectionShortcut selection_shortcut = 52 [default = SHORTCUT_123456789];
  if (has_selection_shortcut()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      52, this->selection_shortcut(), target);
  }

  // repeated .mozc.config.Config.CharacterFormRule character_form_rules = 54;
  for (unsigned int i = 0, n = this->character_form_rules_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        54, this->character_form_rules(i), false, target);
  }

  // optional bool use_auto_ime_turn_off = 56 [default = true];
  if (has_use_auto_ime_turn_off()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(56, this->use_auto_ime_turn_off(), target);
  }

  // optional bool use_cascading_window = 58 [default = true];
  if (has_use_cascading_window()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(58, this->use_cascading_window(), target);
  }

  // optional .mozc.config.Config.ShiftKeyModeSwitch shift_key_mode_switch = 59 [default = ASCII_INPUT_MODE];
  if (has_shift_key_mode_switch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      59, this->shift_key_mode_switch(), target);
  }

  // optional .mozc.config.Config.NumpadCharacterForm numpad_character_form = 60 [default = NUMPAD_HALF_WIDTH];
  if (has_numpad_character_form()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      60, this->numpad_character_form(), target);
  }

  // optional bool use_auto_conversion = 61 [default = false];
  if (has_use_auto_conversion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(61, this->use_auto_conversion(), target);
  }

  // optional uint32 auto_conversion_key = 62 [default = 13];
  if (has_auto_conversion_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(62, this->auto_conversion_key(), target);
  }

  // optional .mozc.config.Config.YenSignCharacter yen_sign_character = 63 [default = YEN_SIGN];
  if (has_yen_sign_character()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      63, this->yen_sign_character(), target);
  }

  // optional bool use_japanese_layout = 64 [default = false];
  if (has_use_japanese_layout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(64, this->use_japanese_layout(), target);
  }

  // optional bool use_kana_modifier_insensitive_conversion = 65 [default = false];
  if (has_use_kana_modifier_insensitive_conversion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(65, this->use_kana_modifier_insensitive_conversion(), target);
  }

  // optional bool use_typing_correction = 66 [default = false];
  if (has_use_typing_correction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(66, this->use_typing_correction(), target);
  }

  // optional bool use_date_conversion = 80 [default = true];
  if (has_use_date_conversion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(80, this->use_date_conversion(), target);
  }

  // optional bool use_single_kanji_conversion = 81 [default = true];
  if (has_use_single_kanji_conversion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(81, this->use_single_kanji_conversion(), target);
  }

  // optional bool use_symbol_conversion = 82 [default = true];
  if (has_use_symbol_conversion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(82, this->use_symbol_conversion(), target);
  }

  // optional bool use_number_conversion = 83 [default = true];
  if (has_use_number_conversion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(83, this->use_number_conversion(), target);
  }

  // optional bool use_emoticon_conversion = 84 [default = true];
  if (has_use_emoticon_conversion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(84, this->use_emoticon_conversion(), target);
  }

  // optional bool use_calculator = 85 [default = true];
  if (has_use_calculator()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(85, this->use_calculator(), target);
  }

  // optional bool use_t13n_conversion = 86 [default = true];
  if (has_use_t13n_conversion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(86, this->use_t13n_conversion(), target);
  }

  // optional bool use_zip_code_conversion = 87 [default = true];
  if (has_use_zip_code_conversion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(87, this->use_zip_code_conversion(), target);
  }

  // optional bool use_spelling_correction = 88 [default = true];
  if (has_use_spelling_correction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(88, this->use_spelling_correction(), target);
  }

  // optional bool use_emoji_conversion = 89 [default = false];
  if (has_use_emoji_conversion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(89, this->use_emoji_conversion(), target);
  }

  // optional .mozc.config.Config.InformationListConfig information_list_config = 90;
  if (has_information_list_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        90, *this->information_list_config_, false, target);
  }

  // optional bool use_history_suggest = 100 [default = true];
  if (has_use_history_suggest()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(100, this->use_history_suggest(), target);
  }

  // optional bool use_dictionary_suggest = 101 [default = true];
  if (has_use_dictionary_suggest()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(101, this->use_dictionary_suggest(), target);
  }

  // optional bool use_realtime_conversion = 102 [default = true];
  if (has_use_realtime_conversion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(102, this->use_realtime_conversion(), target);
  }

  // optional uint32 suggestions_size = 110 [default = 3];
  if (has_suggestions_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(110, this->suggestions_size(), target);
  }

  // optional bool use_mode_indicator = 120 [default = true];
  if (has_use_mode_indicator()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(120, this->use_mode_indicator(), target);
  }

  // optional bool allow_cloud_handwriting = 301 [default = false];
  if (has_allow_cloud_handwriting()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(301, this->allow_cloud_handwriting(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mozc.config.Config)
  return target;
}

int Config::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:mozc.config.Config)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional .mozc.config.GeneralConfig general_config = 1;
    if (has_general_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->general_config_);
    }

    // optional int32 verbose_level = 10 [default = 0];
    if (has_verbose_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->verbose_level());
    }

    // optional bool incognito_mode = 20 [default = false];
    if (has_incognito_mode()) {
      total_size += 2 + 1;
    }

    // optional bool check_default = 22 [default = true];
    if (has_check_default()) {
      total_size += 2 + 1;
    }

    // optional bool presentation_mode = 23 [default = false];
    if (has_presentation_mode()) {
      total_size += 2 + 1;
    }

    // optional .mozc.config.Config.PreeditMethod preedit_method = 40 [default = ROMAN];
    if (has_preedit_method()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->preedit_method());
    }

    // optional .mozc.config.Config.SessionKeymap session_keymap = 41 [default = NONE];
    if (has_session_keymap()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->session_keymap());
    }

    // optional bytes custom_keymap_table = 42;
    if (has_custom_keymap_table()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->custom_keymap_table());
    }

  }
  if (_has_bits_[8 / 32] & 32512u) {
    // optional bytes custom_roman_table = 43;
    if (has_custom_roman_table()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->custom_roman_table());
    }

    // optional .mozc.config.Config.PunctuationMethod punctuation_method = 45 [default = KUTEN_TOUTEN];
    if (has_punctuation_method()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->punctuation_method());
    }

    // optional .mozc.config.Config.SymbolMethod symbol_method = 46 [default = CORNER_BRACKET_MIDDLE_DOT];
    if (has_symbol_method()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->symbol_method());
    }

    // optional .mozc.config.Config.FundamentalCharacterForm space_character_form = 47 [default = FUNDAMENTAL_INPUT_MODE];
    if (has_space_character_form()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->space_character_form());
    }

    // optional bool use_keyboard_to_change_preedit_method = 48 [default = false];
    if (has_use_keyboard_to_change_preedit_method()) {
      total_size += 2 + 1;
    }

    // optional .mozc.config.Config.HistoryLearningLevel history_learning_level = 50 [default = DEFAULT_HISTORY];
    if (has_history_learning_level()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->history_learning_level());
    }

    // optional .mozc.config.Config.SelectionShortcut selection_shortcut = 52 [default = SHORTCUT_123456789];
    if (has_selection_shortcut()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->selection_shortcut());
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional bool use_auto_ime_turn_off = 56 [default = true];
    if (has_use_auto_ime_turn_off()) {
      total_size += 2 + 1;
    }

    // optional bool use_cascading_window = 58 [default = true];
    if (has_use_cascading_window()) {
      total_size += 2 + 1;
    }

    // optional .mozc.config.Config.ShiftKeyModeSwitch shift_key_mode_switch = 59 [default = ASCII_INPUT_MODE];
    if (has_shift_key_mode_switch()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->shift_key_mode_switch());
    }

    // optional .mozc.config.Config.NumpadCharacterForm numpad_character_form = 60 [default = NUMPAD_HALF_WIDTH];
    if (has_numpad_character_form()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->numpad_character_form());
    }

    // optional bool use_auto_conversion = 61 [default = false];
    if (has_use_auto_conversion()) {
      total_size += 2 + 1;
    }

    // optional uint32 auto_conversion_key = 62 [default = 13];
    if (has_auto_conversion_key()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->auto_conversion_key());
    }

    // optional .mozc.config.Config.YenSignCharacter yen_sign_character = 63 [default = YEN_SIGN];
    if (has_yen_sign_character()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->yen_sign_character());
    }

    // optional bool use_japanese_layout = 64 [default = false];
    if (has_use_japanese_layout()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[24 / 32] & 4278190080u) {
    // optional bool use_kana_modifier_insensitive_conversion = 65 [default = false];
    if (has_use_kana_modifier_insensitive_conversion()) {
      total_size += 2 + 1;
    }

    // optional bool use_typing_correction = 66 [default = false];
    if (has_use_typing_correction()) {
      total_size += 2 + 1;
    }

    // optional bool use_date_conversion = 80 [default = true];
    if (has_use_date_conversion()) {
      total_size += 2 + 1;
    }

    // optional bool use_single_kanji_conversion = 81 [default = true];
    if (has_use_single_kanji_conversion()) {
      total_size += 2 + 1;
    }

    // optional bool use_symbol_conversion = 82 [default = true];
    if (has_use_symbol_conversion()) {
      total_size += 2 + 1;
    }

    // optional bool use_number_conversion = 83 [default = true];
    if (has_use_number_conversion()) {
      total_size += 2 + 1;
    }

    // optional bool use_emoticon_conversion = 84 [default = true];
    if (has_use_emoticon_conversion()) {
      total_size += 2 + 1;
    }

    // optional bool use_calculator = 85 [default = true];
    if (has_use_calculator()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[32 / 32] & 255u) {
    // optional bool use_t13n_conversion = 86 [default = true];
    if (has_use_t13n_conversion()) {
      total_size += 2 + 1;
    }

    // optional bool use_zip_code_conversion = 87 [default = true];
    if (has_use_zip_code_conversion()) {
      total_size += 2 + 1;
    }

    // optional bool use_spelling_correction = 88 [default = true];
    if (has_use_spelling_correction()) {
      total_size += 2 + 1;
    }

    // optional bool use_emoji_conversion = 89 [default = false];
    if (has_use_emoji_conversion()) {
      total_size += 2 + 1;
    }

    // optional .mozc.config.Config.InformationListConfig information_list_config = 90;
    if (has_information_list_config()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->information_list_config_);
    }

    // optional bool use_history_suggest = 100 [default = true];
    if (has_use_history_suggest()) {
      total_size += 2 + 1;
    }

    // optional bool use_dictionary_suggest = 101 [default = true];
    if (has_use_dictionary_suggest()) {
      total_size += 2 + 1;
    }

    // optional bool use_realtime_conversion = 102 [default = true];
    if (has_use_realtime_conversion()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[40 / 32] & 1792u) {
    // optional uint32 suggestions_size = 110 [default = 3];
    if (has_suggestions_size()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->suggestions_size());
    }

    // optional bool use_mode_indicator = 120 [default = true];
    if (has_use_mode_indicator()) {
      total_size += 2 + 1;
    }

    // optional bool allow_cloud_handwriting = 301 [default = false];
    if (has_allow_cloud_handwriting()) {
      total_size += 2 + 1;
    }

  }
  // repeated .mozc.config.Config.CharacterFormRule character_form_rules = 54;
  total_size += 2 * this->character_form_rules_size();
  for (int i = 0; i < this->character_form_rules_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->character_form_rules(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Config::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mozc.config.Config)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Config* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Config>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mozc.config.Config)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mozc.config.Config)
    MergeFrom(*source);
  }
}

void Config::MergeFrom(const Config& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mozc.config.Config)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  character_form_rules_.MergeFrom(from.character_form_rules_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_general_config()) {
      mutable_general_config()->::mozc::config::GeneralConfig::MergeFrom(from.general_config());
    }
    if (from.has_verbose_level()) {
      set_verbose_level(from.verbose_level());
    }
    if (from.has_incognito_mode()) {
      set_incognito_mode(from.incognito_mode());
    }
    if (from.has_check_default()) {
      set_check_default(from.check_default());
    }
    if (from.has_presentation_mode()) {
      set_presentation_mode(from.presentation_mode());
    }
    if (from.has_preedit_method()) {
      set_preedit_method(from.preedit_method());
    }
    if (from.has_session_keymap()) {
      set_session_keymap(from.session_keymap());
    }
    if (from.has_custom_keymap_table()) {
      set_has_custom_keymap_table();
      custom_keymap_table_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.custom_keymap_table_);
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_custom_roman_table()) {
      set_has_custom_roman_table();
      custom_roman_table_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.custom_roman_table_);
    }
    if (from.has_punctuation_method()) {
      set_punctuation_method(from.punctuation_method());
    }
    if (from.has_symbol_method()) {
      set_symbol_method(from.symbol_method());
    }
    if (from.has_space_character_form()) {
      set_space_character_form(from.space_character_form());
    }
    if (from.has_use_keyboard_to_change_preedit_method()) {
      set_use_keyboard_to_change_preedit_method(from.use_keyboard_to_change_preedit_method());
    }
    if (from.has_history_learning_level()) {
      set_history_learning_level(from.history_learning_level());
    }
    if (from.has_selection_shortcut()) {
      set_selection_shortcut(from.selection_shortcut());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_use_auto_ime_turn_off()) {
      set_use_auto_ime_turn_off(from.use_auto_ime_turn_off());
    }
    if (from.has_use_cascading_window()) {
      set_use_cascading_window(from.use_cascading_window());
    }
    if (from.has_shift_key_mode_switch()) {
      set_shift_key_mode_switch(from.shift_key_mode_switch());
    }
    if (from.has_numpad_character_form()) {
      set_numpad_character_form(from.numpad_character_form());
    }
    if (from.has_use_auto_conversion()) {
      set_use_auto_conversion(from.use_auto_conversion());
    }
    if (from.has_auto_conversion_key()) {
      set_auto_conversion_key(from.auto_conversion_key());
    }
    if (from.has_yen_sign_character()) {
      set_yen_sign_character(from.yen_sign_character());
    }
    if (from.has_use_japanese_layout()) {
      set_use_japanese_layout(from.use_japanese_layout());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_use_kana_modifier_insensitive_conversion()) {
      set_use_kana_modifier_insensitive_conversion(from.use_kana_modifier_insensitive_conversion());
    }
    if (from.has_use_typing_correction()) {
      set_use_typing_correction(from.use_typing_correction());
    }
    if (from.has_use_date_conversion()) {
      set_use_date_conversion(from.use_date_conversion());
    }
    if (from.has_use_single_kanji_conversion()) {
      set_use_single_kanji_conversion(from.use_single_kanji_conversion());
    }
    if (from.has_use_symbol_conversion()) {
      set_use_symbol_conversion(from.use_symbol_conversion());
    }
    if (from.has_use_number_conversion()) {
      set_use_number_conversion(from.use_number_conversion());
    }
    if (from.has_use_emoticon_conversion()) {
      set_use_emoticon_conversion(from.use_emoticon_conversion());
    }
    if (from.has_use_calculator()) {
      set_use_calculator(from.use_calculator());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_use_t13n_conversion()) {
      set_use_t13n_conversion(from.use_t13n_conversion());
    }
    if (from.has_use_zip_code_conversion()) {
      set_use_zip_code_conversion(from.use_zip_code_conversion());
    }
    if (from.has_use_spelling_correction()) {
      set_use_spelling_correction(from.use_spelling_correction());
    }
    if (from.has_use_emoji_conversion()) {
      set_use_emoji_conversion(from.use_emoji_conversion());
    }
    if (from.has_information_list_config()) {
      mutable_information_list_config()->::mozc::config::Config_InformationListConfig::MergeFrom(from.information_list_config());
    }
    if (from.has_use_history_suggest()) {
      set_use_history_suggest(from.use_history_suggest());
    }
    if (from.has_use_dictionary_suggest()) {
      set_use_dictionary_suggest(from.use_dictionary_suggest());
    }
    if (from.has_use_realtime_conversion()) {
      set_use_realtime_conversion(from.use_realtime_conversion());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_suggestions_size()) {
      set_suggestions_size(from.suggestions_size());
    }
    if (from.has_use_mode_indicator()) {
      set_use_mode_indicator(from.use_mode_indicator());
    }
    if (from.has_allow_cloud_handwriting()) {
      set_allow_cloud_handwriting(from.allow_cloud_handwriting());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Config::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mozc.config.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Config::CopyFrom(const Config& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mozc.config.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Config::IsInitialized() const {

  return true;
}

void Config::Swap(Config* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Config::InternalSwap(Config* other) {
  std::swap(general_config_, other->general_config_);
  std::swap(verbose_level_, other->verbose_level_);
  std::swap(incognito_mode_, other->incognito_mode_);
  std::swap(check_default_, other->check_default_);
  std::swap(presentation_mode_, other->presentation_mode_);
  std::swap(preedit_method_, other->preedit_method_);
  std::swap(session_keymap_, other->session_keymap_);
  custom_keymap_table_.Swap(&other->custom_keymap_table_);
  custom_roman_table_.Swap(&other->custom_roman_table_);
  std::swap(punctuation_method_, other->punctuation_method_);
  std::swap(symbol_method_, other->symbol_method_);
  std::swap(space_character_form_, other->space_character_form_);
  std::swap(use_keyboard_to_change_preedit_method_, other->use_keyboard_to_change_preedit_method_);
  std::swap(history_learning_level_, other->history_learning_level_);
  std::swap(selection_shortcut_, other->selection_shortcut_);
  character_form_rules_.UnsafeArenaSwap(&other->character_form_rules_);
  std::swap(use_auto_ime_turn_off_, other->use_auto_ime_turn_off_);
  std::swap(use_cascading_window_, other->use_cascading_window_);
  std::swap(shift_key_mode_switch_, other->shift_key_mode_switch_);
  std::swap(numpad_character_form_, other->numpad_character_form_);
  std::swap(use_auto_conversion_, other->use_auto_conversion_);
  std::swap(auto_conversion_key_, other->auto_conversion_key_);
  std::swap(yen_sign_character_, other->yen_sign_character_);
  std::swap(use_japanese_layout_, other->use_japanese_layout_);
  std::swap(use_kana_modifier_insensitive_conversion_, other->use_kana_modifier_insensitive_conversion_);
  std::swap(use_typing_correction_, other->use_typing_correction_);
  std::swap(use_date_conversion_, other->use_date_conversion_);
  std::swap(use_single_kanji_conversion_, other->use_single_kanji_conversion_);
  std::swap(use_symbol_conversion_, other->use_symbol_conversion_);
  std::swap(use_number_conversion_, other->use_number_conversion_);
  std::swap(use_emoticon_conversion_, other->use_emoticon_conversion_);
  std::swap(use_calculator_, other->use_calculator_);
  std::swap(use_t13n_conversion_, other->use_t13n_conversion_);
  std::swap(use_zip_code_conversion_, other->use_zip_code_conversion_);
  std::swap(use_spelling_correction_, other->use_spelling_correction_);
  std::swap(use_emoji_conversion_, other->use_emoji_conversion_);
  std::swap(information_list_config_, other->information_list_config_);
  std::swap(use_history_suggest_, other->use_history_suggest_);
  std::swap(use_dictionary_suggest_, other->use_dictionary_suggest_);
  std::swap(use_realtime_conversion_, other->use_realtime_conversion_);
  std::swap(suggestions_size_, other->suggestions_size_);
  std::swap(use_mode_indicator_, other->use_mode_indicator_);
  std::swap(allow_cloud_handwriting_, other->allow_cloud_handwriting_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  std::swap(_has_bits_[1], other->_has_bits_[1]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Config::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Config_descriptor_;
  metadata.reflection = Config_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Config_CharacterFormRule

// optional string group = 1;
bool Config_CharacterFormRule::has_group() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Config_CharacterFormRule::set_has_group() {
  _has_bits_[0] |= 0x00000001u;
}
void Config_CharacterFormRule::clear_has_group() {
  _has_bits_[0] &= ~0x00000001u;
}
void Config_CharacterFormRule::clear_group() {
  group_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_group();
}
 const ::std::string& Config_CharacterFormRule::group() const {
  // @@protoc_insertion_point(field_get:mozc.config.Config.CharacterFormRule.group)
  return group_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Config_CharacterFormRule::set_group(const ::std::string& value) {
  set_has_group();
  group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mozc.config.Config.CharacterFormRule.group)
}
 void Config_CharacterFormRule::set_group(const char* value) {
  set_has_group();
  group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mozc.config.Config.CharacterFormRule.group)
}
 void Config_CharacterFormRule::set_group(const char* value, size_t size) {
  set_has_group();
  group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mozc.config.Config.CharacterFormRule.group)
}
 ::std::string* Config_CharacterFormRule::mutable_group() {
  set_has_group();
  // @@protoc_insertion_point(field_mutable:mozc.config.Config.CharacterFormRule.group)
  return group_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Config_CharacterFormRule::release_group() {
  // @@protoc_insertion_point(field_release:mozc.config.Config.CharacterFormRule.group)
  clear_has_group();
  return group_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Config_CharacterFormRule::set_allocated_group(::std::string* group) {
  if (group != NULL) {
    set_has_group();
  } else {
    clear_has_group();
  }
  group_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), group);
  // @@protoc_insertion_point(field_set_allocated:mozc.config.Config.CharacterFormRule.group)
}

// optional .mozc.config.Config.CharacterForm preedit_character_form = 2 [default = FULL_WIDTH];
bool Config_CharacterFormRule::has_preedit_character_form() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Config_CharacterFormRule::set_has_preedit_character_form() {
  _has_bits_[0] |= 0x00000002u;
}
void Config_CharacterFormRule::clear_has_preedit_character_form() {
  _has_bits_[0] &= ~0x00000002u;
}
void Config_CharacterFormRule::clear_preedit_character_form() {
  preedit_character_form_ = 1;
  clear_has_preedit_character_form();
}
 ::mozc::config::Config_CharacterForm Config_CharacterFormRule::preedit_character_form() const {
  // @@protoc_insertion_point(field_get:mozc.config.Config.CharacterFormRule.preedit_character_form)
  return static_cast< ::mozc::config::Config_CharacterForm >(preedit_character_form_);
}
 void Config_CharacterFormRule::set_preedit_character_form(::mozc::config::Config_CharacterForm value) {
  assert(::mozc::config::Config_CharacterForm_IsValid(value));
  set_has_preedit_character_form();
  preedit_character_form_ = value;
  // @@protoc_insertion_point(field_set:mozc.config.Config.CharacterFormRule.preedit_character_form)
}

// optional .mozc.config.Config.CharacterForm conversion_character_form = 3 [default = FULL_WIDTH];
bool Config_CharacterFormRule::has_conversion_character_form() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Config_CharacterFormRule::set_has_conversion_character_form() {
  _has_bits_[0] |= 0x00000004u;
}
void Config_CharacterFormRule::clear_has_conversion_character_form() {
  _has_bits_[0] &= ~0x00000004u;
}
void Config_CharacterFormRule::clear_conversion_character_form() {
  conversion_character_form_ = 1;
  clear_has_conversion_character_form();
}
 ::mozc::config::Config_CharacterForm Config_CharacterFormRule::conversion_character_form() const {
  // @@protoc_insertion_point(field_get:mozc.config.Config.CharacterFormRule.conversion_character_form)
  return static_cast< ::mozc::config::Config_CharacterForm >(conversion_character_form_);
}
 void Config_CharacterFormRule::set_conversion_character_form(::mozc::config::Config_CharacterForm value) {
  assert(::mozc::config::Config_CharacterForm_IsValid(value));
  set_has_conversion_character_form();
  conversion_character_form_ = value;
  // @@protoc_insertion_point(field_set:mozc.config.Config.CharacterFormRule.conversion_character_form)
}

// -------------------------------------------------------------------

// Config_InformationListConfig

// optional bool use_local_usage_dictionary = 1 [default = true];
bool Config_InformationListConfig::has_use_local_usage_dictionary() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Config_InformationListConfig::set_has_use_local_usage_dictionary() {
  _has_bits_[0] |= 0x00000001u;
}
void Config_InformationListConfig::clear_has_use_local_usage_dictionary() {
  _has_bits_[0] &= ~0x00000001u;
}
void Config_InformationListConfig::clear_use_local_usage_dictionary() {
  use_local_usage_dictionary_ = true;
  clear_has_use_local_usage_dictionary();
}
 bool Config_InformationListConfig::use_local_usage_dictionary() const {
  // @@protoc_insertion_point(field_get:mozc.config.Config.InformationListConfig.use_local_usage_dictionary)
  return use_local_usage_dictionary_;
}
 void Config_InformationListConfig::set_use_local_usage_dictionary(bool value) {
  set_has_use_local_usage_dictionary();
  use_local_usage_dictionary_ = value;
  // @@protoc_insertion_point(field_set:mozc.config.Config.InformationListConfig.use_local_usage_dictionary)
}

// -------------------------------------------------------------------

// Config

// optional .mozc.config.GeneralConfig general_config = 1;
bool Config::has_general_config() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Config::set_has_general_config() {
  _has_bits_[0] |= 0x00000001u;
}
void Config::clear_has_general_config() {
  _has_bits_[0] &= ~0x00000001u;
}
void Config::clear_general_config() {
  if (general_config_ != NULL) general_config_->::mozc::config::GeneralConfig::Clear();
  clear_has_general_config();
}
const ::mozc::config::GeneralConfig& Config::general_config() const {
  // @@protoc_insertion_point(field_get:mozc.config.Config.general_config)
  return general_config_ != NULL ? *general_config_ : *default_instance_->general_config_;
}
::mozc::config::GeneralConfig* Config::mutable_general_config() {
  set_has_general_config();
  if (general_config_ == NULL) {
    general_config_ = new ::mozc::config::GeneralConfig;
  }
  // @@protoc_insertion_point(field_mutable:mozc.config.Config.general_config)
  return general_config_;
}
::mozc::config::GeneralConfig* Config::release_general_config() {
  // @@protoc_insertion_point(field_release:mozc.config.Config.general_config)
  clear_has_general_config();
  ::mozc::config::GeneralConfig* temp = general_config_;
  general_config_ = NULL;
  return temp;
}
void Config::set_allocated_general_config(::mozc::config::GeneralConfig* general_config) {
  delete general_config_;
  general_config_ = general_config;
  if (general_config) {
    set_has_general_config();
  } else {
    clear_has_general_config();
  }
  // @@protoc_insertion_point(field_set_allocated:mozc.config.Config.general_config)
}

// optional int32 verbose_level = 10 [default = 0];
bool Config::has_verbose_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Config::set_has_verbose_level() {
  _has_bits_[0] |= 0x00000002u;
}
void Config::clear_has_verbose_level() {
  _has_bits_[0] &= ~0x00000002u;
}
void Config::clear_verbose_level() {
  verbose_level_ = 0;
  clear_has_verbose_level();
}
 ::google::protobuf::int32 Config::verbose_level() const {
  // @@protoc_insertion_point(field_get:mozc.config.Config.verbose_level)
  return verbose_level_;
}
 void Config::set_verbose_level(::google::protobuf::int32 value) {
  set_has_verbose_level();
  verbose_level_ = value;
  // @@protoc_insertion_point(field_set:mozc.config.Config.verbose_level)
}

// optional bool incognito_mode = 20 [default = false];
bool Config::has_incognito_mode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Config::set_has_incognito_mode() {
  _has_bits_[0] |= 0x00000004u;
}
void Config::clear_has_incognito_mode() {
  _has_bits_[0] &= ~0x00000004u;
}
void Config::clear_incognito_mode() {
  incognito_mode_ = false;
  clear_has_incognito_mode();
}
 bool Config::incognito_mode() const {
  // @@protoc_insertion_point(field_get:mozc.config.Config.incognito_mode)
  return incognito_mode_;
}
 void Config::set_incognito_mode(bool value) {
  set_has_incognito_mode();
  incognito_mode_ = value;
  // @@protoc_insertion_point(field_set:mozc.config.Config.incognito_mode)
}

// optional bool check_default = 22 [default = true];
bool Config::has_check_default() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Config::set_has_check_default() {
  _has_bits_[0] |= 0x00000008u;
}
void Config::clear_has_check_default() {
  _has_bits_[0] &= ~0x00000008u;
}
void Config::clear_check_default() {
  check_default_ = true;
  clear_has_check_default();
}
 bool Config::check_default() const {
  // @@protoc_insertion_point(field_get:mozc.config.Config.check_default)
  return check_default_;
}
 void Config::set_check_default(bool value) {
  set_has_check_default();
  check_default_ = value;
  // @@protoc_insertion_point(field_set:mozc.config.Config.check_default)
}

// optional bool presentation_mode = 23 [default = false];
bool Config::has_presentation_mode() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Config::set_has_presentation_mode() {
  _has_bits_[0] |= 0x00000010u;
}
void Config::clear_has_presentation_mode() {
  _has_bits_[0] &= ~0x00000010u;
}
void Config::clear_presentation_mode() {
  presentation_mode_ = false;
  clear_has_presentation_mode();
}
 bool Config::presentation_mode() const {
  // @@protoc_insertion_point(field_get:mozc.config.Config.presentation_mode)
  return presentation_mode_;
}
 void Config::set_presentation_mode(bool value) {
  set_has_presentation_mode();
  presentation_mode_ = value;
  // @@protoc_insertion_point(field_set:mozc.config.Config.presentation_mode)
}

// optional .mozc.config.Config.PreeditMethod preedit_method = 40 [default = ROMAN];
bool Config::has_preedit_method() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Config::set_has_preedit_method() {
  _has_bits_[0] |= 0x00000020u;
}
void Config::clear_has_preedit_method() {
  _has_bits_[0] &= ~0x00000020u;
}
void Config::clear_preedit_method() {
  preedit_method_ = 0;
  clear_has_preedit_method();
}
 ::mozc::config::Config_PreeditMethod Config::preedit_method() const {
  // @@protoc_insertion_point(field_get:mozc.config.Config.preedit_method)
  return static_cast< ::mozc::config::Config_PreeditMethod >(preedit_method_);
}
 void Config::set_preedit_method(::mozc::config::Config_PreeditMethod value) {
  assert(::mozc::config::Config_PreeditMethod_IsValid(value));
  set_has_preedit_method();
  preedit_method_ = value;
  // @@protoc_insertion_point(field_set:mozc.config.Config.preedit_method)
}

// optional .mozc.config.Config.SessionKeymap session_keymap = 41 [default = NONE];
bool Config::has_session_keymap() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Config::set_has_session_keymap() {
  _has_bits_[0] |= 0x00000040u;
}
void Config::clear_has_session_keymap() {
  _has_bits_[0] &= ~0x00000040u;
}
void Config::clear_session_keymap() {
  session_keymap_ = -1;
  clear_has_session_keymap();
}
 ::mozc::config::Config_SessionKeymap Config::session_keymap() const {
  // @@protoc_insertion_point(field_get:mozc.config.Config.session_keymap)
  return static_cast< ::mozc::config::Config_SessionKeymap >(session_keymap_);
}
 void Config::set_session_keymap(::mozc::config::Config_SessionKeymap value) {
  assert(::mozc::config::Config_SessionKeymap_IsValid(value));
  set_has_session_keymap();
  session_keymap_ = value;
  // @@protoc_insertion_point(field_set:mozc.config.Config.session_keymap)
}

// optional bytes custom_keymap_table = 42;
bool Config::has_custom_keymap_table() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Config::set_has_custom_keymap_table() {
  _has_bits_[0] |= 0x00000080u;
}
void Config::clear_has_custom_keymap_table() {
  _has_bits_[0] &= ~0x00000080u;
}
void Config::clear_custom_keymap_table() {
  custom_keymap_table_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_custom_keymap_table();
}
 const ::std::string& Config::custom_keymap_table() const {
  // @@protoc_insertion_point(field_get:mozc.config.Config.custom_keymap_table)
  return custom_keymap_table_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Config::set_custom_keymap_table(const ::std::string& value) {
  set_has_custom_keymap_table();
  custom_keymap_table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mozc.config.Config.custom_keymap_table)
}
 void Config::set_custom_keymap_table(const char* value) {
  set_has_custom_keymap_table();
  custom_keymap_table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mozc.config.Config.custom_keymap_table)
}
 void Config::set_custom_keymap_table(const void* value, size_t size) {
  set_has_custom_keymap_table();
  custom_keymap_table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mozc.config.Config.custom_keymap_table)
}
 ::std::string* Config::mutable_custom_keymap_table() {
  set_has_custom_keymap_table();
  // @@protoc_insertion_point(field_mutable:mozc.config.Config.custom_keymap_table)
  return custom_keymap_table_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Config::release_custom_keymap_table() {
  // @@protoc_insertion_point(field_release:mozc.config.Config.custom_keymap_table)
  clear_has_custom_keymap_table();
  return custom_keymap_table_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Config::set_allocated_custom_keymap_table(::std::string* custom_keymap_table) {
  if (custom_keymap_table != NULL) {
    set_has_custom_keymap_table();
  } else {
    clear_has_custom_keymap_table();
  }
  custom_keymap_table_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), custom_keymap_table);
  // @@protoc_insertion_point(field_set_allocated:mozc.config.Config.custom_keymap_table)
}

// optional bytes custom_roman_table = 43;
bool Config::has_custom_roman_table() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Config::set_has_custom_roman_table() {
  _has_bits_[0] |= 0x00000100u;
}
void Config::clear_has_custom_roman_table() {
  _has_bits_[0] &= ~0x00000100u;
}
void Config::clear_custom_roman_table() {
  custom_roman_table_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_custom_roman_table();
}
 const ::std::string& Config::custom_roman_table() const {
  // @@protoc_insertion_point(field_get:mozc.config.Config.custom_roman_table)
  return custom_roman_table_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Config::set_custom_roman_table(const ::std::string& value) {
  set_has_custom_roman_table();
  custom_roman_table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mozc.config.Config.custom_roman_table)
}
 void Config::set_custom_roman_table(const char* value) {
  set_has_custom_roman_table();
  custom_roman_table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mozc.config.Config.custom_roman_table)
}
 void Config::set_custom_roman_table(const void* value, size_t size) {
  set_has_custom_roman_table();
  custom_roman_table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mozc.config.Config.custom_roman_table)
}
 ::std::string* Config::mutable_custom_roman_table() {
  set_has_custom_roman_table();
  // @@protoc_insertion_point(field_mutable:mozc.config.Config.custom_roman_table)
  return custom_roman_table_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Config::release_custom_roman_table() {
  // @@protoc_insertion_point(field_release:mozc.config.Config.custom_roman_table)
  clear_has_custom_roman_table();
  return custom_roman_table_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Config::set_allocated_custom_roman_table(::std::string* custom_roman_table) {
  if (custom_roman_table != NULL) {
    set_has_custom_roman_table();
  } else {
    clear_has_custom_roman_table();
  }
  custom_roman_table_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), custom_roman_table);
  // @@protoc_insertion_point(field_set_allocated:mozc.config.Config.custom_roman_table)
}

// optional .mozc.config.Config.PunctuationMethod punctuation_method = 45 [default = KUTEN_TOUTEN];
bool Config::has_punctuation_method() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void Config::set_has_punctuation_method() {
  _has_bits_[0] |= 0x00000200u;
}
void Config::clear_has_punctuation_method() {
  _has_bits_[0] &= ~0x00000200u;
}
void Config::clear_punctuation_method() {
  punctuation_method_ = 0;
  clear_has_punctuation_method();
}
 ::mozc::config::Config_PunctuationMethod Config::punctuation_method() const {
  // @@protoc_insertion_point(field_get:mozc.config.Config.punctuation_method)
  return static_cast< ::mozc::config::Config_PunctuationMethod >(punctuation_method_);
}
 void Config::set_punctuation_method(::mozc::config::Config_PunctuationMethod value) {
  assert(::mozc::config::Config_PunctuationMethod_IsValid(value));
  set_has_punctuation_method();
  punctuation_method_ = value;
  // @@protoc_insertion_point(field_set:mozc.config.Config.punctuation_method)
}

// optional .mozc.config.Config.SymbolMethod symbol_method = 46 [default = CORNER_BRACKET_MIDDLE_DOT];
bool Config::has_symbol_method() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void Config::set_has_symbol_method() {
  _has_bits_[0] |= 0x00000400u;
}
void Config::clear_has_symbol_method() {
  _has_bits_[0] &= ~0x00000400u;
}
void Config::clear_symbol_method() {
  symbol_method_ = 0;
  clear_has_symbol_method();
}
 ::mozc::config::Config_SymbolMethod Config::symbol_method() const {
  // @@protoc_insertion_point(field_get:mozc.config.Config.symbol_method)
  return static_cast< ::mozc::config::Config_SymbolMethod >(symbol_method_);
}
 void Config::set_symbol_method(::mozc::config::Config_SymbolMethod value) {
  assert(::mozc::config::Config_SymbolMethod_IsValid(value));
  set_has_symbol_method();
  symbol_method_ = value;
  // @@protoc_insertion_point(field_set:mozc.config.Config.symbol_method)
}

// optional .mozc.config.Config.FundamentalCharacterForm space_character_form = 47 [default = FUNDAMENTAL_INPUT_MODE];
bool Config::has_space_character_form() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void Config::set_has_space_character_form() {
  _has_bits_[0] |= 0x00000800u;
}
void Config::clear_has_space_character_form() {
  _has_bits_[0] &= ~0x00000800u;
}
void Config::clear_space_character_form() {
  space_character_form_ = 0;
  clear_has_space_character_form();
}
 ::mozc::config::Config_FundamentalCharacterForm Config::space_character_form() const {
  // @@protoc_insertion_point(field_get:mozc.config.Config.space_character_form)
  return static_cast< ::mozc::config::Config_FundamentalCharacterForm >(space_character_form_);
}
 void Config::set_space_character_form(::mozc::config::Config_FundamentalCharacterForm value) {
  assert(::mozc::config::Config_FundamentalCharacterForm_IsValid(value));
  set_has_space_character_form();
  space_character_form_ = value;
  // @@protoc_insertion_point(field_set:mozc.config.Config.space_character_form)
}

// optional bool use_keyboard_to_change_preedit_method = 48 [default = false];
bool Config::has_use_keyboard_to_change_preedit_method() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void Config::set_has_use_keyboard_to_change_preedit_method() {
  _has_bits_[0] |= 0x00001000u;
}
void Config::clear_has_use_keyboard_to_change_preedit_method() {
  _has_bits_[0] &= ~0x00001000u;
}
void Config::clear_use_keyboard_to_change_preedit_method() {
  use_keyboard_to_change_preedit_method_ = false;
  clear_has_use_keyboard_to_change_preedit_method();
}
 bool Config::use_keyboard_to_change_preedit_method() const {
  // @@protoc_insertion_point(field_get:mozc.config.Config.use_keyboard_to_change_preedit_method)
  return use_keyboard_to_change_preedit_method_;
}
 void Config::set_use_keyboard_to_change_preedit_method(bool value) {
  set_has_use_keyboard_to_change_preedit_method();
  use_keyboard_to_change_preedit_method_ = value;
  // @@protoc_insertion_point(field_set:mozc.config.Config.use_keyboard_to_change_preedit_method)
}

// optional .mozc.config.Config.HistoryLearningLevel history_learning_level = 50 [default = DEFAULT_HISTORY];
bool Config::has_history_learning_level() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void Config::set_has_history_learning_level() {
  _has_bits_[0] |= 0x00002000u;
}
void Config::clear_has_history_learning_level() {
  _has_bits_[0] &= ~0x00002000u;
}
void Config::clear_history_learning_level() {
  history_learning_level_ = 0;
  clear_has_history_learning_level();
}
 ::mozc::config::Config_HistoryLearningLevel Config::history_learning_level() const {
  // @@protoc_insertion_point(field_get:mozc.config.Config.history_learning_level)
  return static_cast< ::mozc::config::Config_HistoryLearningLevel >(history_learning_level_);
}
 void Config::set_history_learning_level(::mozc::config::Config_HistoryLearningLevel value) {
  assert(::mozc::config::Config_HistoryLearningLevel_IsValid(value));
  set_has_history_learning_level();
  history_learning_level_ = value;
  // @@protoc_insertion_point(field_set:mozc.config.Config.history_learning_level)
}

// optional .mozc.config.Config.SelectionShortcut selection_shortcut = 52 [default = SHORTCUT_123456789];
bool Config::has_selection_shortcut() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void Config::set_has_selection_shortcut() {
  _has_bits_[0] |= 0x00004000u;
}
void Config::clear_has_selection_shortcut() {
  _has_bits_[0] &= ~0x00004000u;
}
void Config::clear_selection_shortcut() {
  selection_shortcut_ = 1;
  clear_has_selection_shortcut();
}
 ::mozc::config::Config_SelectionShortcut Config::selection_shortcut() const {
  // @@protoc_insertion_point(field_get:mozc.config.Config.selection_shortcut)
  return static_cast< ::mozc::config::Config_SelectionShortcut >(selection_shortcut_);
}
 void Config::set_selection_shortcut(::mozc::config::Config_SelectionShortcut value) {
  assert(::mozc::config::Config_SelectionShortcut_IsValid(value));
  set_has_selection_shortcut();
  selection_shortcut_ = value;
  // @@protoc_insertion_point(field_set:mozc.config.Config.selection_shortcut)
}

// repeated .mozc.config.Config.CharacterFormRule character_form_rules = 54;
int Config::character_form_rules_size() const {
  return character_form_rules_.size();
}
void Config::clear_character_form_rules() {
  character_form_rules_.Clear();
}
const ::mozc::config::Config_CharacterFormRule& Config::character_form_rules(int index) const {
  // @@protoc_insertion_point(field_get:mozc.config.Config.character_form_rules)
  return character_form_rules_.Get(index);
}
::mozc::config::Config_CharacterFormRule* Config::mutable_character_form_rules(int index) {
  // @@protoc_insertion_point(field_mutable:mozc.config.Config.character_form_rules)
  return character_form_rules_.Mutable(index);
}
::mozc::config::Config_CharacterFormRule* Config::add_character_form_rules() {
  // @@protoc_insertion_point(field_add:mozc.config.Config.character_form_rules)
  return character_form_rules_.Add();
}
::google::protobuf::RepeatedPtrField< ::mozc::config::Config_CharacterFormRule >*
Config::mutable_character_form_rules() {
  // @@protoc_insertion_point(field_mutable_list:mozc.config.Config.character_form_rules)
  return &character_form_rules_;
}
const ::google::protobuf::RepeatedPtrField< ::mozc::config::Config_CharacterFormRule >&
Config::character_form_rules() const {
  // @@protoc_insertion_point(field_list:mozc.config.Config.character_form_rules)
  return character_form_rules_;
}

// optional bool use_auto_ime_turn_off = 56 [default = true];
bool Config::has_use_auto_ime_turn_off() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void Config::set_has_use_auto_ime_turn_off() {
  _has_bits_[0] |= 0x00010000u;
}
void Config::clear_has_use_auto_ime_turn_off() {
  _has_bits_[0] &= ~0x00010000u;
}
void Config::clear_use_auto_ime_turn_off() {
  use_auto_ime_turn_off_ = true;
  clear_has_use_auto_ime_turn_off();
}
 bool Config::use_auto_ime_turn_off() const {
  // @@protoc_insertion_point(field_get:mozc.config.Config.use_auto_ime_turn_off)
  return use_auto_ime_turn_off_;
}
 void Config::set_use_auto_ime_turn_off(bool value) {
  set_has_use_auto_ime_turn_off();
  use_auto_ime_turn_off_ = value;
  // @@protoc_insertion_point(field_set:mozc.config.Config.use_auto_ime_turn_off)
}

// optional bool use_cascading_window = 58 [default = true];
bool Config::has_use_cascading_window() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void Config::set_has_use_cascading_window() {
  _has_bits_[0] |= 0x00020000u;
}
void Config::clear_has_use_cascading_window() {
  _has_bits_[0] &= ~0x00020000u;
}
void Config::clear_use_cascading_window() {
  use_cascading_window_ = true;
  clear_has_use_cascading_window();
}
 bool Config::use_cascading_window() const {
  // @@protoc_insertion_point(field_get:mozc.config.Config.use_cascading_window)
  return use_cascading_window_;
}
 void Config::set_use_cascading_window(bool value) {
  set_has_use_cascading_window();
  use_cascading_window_ = value;
  // @@protoc_insertion_point(field_set:mozc.config.Config.use_cascading_window)
}

// optional .mozc.config.Config.ShiftKeyModeSwitch shift_key_mode_switch = 59 [default = ASCII_INPUT_MODE];
bool Config::has_shift_key_mode_switch() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void Config::set_has_shift_key_mode_switch() {
  _has_bits_[0] |= 0x00040000u;
}
void Config::clear_has_shift_key_mode_switch() {
  _has_bits_[0] &= ~0x00040000u;
}
void Config::clear_shift_key_mode_switch() {
  shift_key_mode_switch_ = 1;
  clear_has_shift_key_mode_switch();
}
 ::mozc::config::Config_ShiftKeyModeSwitch Config::shift_key_mode_switch() const {
  // @@protoc_insertion_point(field_get:mozc.config.Config.shift_key_mode_switch)
  return static_cast< ::mozc::config::Config_ShiftKeyModeSwitch >(shift_key_mode_switch_);
}
 void Config::set_shift_key_mode_switch(::mozc::config::Config_ShiftKeyModeSwitch value) {
  assert(::mozc::config::Config_ShiftKeyModeSwitch_IsValid(value));
  set_has_shift_key_mode_switch();
  shift_key_mode_switch_ = value;
  // @@protoc_insertion_point(field_set:mozc.config.Config.shift_key_mode_switch)
}

// optional .mozc.config.Config.NumpadCharacterForm numpad_character_form = 60 [default = NUMPAD_HALF_WIDTH];
bool Config::has_numpad_character_form() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void Config::set_has_numpad_character_form() {
  _has_bits_[0] |= 0x00080000u;
}
void Config::clear_has_numpad_character_form() {
  _has_bits_[0] &= ~0x00080000u;
}
void Config::clear_numpad_character_form() {
  numpad_character_form_ = 2;
  clear_has_numpad_character_form();
}
 ::mozc::config::Config_NumpadCharacterForm Config::numpad_character_form() const {
  // @@protoc_insertion_point(field_get:mozc.config.Config.numpad_character_form)
  return static_cast< ::mozc::config::Config_NumpadCharacterForm >(numpad_character_form_);
}
 void Config::set_numpad_character_form(::mozc::config::Config_NumpadCharacterForm value) {
  assert(::mozc::config::Config_NumpadCharacterForm_IsValid(value));
  set_has_numpad_character_form();
  numpad_character_form_ = value;
  // @@protoc_insertion_point(field_set:mozc.config.Config.numpad_character_form)
}

// optional bool use_auto_conversion = 61 [default = false];
bool Config::has_use_auto_conversion() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void Config::set_has_use_auto_conversion() {
  _has_bits_[0] |= 0x00100000u;
}
void Config::clear_has_use_auto_conversion() {
  _has_bits_[0] &= ~0x00100000u;
}
void Config::clear_use_auto_conversion() {
  use_auto_conversion_ = false;
  clear_has_use_auto_conversion();
}
 bool Config::use_auto_conversion() const {
  // @@protoc_insertion_point(field_get:mozc.config.Config.use_auto_conversion)
  return use_auto_conversion_;
}
 void Config::set_use_auto_conversion(bool value) {
  set_has_use_auto_conversion();
  use_auto_conversion_ = value;
  // @@protoc_insertion_point(field_set:mozc.config.Config.use_auto_conversion)
}

// optional uint32 auto_conversion_key = 62 [default = 13];
bool Config::has_auto_conversion_key() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void Config::set_has_auto_conversion_key() {
  _has_bits_[0] |= 0x00200000u;
}
void Config::clear_has_auto_conversion_key() {
  _has_bits_[0] &= ~0x00200000u;
}
void Config::clear_auto_conversion_key() {
  auto_conversion_key_ = 13u;
  clear_has_auto_conversion_key();
}
 ::google::protobuf::uint32 Config::auto_conversion_key() const {
  // @@protoc_insertion_point(field_get:mozc.config.Config.auto_conversion_key)
  return auto_conversion_key_;
}
 void Config::set_auto_conversion_key(::google::protobuf::uint32 value) {
  set_has_auto_conversion_key();
  auto_conversion_key_ = value;
  // @@protoc_insertion_point(field_set:mozc.config.Config.auto_conversion_key)
}

// optional .mozc.config.Config.YenSignCharacter yen_sign_character = 63 [default = YEN_SIGN];
bool Config::has_yen_sign_character() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void Config::set_has_yen_sign_character() {
  _has_bits_[0] |= 0x00400000u;
}
void Config::clear_has_yen_sign_character() {
  _has_bits_[0] &= ~0x00400000u;
}
void Config::clear_yen_sign_character() {
  yen_sign_character_ = 0;
  clear_has_yen_sign_character();
}
 ::mozc::config::Config_YenSignCharacter Config::yen_sign_character() const {
  // @@protoc_insertion_point(field_get:mozc.config.Config.yen_sign_character)
  return static_cast< ::mozc::config::Config_YenSignCharacter >(yen_sign_character_);
}
 void Config::set_yen_sign_character(::mozc::config::Config_YenSignCharacter value) {
  assert(::mozc::config::Config_YenSignCharacter_IsValid(value));
  set_has_yen_sign_character();
  yen_sign_character_ = value;
  // @@protoc_insertion_point(field_set:mozc.config.Config.yen_sign_character)
}

// optional bool use_japanese_layout = 64 [default = false];
bool Config::has_use_japanese_layout() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
void Config::set_has_use_japanese_layout() {
  _has_bits_[0] |= 0x00800000u;
}
void Config::clear_has_use_japanese_layout() {
  _has_bits_[0] &= ~0x00800000u;
}
void Config::clear_use_japanese_layout() {
  use_japanese_layout_ = false;
  clear_has_use_japanese_layout();
}
 bool Config::use_japanese_layout() const {
  // @@protoc_insertion_point(field_get:mozc.config.Config.use_japanese_layout)
  return use_japanese_layout_;
}
 void Config::set_use_japanese_layout(bool value) {
  set_has_use_japanese_layout();
  use_japanese_layout_ = value;
  // @@protoc_insertion_point(field_set:mozc.config.Config.use_japanese_layout)
}

// optional bool use_kana_modifier_insensitive_conversion = 65 [default = false];
bool Config::has_use_kana_modifier_insensitive_conversion() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
void Config::set_has_use_kana_modifier_insensitive_conversion() {
  _has_bits_[0] |= 0x01000000u;
}
void Config::clear_has_use_kana_modifier_insensitive_conversion() {
  _has_bits_[0] &= ~0x01000000u;
}
void Config::clear_use_kana_modifier_insensitive_conversion() {
  use_kana_modifier_insensitive_conversion_ = false;
  clear_has_use_kana_modifier_insensitive_conversion();
}
 bool Config::use_kana_modifier_insensitive_conversion() const {
  // @@protoc_insertion_point(field_get:mozc.config.Config.use_kana_modifier_insensitive_conversion)
  return use_kana_modifier_insensitive_conversion_;
}
 void Config::set_use_kana_modifier_insensitive_conversion(bool value) {
  set_has_use_kana_modifier_insensitive_conversion();
  use_kana_modifier_insensitive_conversion_ = value;
  // @@protoc_insertion_point(field_set:mozc.config.Config.use_kana_modifier_insensitive_conversion)
}

// optional bool use_typing_correction = 66 [default = false];
bool Config::has_use_typing_correction() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
void Config::set_has_use_typing_correction() {
  _has_bits_[0] |= 0x02000000u;
}
void Config::clear_has_use_typing_correction() {
  _has_bits_[0] &= ~0x02000000u;
}
void Config::clear_use_typing_correction() {
  use_typing_correction_ = false;
  clear_has_use_typing_correction();
}
 bool Config::use_typing_correction() const {
  // @@protoc_insertion_point(field_get:mozc.config.Config.use_typing_correction)
  return use_typing_correction_;
}
 void Config::set_use_typing_correction(bool value) {
  set_has_use_typing_correction();
  use_typing_correction_ = value;
  // @@protoc_insertion_point(field_set:mozc.config.Config.use_typing_correction)
}

// optional bool use_date_conversion = 80 [default = true];
bool Config::has_use_date_conversion() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
void Config::set_has_use_date_conversion() {
  _has_bits_[0] |= 0x04000000u;
}
void Config::clear_has_use_date_conversion() {
  _has_bits_[0] &= ~0x04000000u;
}
void Config::clear_use_date_conversion() {
  use_date_conversion_ = true;
  clear_has_use_date_conversion();
}
 bool Config::use_date_conversion() const {
  // @@protoc_insertion_point(field_get:mozc.config.Config.use_date_conversion)
  return use_date_conversion_;
}
 void Config::set_use_date_conversion(bool value) {
  set_has_use_date_conversion();
  use_date_conversion_ = value;
  // @@protoc_insertion_point(field_set:mozc.config.Config.use_date_conversion)
}

// optional bool use_single_kanji_conversion = 81 [default = true];
bool Config::has_use_single_kanji_conversion() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
void Config::set_has_use_single_kanji_conversion() {
  _has_bits_[0] |= 0x08000000u;
}
void Config::clear_has_use_single_kanji_conversion() {
  _has_bits_[0] &= ~0x08000000u;
}
void Config::clear_use_single_kanji_conversion() {
  use_single_kanji_conversion_ = true;
  clear_has_use_single_kanji_conversion();
}
 bool Config::use_single_kanji_conversion() const {
  // @@protoc_insertion_point(field_get:mozc.config.Config.use_single_kanji_conversion)
  return use_single_kanji_conversion_;
}
 void Config::set_use_single_kanji_conversion(bool value) {
  set_has_use_single_kanji_conversion();
  use_single_kanji_conversion_ = value;
  // @@protoc_insertion_point(field_set:mozc.config.Config.use_single_kanji_conversion)
}

// optional bool use_symbol_conversion = 82 [default = true];
bool Config::has_use_symbol_conversion() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
void Config::set_has_use_symbol_conversion() {
  _has_bits_[0] |= 0x10000000u;
}
void Config::clear_has_use_symbol_conversion() {
  _has_bits_[0] &= ~0x10000000u;
}
void Config::clear_use_symbol_conversion() {
  use_symbol_conversion_ = true;
  clear_has_use_symbol_conversion();
}
 bool Config::use_symbol_conversion() const {
  // @@protoc_insertion_point(field_get:mozc.config.Config.use_symbol_conversion)
  return use_symbol_conversion_;
}
 void Config::set_use_symbol_conversion(bool value) {
  set_has_use_symbol_conversion();
  use_symbol_conversion_ = value;
  // @@protoc_insertion_point(field_set:mozc.config.Config.use_symbol_conversion)
}

// optional bool use_number_conversion = 83 [default = true];
bool Config::has_use_number_conversion() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
void Config::set_has_use_number_conversion() {
  _has_bits_[0] |= 0x20000000u;
}
void Config::clear_has_use_number_conversion() {
  _has_bits_[0] &= ~0x20000000u;
}
void Config::clear_use_number_conversion() {
  use_number_conversion_ = true;
  clear_has_use_number_conversion();
}
 bool Config::use_number_conversion() const {
  // @@protoc_insertion_point(field_get:mozc.config.Config.use_number_conversion)
  return use_number_conversion_;
}
 void Config::set_use_number_conversion(bool value) {
  set_has_use_number_conversion();
  use_number_conversion_ = value;
  // @@protoc_insertion_point(field_set:mozc.config.Config.use_number_conversion)
}

// optional bool use_emoticon_conversion = 84 [default = true];
bool Config::has_use_emoticon_conversion() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
void Config::set_has_use_emoticon_conversion() {
  _has_bits_[0] |= 0x40000000u;
}
void Config::clear_has_use_emoticon_conversion() {
  _has_bits_[0] &= ~0x40000000u;
}
void Config::clear_use_emoticon_conversion() {
  use_emoticon_conversion_ = true;
  clear_has_use_emoticon_conversion();
}
 bool Config::use_emoticon_conversion() const {
  // @@protoc_insertion_point(field_get:mozc.config.Config.use_emoticon_conversion)
  return use_emoticon_conversion_;
}
 void Config::set_use_emoticon_conversion(bool value) {
  set_has_use_emoticon_conversion();
  use_emoticon_conversion_ = value;
  // @@protoc_insertion_point(field_set:mozc.config.Config.use_emoticon_conversion)
}

// optional bool use_calculator = 85 [default = true];
bool Config::has_use_calculator() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
void Config::set_has_use_calculator() {
  _has_bits_[0] |= 0x80000000u;
}
void Config::clear_has_use_calculator() {
  _has_bits_[0] &= ~0x80000000u;
}
void Config::clear_use_calculator() {
  use_calculator_ = true;
  clear_has_use_calculator();
}
 bool Config::use_calculator() const {
  // @@protoc_insertion_point(field_get:mozc.config.Config.use_calculator)
  return use_calculator_;
}
 void Config::set_use_calculator(bool value) {
  set_has_use_calculator();
  use_calculator_ = value;
  // @@protoc_insertion_point(field_set:mozc.config.Config.use_calculator)
}

// optional bool use_t13n_conversion = 86 [default = true];
bool Config::has_use_t13n_conversion() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
void Config::set_has_use_t13n_conversion() {
  _has_bits_[1] |= 0x00000001u;
}
void Config::clear_has_use_t13n_conversion() {
  _has_bits_[1] &= ~0x00000001u;
}
void Config::clear_use_t13n_conversion() {
  use_t13n_conversion_ = true;
  clear_has_use_t13n_conversion();
}
 bool Config::use_t13n_conversion() const {
  // @@protoc_insertion_point(field_get:mozc.config.Config.use_t13n_conversion)
  return use_t13n_conversion_;
}
 void Config::set_use_t13n_conversion(bool value) {
  set_has_use_t13n_conversion();
  use_t13n_conversion_ = value;
  // @@protoc_insertion_point(field_set:mozc.config.Config.use_t13n_conversion)
}

// optional bool use_zip_code_conversion = 87 [default = true];
bool Config::has_use_zip_code_conversion() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
void Config::set_has_use_zip_code_conversion() {
  _has_bits_[1] |= 0x00000002u;
}
void Config::clear_has_use_zip_code_conversion() {
  _has_bits_[1] &= ~0x00000002u;
}
void Config::clear_use_zip_code_conversion() {
  use_zip_code_conversion_ = true;
  clear_has_use_zip_code_conversion();
}
 bool Config::use_zip_code_conversion() const {
  // @@protoc_insertion_point(field_get:mozc.config.Config.use_zip_code_conversion)
  return use_zip_code_conversion_;
}
 void Config::set_use_zip_code_conversion(bool value) {
  set_has_use_zip_code_conversion();
  use_zip_code_conversion_ = value;
  // @@protoc_insertion_point(field_set:mozc.config.Config.use_zip_code_conversion)
}

// optional bool use_spelling_correction = 88 [default = true];
bool Config::has_use_spelling_correction() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
void Config::set_has_use_spelling_correction() {
  _has_bits_[1] |= 0x00000004u;
}
void Config::clear_has_use_spelling_correction() {
  _has_bits_[1] &= ~0x00000004u;
}
void Config::clear_use_spelling_correction() {
  use_spelling_correction_ = true;
  clear_has_use_spelling_correction();
}
 bool Config::use_spelling_correction() const {
  // @@protoc_insertion_point(field_get:mozc.config.Config.use_spelling_correction)
  return use_spelling_correction_;
}
 void Config::set_use_spelling_correction(bool value) {
  set_has_use_spelling_correction();
  use_spelling_correction_ = value;
  // @@protoc_insertion_point(field_set:mozc.config.Config.use_spelling_correction)
}

// optional bool use_emoji_conversion = 89 [default = false];
bool Config::has_use_emoji_conversion() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
void Config::set_has_use_emoji_conversion() {
  _has_bits_[1] |= 0x00000008u;
}
void Config::clear_has_use_emoji_conversion() {
  _has_bits_[1] &= ~0x00000008u;
}
void Config::clear_use_emoji_conversion() {
  use_emoji_conversion_ = false;
  clear_has_use_emoji_conversion();
}
 bool Config::use_emoji_conversion() const {
  // @@protoc_insertion_point(field_get:mozc.config.Config.use_emoji_conversion)
  return use_emoji_conversion_;
}
 void Config::set_use_emoji_conversion(bool value) {
  set_has_use_emoji_conversion();
  use_emoji_conversion_ = value;
  // @@protoc_insertion_point(field_set:mozc.config.Config.use_emoji_conversion)
}

// optional .mozc.config.Config.InformationListConfig information_list_config = 90;
bool Config::has_information_list_config() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
void Config::set_has_information_list_config() {
  _has_bits_[1] |= 0x00000010u;
}
void Config::clear_has_information_list_config() {
  _has_bits_[1] &= ~0x00000010u;
}
void Config::clear_information_list_config() {
  if (information_list_config_ != NULL) information_list_config_->::mozc::config::Config_InformationListConfig::Clear();
  clear_has_information_list_config();
}
const ::mozc::config::Config_InformationListConfig& Config::information_list_config() const {
  // @@protoc_insertion_point(field_get:mozc.config.Config.information_list_config)
  return information_list_config_ != NULL ? *information_list_config_ : *default_instance_->information_list_config_;
}
::mozc::config::Config_InformationListConfig* Config::mutable_information_list_config() {
  set_has_information_list_config();
  if (information_list_config_ == NULL) {
    information_list_config_ = new ::mozc::config::Config_InformationListConfig;
  }
  // @@protoc_insertion_point(field_mutable:mozc.config.Config.information_list_config)
  return information_list_config_;
}
::mozc::config::Config_InformationListConfig* Config::release_information_list_config() {
  // @@protoc_insertion_point(field_release:mozc.config.Config.information_list_config)
  clear_has_information_list_config();
  ::mozc::config::Config_InformationListConfig* temp = information_list_config_;
  information_list_config_ = NULL;
  return temp;
}
void Config::set_allocated_information_list_config(::mozc::config::Config_InformationListConfig* information_list_config) {
  delete information_list_config_;
  information_list_config_ = information_list_config;
  if (information_list_config) {
    set_has_information_list_config();
  } else {
    clear_has_information_list_config();
  }
  // @@protoc_insertion_point(field_set_allocated:mozc.config.Config.information_list_config)
}

// optional bool use_history_suggest = 100 [default = true];
bool Config::has_use_history_suggest() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
void Config::set_has_use_history_suggest() {
  _has_bits_[1] |= 0x00000020u;
}
void Config::clear_has_use_history_suggest() {
  _has_bits_[1] &= ~0x00000020u;
}
void Config::clear_use_history_suggest() {
  use_history_suggest_ = true;
  clear_has_use_history_suggest();
}
 bool Config::use_history_suggest() const {
  // @@protoc_insertion_point(field_get:mozc.config.Config.use_history_suggest)
  return use_history_suggest_;
}
 void Config::set_use_history_suggest(bool value) {
  set_has_use_history_suggest();
  use_history_suggest_ = value;
  // @@protoc_insertion_point(field_set:mozc.config.Config.use_history_suggest)
}

// optional bool use_dictionary_suggest = 101 [default = true];
bool Config::has_use_dictionary_suggest() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
void Config::set_has_use_dictionary_suggest() {
  _has_bits_[1] |= 0x00000040u;
}
void Config::clear_has_use_dictionary_suggest() {
  _has_bits_[1] &= ~0x00000040u;
}
void Config::clear_use_dictionary_suggest() {
  use_dictionary_suggest_ = true;
  clear_has_use_dictionary_suggest();
}
 bool Config::use_dictionary_suggest() const {
  // @@protoc_insertion_point(field_get:mozc.config.Config.use_dictionary_suggest)
  return use_dictionary_suggest_;
}
 void Config::set_use_dictionary_suggest(bool value) {
  set_has_use_dictionary_suggest();
  use_dictionary_suggest_ = value;
  // @@protoc_insertion_point(field_set:mozc.config.Config.use_dictionary_suggest)
}

// optional bool use_realtime_conversion = 102 [default = true];
bool Config::has_use_realtime_conversion() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
void Config::set_has_use_realtime_conversion() {
  _has_bits_[1] |= 0x00000080u;
}
void Config::clear_has_use_realtime_conversion() {
  _has_bits_[1] &= ~0x00000080u;
}
void Config::clear_use_realtime_conversion() {
  use_realtime_conversion_ = true;
  clear_has_use_realtime_conversion();
}
 bool Config::use_realtime_conversion() const {
  // @@protoc_insertion_point(field_get:mozc.config.Config.use_realtime_conversion)
  return use_realtime_conversion_;
}
 void Config::set_use_realtime_conversion(bool value) {
  set_has_use_realtime_conversion();
  use_realtime_conversion_ = value;
  // @@protoc_insertion_point(field_set:mozc.config.Config.use_realtime_conversion)
}

// optional uint32 suggestions_size = 110 [default = 3];
bool Config::has_suggestions_size() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
void Config::set_has_suggestions_size() {
  _has_bits_[1] |= 0x00000100u;
}
void Config::clear_has_suggestions_size() {
  _has_bits_[1] &= ~0x00000100u;
}
void Config::clear_suggestions_size() {
  suggestions_size_ = 3u;
  clear_has_suggestions_size();
}
 ::google::protobuf::uint32 Config::suggestions_size() const {
  // @@protoc_insertion_point(field_get:mozc.config.Config.suggestions_size)
  return suggestions_size_;
}
 void Config::set_suggestions_size(::google::protobuf::uint32 value) {
  set_has_suggestions_size();
  suggestions_size_ = value;
  // @@protoc_insertion_point(field_set:mozc.config.Config.suggestions_size)
}

// optional bool use_mode_indicator = 120 [default = true];
bool Config::has_use_mode_indicator() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
void Config::set_has_use_mode_indicator() {
  _has_bits_[1] |= 0x00000200u;
}
void Config::clear_has_use_mode_indicator() {
  _has_bits_[1] &= ~0x00000200u;
}
void Config::clear_use_mode_indicator() {
  use_mode_indicator_ = true;
  clear_has_use_mode_indicator();
}
 bool Config::use_mode_indicator() const {
  // @@protoc_insertion_point(field_get:mozc.config.Config.use_mode_indicator)
  return use_mode_indicator_;
}
 void Config::set_use_mode_indicator(bool value) {
  set_has_use_mode_indicator();
  use_mode_indicator_ = value;
  // @@protoc_insertion_point(field_set:mozc.config.Config.use_mode_indicator)
}

// optional bool allow_cloud_handwriting = 301 [default = false];
bool Config::has_allow_cloud_handwriting() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
void Config::set_has_allow_cloud_handwriting() {
  _has_bits_[1] |= 0x00000400u;
}
void Config::clear_has_allow_cloud_handwriting() {
  _has_bits_[1] &= ~0x00000400u;
}
void Config::clear_allow_cloud_handwriting() {
  allow_cloud_handwriting_ = false;
  clear_has_allow_cloud_handwriting();
}
 bool Config::allow_cloud_handwriting() const {
  // @@protoc_insertion_point(field_get:mozc.config.Config.allow_cloud_handwriting)
  return allow_cloud_handwriting_;
}
 void Config::set_allow_cloud_handwriting(bool value) {
  set_has_allow_cloud_handwriting();
  allow_cloud_handwriting_ = value;
  // @@protoc_insertion_point(field_set:mozc.config.Config.allow_cloud_handwriting)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace config
}  // namespace mozc

// @@protoc_insertion_point(global_scope)
