// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protocol/renderer_command.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "protocol/renderer_command.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace mozc {
namespace commands {

namespace {

const ::google::protobuf::Descriptor* RendererCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RendererCommand_reflection_ = NULL;
const ::google::protobuf::Descriptor* RendererCommand_Rectangle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RendererCommand_Rectangle_reflection_ = NULL;
const ::google::protobuf::Descriptor* RendererCommand_Point_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RendererCommand_Point_reflection_ = NULL;
const ::google::protobuf::Descriptor* RendererCommand_WinLogFont_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RendererCommand_WinLogFont_reflection_ = NULL;
const ::google::protobuf::Descriptor* RendererCommand_CompositionForm_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RendererCommand_CompositionForm_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* RendererCommand_CompositionForm_Style_descriptor_ = NULL;
const ::google::protobuf::Descriptor* RendererCommand_CandidateForm_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RendererCommand_CandidateForm_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* RendererCommand_CandidateForm_Style_descriptor_ = NULL;
const ::google::protobuf::Descriptor* RendererCommand_CharacterPosition_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RendererCommand_CharacterPosition_reflection_ = NULL;
const ::google::protobuf::Descriptor* RendererCommand_CaretInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RendererCommand_CaretInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* RendererCommand_IndicatorInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RendererCommand_IndicatorInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* RendererCommand_ApplicationInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RendererCommand_ApplicationInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* RendererCommand_ApplicationInfo_InputFrameworkType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* RendererCommand_ApplicationInfo_UIVisibility_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* RendererCommand_CommandType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_protocol_2frenderer_5fcommand_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_protocol_2frenderer_5fcommand_2eproto() {
  protobuf_AddDesc_protocol_2frenderer_5fcommand_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "protocol/renderer_command.proto");
  GOOGLE_CHECK(file != NULL);
  RendererCommand_descriptor_ = file->message_type(0);
  static const int RendererCommand_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RendererCommand, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RendererCommand, visible_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RendererCommand, output_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RendererCommand, preedit_rectangle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RendererCommand, application_info_),
  };
  RendererCommand_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RendererCommand_descriptor_,
      RendererCommand::default_instance_,
      RendererCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RendererCommand, _has_bits_[0]),
      -1,
      -1,
      sizeof(RendererCommand),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RendererCommand, _internal_metadata_),
      -1);
  RendererCommand_Rectangle_descriptor_ = RendererCommand_descriptor_->nested_type(0);
  static const int RendererCommand_Rectangle_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RendererCommand_Rectangle, left_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RendererCommand_Rectangle, top_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RendererCommand_Rectangle, right_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RendererCommand_Rectangle, bottom_),
  };
  RendererCommand_Rectangle_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RendererCommand_Rectangle_descriptor_,
      RendererCommand_Rectangle::default_instance_,
      RendererCommand_Rectangle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RendererCommand_Rectangle, _has_bits_[0]),
      -1,
      -1,
      sizeof(RendererCommand_Rectangle),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RendererCommand_Rectangle, _internal_metadata_),
      -1);
  RendererCommand_Point_descriptor_ = RendererCommand_descriptor_->nested_type(1);
  static const int RendererCommand_Point_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RendererCommand_Point, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RendererCommand_Point, y_),
  };
  RendererCommand_Point_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RendererCommand_Point_descriptor_,
      RendererCommand_Point::default_instance_,
      RendererCommand_Point_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RendererCommand_Point, _has_bits_[0]),
      -1,
      -1,
      sizeof(RendererCommand_Point),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RendererCommand_Point, _internal_metadata_),
      -1);
  RendererCommand_WinLogFont_descriptor_ = RendererCommand_descriptor_->nested_type(2);
  static const int RendererCommand_WinLogFont_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RendererCommand_WinLogFont, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RendererCommand_WinLogFont, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RendererCommand_WinLogFont, escapement_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RendererCommand_WinLogFont, orientation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RendererCommand_WinLogFont, weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RendererCommand_WinLogFont, italic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RendererCommand_WinLogFont, underline_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RendererCommand_WinLogFont, strike_out_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RendererCommand_WinLogFont, char_set_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RendererCommand_WinLogFont, out_precision_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RendererCommand_WinLogFont, clip_precision_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RendererCommand_WinLogFont, quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RendererCommand_WinLogFont, pitch_and_family_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RendererCommand_WinLogFont, face_name_),
  };
  RendererCommand_WinLogFont_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RendererCommand_WinLogFont_descriptor_,
      RendererCommand_WinLogFont::default_instance_,
      RendererCommand_WinLogFont_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RendererCommand_WinLogFont, _has_bits_[0]),
      -1,
      -1,
      sizeof(RendererCommand_WinLogFont),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RendererCommand_WinLogFont, _internal_metadata_),
      -1);
  RendererCommand_CompositionForm_descriptor_ = RendererCommand_descriptor_->nested_type(3);
  static const int RendererCommand_CompositionForm_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RendererCommand_CompositionForm, current_position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RendererCommand_CompositionForm, area_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RendererCommand_CompositionForm, style_bits_),
  };
  RendererCommand_CompositionForm_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RendererCommand_CompositionForm_descriptor_,
      RendererCommand_CompositionForm::default_instance_,
      RendererCommand_CompositionForm_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RendererCommand_CompositionForm, _has_bits_[0]),
      -1,
      -1,
      sizeof(RendererCommand_CompositionForm),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RendererCommand_CompositionForm, _internal_metadata_),
      -1);
  RendererCommand_CompositionForm_Style_descriptor_ = RendererCommand_CompositionForm_descriptor_->enum_type(0);
  RendererCommand_CandidateForm_descriptor_ = RendererCommand_descriptor_->nested_type(4);
  static const int RendererCommand_CandidateForm_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RendererCommand_CandidateForm, current_position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RendererCommand_CandidateForm, area_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RendererCommand_CandidateForm, style_bits_),
  };
  RendererCommand_CandidateForm_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RendererCommand_CandidateForm_descriptor_,
      RendererCommand_CandidateForm::default_instance_,
      RendererCommand_CandidateForm_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RendererCommand_CandidateForm, _has_bits_[0]),
      -1,
      -1,
      sizeof(RendererCommand_CandidateForm),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RendererCommand_CandidateForm, _internal_metadata_),
      -1);
  RendererCommand_CandidateForm_Style_descriptor_ = RendererCommand_CandidateForm_descriptor_->enum_type(0);
  RendererCommand_CharacterPosition_descriptor_ = RendererCommand_descriptor_->nested_type(5);
  static const int RendererCommand_CharacterPosition_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RendererCommand_CharacterPosition, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RendererCommand_CharacterPosition, top_left_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RendererCommand_CharacterPosition, line_height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RendererCommand_CharacterPosition, document_area_),
  };
  RendererCommand_CharacterPosition_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RendererCommand_CharacterPosition_descriptor_,
      RendererCommand_CharacterPosition::default_instance_,
      RendererCommand_CharacterPosition_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RendererCommand_CharacterPosition, _has_bits_[0]),
      -1,
      -1,
      sizeof(RendererCommand_CharacterPosition),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RendererCommand_CharacterPosition, _internal_metadata_),
      -1);
  RendererCommand_CaretInfo_descriptor_ = RendererCommand_descriptor_->nested_type(6);
  static const int RendererCommand_CaretInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RendererCommand_CaretInfo, blinking_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RendererCommand_CaretInfo, caret_rect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RendererCommand_CaretInfo, target_window_handle_),
  };
  RendererCommand_CaretInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RendererCommand_CaretInfo_descriptor_,
      RendererCommand_CaretInfo::default_instance_,
      RendererCommand_CaretInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RendererCommand_CaretInfo, _has_bits_[0]),
      -1,
      -1,
      sizeof(RendererCommand_CaretInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RendererCommand_CaretInfo, _internal_metadata_),
      -1);
  RendererCommand_IndicatorInfo_descriptor_ = RendererCommand_descriptor_->nested_type(7);
  static const int RendererCommand_IndicatorInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RendererCommand_IndicatorInfo, status_),
  };
  RendererCommand_IndicatorInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RendererCommand_IndicatorInfo_descriptor_,
      RendererCommand_IndicatorInfo::default_instance_,
      RendererCommand_IndicatorInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RendererCommand_IndicatorInfo, _has_bits_[0]),
      -1,
      -1,
      sizeof(RendererCommand_IndicatorInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RendererCommand_IndicatorInfo, _internal_metadata_),
      -1);
  RendererCommand_ApplicationInfo_descriptor_ = RendererCommand_descriptor_->nested_type(8);
  static const int RendererCommand_ApplicationInfo_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RendererCommand_ApplicationInfo, process_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RendererCommand_ApplicationInfo, thread_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RendererCommand_ApplicationInfo, receiver_handle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RendererCommand_ApplicationInfo, target_window_handle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RendererCommand_ApplicationInfo, composition_font_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RendererCommand_ApplicationInfo, input_framework_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RendererCommand_ApplicationInfo, composition_form_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RendererCommand_ApplicationInfo, candidate_form_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RendererCommand_ApplicationInfo, ui_visibilities_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RendererCommand_ApplicationInfo, composition_target_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RendererCommand_ApplicationInfo, caret_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RendererCommand_ApplicationInfo, pango_font_description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RendererCommand_ApplicationInfo, indicator_info_),
  };
  RendererCommand_ApplicationInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RendererCommand_ApplicationInfo_descriptor_,
      RendererCommand_ApplicationInfo::default_instance_,
      RendererCommand_ApplicationInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RendererCommand_ApplicationInfo, _has_bits_[0]),
      -1,
      -1,
      sizeof(RendererCommand_ApplicationInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RendererCommand_ApplicationInfo, _internal_metadata_),
      -1);
  RendererCommand_ApplicationInfo_InputFrameworkType_descriptor_ = RendererCommand_ApplicationInfo_descriptor_->enum_type(0);
  RendererCommand_ApplicationInfo_UIVisibility_descriptor_ = RendererCommand_ApplicationInfo_descriptor_->enum_type(1);
  RendererCommand_CommandType_descriptor_ = RendererCommand_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_protocol_2frenderer_5fcommand_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RendererCommand_descriptor_, &RendererCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RendererCommand_Rectangle_descriptor_, &RendererCommand_Rectangle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RendererCommand_Point_descriptor_, &RendererCommand_Point::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RendererCommand_WinLogFont_descriptor_, &RendererCommand_WinLogFont::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RendererCommand_CompositionForm_descriptor_, &RendererCommand_CompositionForm::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RendererCommand_CandidateForm_descriptor_, &RendererCommand_CandidateForm::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RendererCommand_CharacterPosition_descriptor_, &RendererCommand_CharacterPosition::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RendererCommand_CaretInfo_descriptor_, &RendererCommand_CaretInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RendererCommand_IndicatorInfo_descriptor_, &RendererCommand_IndicatorInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RendererCommand_ApplicationInfo_descriptor_, &RendererCommand_ApplicationInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_protocol_2frenderer_5fcommand_2eproto() {
  delete RendererCommand::default_instance_;
  delete RendererCommand_reflection_;
  delete RendererCommand_Rectangle::default_instance_;
  delete RendererCommand_Rectangle_reflection_;
  delete RendererCommand_Point::default_instance_;
  delete RendererCommand_Point_reflection_;
  delete RendererCommand_WinLogFont::default_instance_;
  delete RendererCommand_WinLogFont_reflection_;
  delete RendererCommand_CompositionForm::default_instance_;
  delete RendererCommand_CompositionForm_reflection_;
  delete RendererCommand_CandidateForm::default_instance_;
  delete RendererCommand_CandidateForm_reflection_;
  delete RendererCommand_CharacterPosition::default_instance_;
  delete RendererCommand_CharacterPosition_reflection_;
  delete RendererCommand_CaretInfo::default_instance_;
  delete RendererCommand_CaretInfo_reflection_;
  delete RendererCommand_IndicatorInfo::default_instance_;
  delete RendererCommand_IndicatorInfo_reflection_;
  delete RendererCommand_ApplicationInfo::default_instance_;
  delete RendererCommand_ApplicationInfo_reflection_;
}

void protobuf_AddDesc_protocol_2frenderer_5fcommand_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_protocol_2frenderer_5fcommand_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::mozc::commands::protobuf_AddDesc_protocol_2fcommands_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\037protocol/renderer_command.proto\022\rmozc."
    "commands\032\027protocol/commands.proto\"\314\023\n\017Re"
    "ndererCommand\022>\n\004type\030\001 \001(\0162*.mozc.comma"
    "nds.RendererCommand.CommandType:\004NOOP\022\026\n"
    "\007visible\030\002 \001(\010:\005false\022%\n\006output\030\003 \001(\0132\025."
    "mozc.commands.Output\022C\n\021preedit_rectangl"
    "e\030\004 \001(\0132(.mozc.commands.RendererCommand."
    "Rectangle\022H\n\020application_info\030\005 \001(\0132..mo"
    "zc.commands.RendererCommand.ApplicationI"
    "nfo\032E\n\tRectangle\022\014\n\004left\030\001 \001(\005\022\013\n\003top\030\002 "
    "\001(\005\022\r\n\005right\030\003 \001(\005\022\016\n\006bottom\030\004 \001(\005\032\035\n\005Po"
    "int\022\t\n\001x\030\001 \001(\005\022\t\n\001y\030\002 \001(\005\032\315\002\n\nWinLogFont"
    "\022\021\n\006height\030\001 \001(\005:\0010\022\020\n\005width\030\002 \001(\005:\0010\022\025\n"
    "\nescapement\030\003 \001(\005:\0010\022\026\n\013orientation\030\004 \001("
    "\005:\0010\022\021\n\006weight\030\005 \001(\005:\0010\022\025\n\006italic\030\006 \001(\010:"
    "\005false\022\030\n\tunderline\030\007 \001(\010:\005false\022\031\n\nstri"
    "ke_out\030\010 \001(\010:\005false\022\023\n\010char_set\030\t \001(\005:\0011"
    "\022\030\n\rout_precision\030\n \001(\005:\0010\022\031\n\016clip_preci"
    "sion\030\013 \001(\005:\0010\022\022\n\007quality\030\014 \001(\005:\0010\022\033\n\020pit"
    "ch_and_family\030\r \001(\005:\0010\022\021\n\tface_name\030\016 \001("
    "\t\032\345\001\n\017CompositionForm\022>\n\020current_positio"
    "n\030\002 \001(\0132$.mozc.commands.RendererCommand."
    "Point\0226\n\004area\030\003 \001(\0132(.mozc.commands.Rend"
    "ererCommand.Rectangle\022\025\n\nstyle_bits\030\004 \001("
    "\r:\0010\"=\n\005Style\022\013\n\007DEFAULT\020\000\022\010\n\004RECT\020\001\022\t\n\005"
    "POINT\020\002\022\022\n\016FORCE_POSITION\020 J\004\010\001\020\002\032\332\001\n\rCa"
    "ndidateForm\022>\n\020current_position\030\002 \001(\0132$."
    "mozc.commands.RendererCommand.Point\0226\n\004a"
    "rea\030\003 \001(\0132(.mozc.commands.RendererComman"
    "d.Rectangle\022\025\n\nstyle_bits\030\004 \001(\r:\0010\"4\n\005St"
    "yle\022\013\n\007DEFAULT\020\000\022\020\n\014CANDIDATEPOS\020@\022\014\n\007EX"
    "CLUDE\020\200\001J\004\010\001\020\002\032\263\001\n\021CharacterPosition\022\020\n\010"
    "position\030\001 \001(\r\0226\n\010top_left\030\002 \001(\0132$.mozc."
    "commands.RendererCommand.Point\022\023\n\013line_h"
    "eight\030\003 \001(\r\022\?\n\rdocument_area\030\004 \001(\0132(.moz"
    "c.commands.RendererCommand.Rectangle\032\200\001\n"
    "\tCaretInfo\022\027\n\010blinking\030\001 \001(\010:\005false\022<\n\nc"
    "aret_rect\030\002 \001(\0132(.mozc.commands.Renderer"
    "Command.Rectangle\022\034\n\024target_window_handl"
    "e\030\003 \001(\r\0326\n\rIndicatorInfo\022%\n\006status\030\001 \001(\013"
    "2\025.mozc.commands.Status\032\213\007\n\017ApplicationI"
    "nfo\022\022\n\nprocess_id\030\001 \001(\r\022\021\n\tthread_id\030\002 \001"
    "(\r\022\027\n\017receiver_handle\030\003 \001(\r\022\034\n\024target_wi"
    "ndow_handle\030\004 \001(\r\022C\n\020composition_font\030\005 "
    "\001(\0132).mozc.commands.RendererCommand.WinL"
    "ogFont\022m\n\017input_framework\030\006 \001(\0162A.mozc.c"
    "ommands.RendererCommand.ApplicationInfo."
    "InputFrameworkType:\021UNKNOWN_FRAMEWORK\022H\n"
    "\020composition_form\030\007 \001(\0132..mozc.commands."
    "RendererCommand.CompositionForm\022D\n\016candi"
    "date_form\030\010 \001(\0132,.mozc.commands.Renderer"
    "Command.CandidateForm\022\032\n\017ui_visibilities"
    "\030\t \001(\005:\0010\022L\n\022composition_target\030\n \001(\01320."
    "mozc.commands.RendererCommand.CharacterP"
    "osition\022<\n\ncaret_info\030\013 \001(\0132(.mozc.comma"
    "nds.RendererCommand.CaretInfo\022\036\n\026pango_f"
    "ont_description\030\r \001(\t\022D\n\016indicator_info\030"
    "\016 \001(\0132,.mozc.commands.RendererCommand.In"
    "dicatorInfo\"T\n\022InputFrameworkType\022\025\n\021UNK"
    "NOWN_FRAMEWORK\020\000\022\007\n\003TSF\020\001\022\t\n\005IMM32\020\002\022\t\n\005"
    "IMKit\020\003\022\010\n\004IBus\020\004\"l\n\014UIVisibility\022\021\n\rSho"
    "wUIDefault\020\000\022\031\n\025ShowCompositionWindow\020\001\022"
    "\027\n\023ShowCandidateWindow\020\002\022\025\n\021ShowSuggestW"
    "indow\020\004J\004\010\014\020\r\"1\n\013CommandType\022\010\n\004NOOP\020\000\022\n"
    "\n\006UPDATE\020\001\022\014\n\010SHUTDOWN\020\002", 2584);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "protocol/renderer_command.proto", &protobuf_RegisterTypes);
  RendererCommand::default_instance_ = new RendererCommand();
  RendererCommand_Rectangle::default_instance_ = new RendererCommand_Rectangle();
  RendererCommand_Point::default_instance_ = new RendererCommand_Point();
  RendererCommand_WinLogFont::default_instance_ = new RendererCommand_WinLogFont();
  RendererCommand_CompositionForm::default_instance_ = new RendererCommand_CompositionForm();
  RendererCommand_CandidateForm::default_instance_ = new RendererCommand_CandidateForm();
  RendererCommand_CharacterPosition::default_instance_ = new RendererCommand_CharacterPosition();
  RendererCommand_CaretInfo::default_instance_ = new RendererCommand_CaretInfo();
  RendererCommand_IndicatorInfo::default_instance_ = new RendererCommand_IndicatorInfo();
  RendererCommand_ApplicationInfo::default_instance_ = new RendererCommand_ApplicationInfo();
  RendererCommand::default_instance_->InitAsDefaultInstance();
  RendererCommand_Rectangle::default_instance_->InitAsDefaultInstance();
  RendererCommand_Point::default_instance_->InitAsDefaultInstance();
  RendererCommand_WinLogFont::default_instance_->InitAsDefaultInstance();
  RendererCommand_CompositionForm::default_instance_->InitAsDefaultInstance();
  RendererCommand_CandidateForm::default_instance_->InitAsDefaultInstance();
  RendererCommand_CharacterPosition::default_instance_->InitAsDefaultInstance();
  RendererCommand_CaretInfo::default_instance_->InitAsDefaultInstance();
  RendererCommand_IndicatorInfo::default_instance_->InitAsDefaultInstance();
  RendererCommand_ApplicationInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_protocol_2frenderer_5fcommand_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_protocol_2frenderer_5fcommand_2eproto {
  StaticDescriptorInitializer_protocol_2frenderer_5fcommand_2eproto() {
    protobuf_AddDesc_protocol_2frenderer_5fcommand_2eproto();
  }
} static_descriptor_initializer_protocol_2frenderer_5fcommand_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* RendererCommand_CommandType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RendererCommand_CommandType_descriptor_;
}
bool RendererCommand_CommandType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const RendererCommand_CommandType RendererCommand::NOOP;
const RendererCommand_CommandType RendererCommand::UPDATE;
const RendererCommand_CommandType RendererCommand::SHUTDOWN;
const RendererCommand_CommandType RendererCommand::CommandType_MIN;
const RendererCommand_CommandType RendererCommand::CommandType_MAX;
const int RendererCommand::CommandType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RendererCommand_Rectangle::kLeftFieldNumber;
const int RendererCommand_Rectangle::kTopFieldNumber;
const int RendererCommand_Rectangle::kRightFieldNumber;
const int RendererCommand_Rectangle::kBottomFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RendererCommand_Rectangle::RendererCommand_Rectangle()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mozc.commands.RendererCommand.Rectangle)
}

void RendererCommand_Rectangle::InitAsDefaultInstance() {
}

RendererCommand_Rectangle::RendererCommand_Rectangle(const RendererCommand_Rectangle& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mozc.commands.RendererCommand.Rectangle)
}

void RendererCommand_Rectangle::SharedCtor() {
  _cached_size_ = 0;
  left_ = 0;
  top_ = 0;
  right_ = 0;
  bottom_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RendererCommand_Rectangle::~RendererCommand_Rectangle() {
  // @@protoc_insertion_point(destructor:mozc.commands.RendererCommand.Rectangle)
  SharedDtor();
}

void RendererCommand_Rectangle::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RendererCommand_Rectangle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RendererCommand_Rectangle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RendererCommand_Rectangle_descriptor_;
}

const RendererCommand_Rectangle& RendererCommand_Rectangle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2frenderer_5fcommand_2eproto();
  return *default_instance_;
}

RendererCommand_Rectangle* RendererCommand_Rectangle::default_instance_ = NULL;

RendererCommand_Rectangle* RendererCommand_Rectangle::New(::google::protobuf::Arena* arena) const {
  RendererCommand_Rectangle* n = new RendererCommand_Rectangle;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RendererCommand_Rectangle::Clear() {
// @@protoc_insertion_point(message_clear_start:mozc.commands.RendererCommand.Rectangle)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(RendererCommand_Rectangle, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<RendererCommand_Rectangle*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(left_, bottom_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool RendererCommand_Rectangle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mozc.commands.RendererCommand.Rectangle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 left = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &left_)));
          set_has_left();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_top;
        break;
      }

      // optional int32 top = 2;
      case 2: {
        if (tag == 16) {
         parse_top:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &top_)));
          set_has_top();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_right;
        break;
      }

      // optional int32 right = 3;
      case 3: {
        if (tag == 24) {
         parse_right:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &right_)));
          set_has_right();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_bottom;
        break;
      }

      // optional int32 bottom = 4;
      case 4: {
        if (tag == 32) {
         parse_bottom:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bottom_)));
          set_has_bottom();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mozc.commands.RendererCommand.Rectangle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mozc.commands.RendererCommand.Rectangle)
  return false;
#undef DO_
}

void RendererCommand_Rectangle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mozc.commands.RendererCommand.Rectangle)
  // optional int32 left = 1;
  if (has_left()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->left(), output);
  }

  // optional int32 top = 2;
  if (has_top()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->top(), output);
  }

  // optional int32 right = 3;
  if (has_right()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->right(), output);
  }

  // optional int32 bottom = 4;
  if (has_bottom()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->bottom(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mozc.commands.RendererCommand.Rectangle)
}

::google::protobuf::uint8* RendererCommand_Rectangle::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mozc.commands.RendererCommand.Rectangle)
  // optional int32 left = 1;
  if (has_left()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->left(), target);
  }

  // optional int32 top = 2;
  if (has_top()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->top(), target);
  }

  // optional int32 right = 3;
  if (has_right()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->right(), target);
  }

  // optional int32 bottom = 4;
  if (has_bottom()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->bottom(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mozc.commands.RendererCommand.Rectangle)
  return target;
}

int RendererCommand_Rectangle::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:mozc.commands.RendererCommand.Rectangle)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 15u) {
    // optional int32 left = 1;
    if (has_left()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->left());
    }

    // optional int32 top = 2;
    if (has_top()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->top());
    }

    // optional int32 right = 3;
    if (has_right()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->right());
    }

    // optional int32 bottom = 4;
    if (has_bottom()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bottom());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RendererCommand_Rectangle::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mozc.commands.RendererCommand.Rectangle)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RendererCommand_Rectangle* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RendererCommand_Rectangle>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mozc.commands.RendererCommand.Rectangle)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mozc.commands.RendererCommand.Rectangle)
    MergeFrom(*source);
  }
}

void RendererCommand_Rectangle::MergeFrom(const RendererCommand_Rectangle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mozc.commands.RendererCommand.Rectangle)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_left()) {
      set_left(from.left());
    }
    if (from.has_top()) {
      set_top(from.top());
    }
    if (from.has_right()) {
      set_right(from.right());
    }
    if (from.has_bottom()) {
      set_bottom(from.bottom());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void RendererCommand_Rectangle::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mozc.commands.RendererCommand.Rectangle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RendererCommand_Rectangle::CopyFrom(const RendererCommand_Rectangle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mozc.commands.RendererCommand.Rectangle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RendererCommand_Rectangle::IsInitialized() const {

  return true;
}

void RendererCommand_Rectangle::Swap(RendererCommand_Rectangle* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RendererCommand_Rectangle::InternalSwap(RendererCommand_Rectangle* other) {
  std::swap(left_, other->left_);
  std::swap(top_, other->top_);
  std::swap(right_, other->right_);
  std::swap(bottom_, other->bottom_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RendererCommand_Rectangle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RendererCommand_Rectangle_descriptor_;
  metadata.reflection = RendererCommand_Rectangle_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RendererCommand_Point::kXFieldNumber;
const int RendererCommand_Point::kYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RendererCommand_Point::RendererCommand_Point()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mozc.commands.RendererCommand.Point)
}

void RendererCommand_Point::InitAsDefaultInstance() {
}

RendererCommand_Point::RendererCommand_Point(const RendererCommand_Point& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mozc.commands.RendererCommand.Point)
}

void RendererCommand_Point::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RendererCommand_Point::~RendererCommand_Point() {
  // @@protoc_insertion_point(destructor:mozc.commands.RendererCommand.Point)
  SharedDtor();
}

void RendererCommand_Point::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RendererCommand_Point::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RendererCommand_Point::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RendererCommand_Point_descriptor_;
}

const RendererCommand_Point& RendererCommand_Point::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2frenderer_5fcommand_2eproto();
  return *default_instance_;
}

RendererCommand_Point* RendererCommand_Point::default_instance_ = NULL;

RendererCommand_Point* RendererCommand_Point::New(::google::protobuf::Arena* arena) const {
  RendererCommand_Point* n = new RendererCommand_Point;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RendererCommand_Point::Clear() {
// @@protoc_insertion_point(message_clear_start:mozc.commands.RendererCommand.Point)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(RendererCommand_Point, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<RendererCommand_Point*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(x_, y_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool RendererCommand_Point::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mozc.commands.RendererCommand.Point)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 x = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_y;
        break;
      }

      // optional int32 y = 2;
      case 2: {
        if (tag == 16) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mozc.commands.RendererCommand.Point)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mozc.commands.RendererCommand.Point)
  return false;
#undef DO_
}

void RendererCommand_Point::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mozc.commands.RendererCommand.Point)
  // optional int32 x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->x(), output);
  }

  // optional int32 y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->y(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mozc.commands.RendererCommand.Point)
}

::google::protobuf::uint8* RendererCommand_Point::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mozc.commands.RendererCommand.Point)
  // optional int32 x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->x(), target);
  }

  // optional int32 y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->y(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mozc.commands.RendererCommand.Point)
  return target;
}

int RendererCommand_Point::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:mozc.commands.RendererCommand.Point)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional int32 x = 1;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->x());
    }

    // optional int32 y = 2;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->y());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RendererCommand_Point::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mozc.commands.RendererCommand.Point)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RendererCommand_Point* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RendererCommand_Point>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mozc.commands.RendererCommand.Point)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mozc.commands.RendererCommand.Point)
    MergeFrom(*source);
  }
}

void RendererCommand_Point::MergeFrom(const RendererCommand_Point& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mozc.commands.RendererCommand.Point)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void RendererCommand_Point::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mozc.commands.RendererCommand.Point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RendererCommand_Point::CopyFrom(const RendererCommand_Point& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mozc.commands.RendererCommand.Point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RendererCommand_Point::IsInitialized() const {

  return true;
}

void RendererCommand_Point::Swap(RendererCommand_Point* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RendererCommand_Point::InternalSwap(RendererCommand_Point* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RendererCommand_Point::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RendererCommand_Point_descriptor_;
  metadata.reflection = RendererCommand_Point_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RendererCommand_WinLogFont::kHeightFieldNumber;
const int RendererCommand_WinLogFont::kWidthFieldNumber;
const int RendererCommand_WinLogFont::kEscapementFieldNumber;
const int RendererCommand_WinLogFont::kOrientationFieldNumber;
const int RendererCommand_WinLogFont::kWeightFieldNumber;
const int RendererCommand_WinLogFont::kItalicFieldNumber;
const int RendererCommand_WinLogFont::kUnderlineFieldNumber;
const int RendererCommand_WinLogFont::kStrikeOutFieldNumber;
const int RendererCommand_WinLogFont::kCharSetFieldNumber;
const int RendererCommand_WinLogFont::kOutPrecisionFieldNumber;
const int RendererCommand_WinLogFont::kClipPrecisionFieldNumber;
const int RendererCommand_WinLogFont::kQualityFieldNumber;
const int RendererCommand_WinLogFont::kPitchAndFamilyFieldNumber;
const int RendererCommand_WinLogFont::kFaceNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RendererCommand_WinLogFont::RendererCommand_WinLogFont()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mozc.commands.RendererCommand.WinLogFont)
}

void RendererCommand_WinLogFont::InitAsDefaultInstance() {
}

RendererCommand_WinLogFont::RendererCommand_WinLogFont(const RendererCommand_WinLogFont& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mozc.commands.RendererCommand.WinLogFont)
}

void RendererCommand_WinLogFont::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  height_ = 0;
  width_ = 0;
  escapement_ = 0;
  orientation_ = 0;
  weight_ = 0;
  italic_ = false;
  underline_ = false;
  strike_out_ = false;
  char_set_ = 1;
  out_precision_ = 0;
  clip_precision_ = 0;
  quality_ = 0;
  pitch_and_family_ = 0;
  face_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RendererCommand_WinLogFont::~RendererCommand_WinLogFont() {
  // @@protoc_insertion_point(destructor:mozc.commands.RendererCommand.WinLogFont)
  SharedDtor();
}

void RendererCommand_WinLogFont::SharedDtor() {
  face_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void RendererCommand_WinLogFont::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RendererCommand_WinLogFont::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RendererCommand_WinLogFont_descriptor_;
}

const RendererCommand_WinLogFont& RendererCommand_WinLogFont::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2frenderer_5fcommand_2eproto();
  return *default_instance_;
}

RendererCommand_WinLogFont* RendererCommand_WinLogFont::default_instance_ = NULL;

RendererCommand_WinLogFont* RendererCommand_WinLogFont::New(::google::protobuf::Arena* arena) const {
  RendererCommand_WinLogFont* n = new RendererCommand_WinLogFont;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RendererCommand_WinLogFont::Clear() {
// @@protoc_insertion_point(message_clear_start:mozc.commands.RendererCommand.WinLogFont)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(RendererCommand_WinLogFont, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<RendererCommand_WinLogFont*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(height_, strike_out_);
  }
  if (_has_bits_[8 / 32] & 16128u) {
    ZR_(out_precision_, quality_);
    char_set_ = 1;
    pitch_and_family_ = 0;
    if (has_face_name()) {
      face_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool RendererCommand_WinLogFont::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mozc.commands.RendererCommand.WinLogFont)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 height = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_width;
        break;
      }

      // optional int32 width = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_escapement;
        break;
      }

      // optional int32 escapement = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_escapement:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &escapement_)));
          set_has_escapement();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_orientation;
        break;
      }

      // optional int32 orientation = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_orientation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &orientation_)));
          set_has_orientation();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_weight;
        break;
      }

      // optional int32 weight = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &weight_)));
          set_has_weight();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_italic;
        break;
      }

      // optional bool italic = 6 [default = false];
      case 6: {
        if (tag == 48) {
         parse_italic:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &italic_)));
          set_has_italic();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_underline;
        break;
      }

      // optional bool underline = 7 [default = false];
      case 7: {
        if (tag == 56) {
         parse_underline:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &underline_)));
          set_has_underline();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_strike_out;
        break;
      }

      // optional bool strike_out = 8 [default = false];
      case 8: {
        if (tag == 64) {
         parse_strike_out:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &strike_out_)));
          set_has_strike_out();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_char_set;
        break;
      }

      // optional int32 char_set = 9 [default = 1];
      case 9: {
        if (tag == 72) {
         parse_char_set:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &char_set_)));
          set_has_char_set();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_out_precision;
        break;
      }

      // optional int32 out_precision = 10 [default = 0];
      case 10: {
        if (tag == 80) {
         parse_out_precision:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &out_precision_)));
          set_has_out_precision();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_clip_precision;
        break;
      }

      // optional int32 clip_precision = 11 [default = 0];
      case 11: {
        if (tag == 88) {
         parse_clip_precision:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &clip_precision_)));
          set_has_clip_precision();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_quality;
        break;
      }

      // optional int32 quality = 12 [default = 0];
      case 12: {
        if (tag == 96) {
         parse_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quality_)));
          set_has_quality();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_pitch_and_family;
        break;
      }

      // optional int32 pitch_and_family = 13 [default = 0];
      case 13: {
        if (tag == 104) {
         parse_pitch_and_family:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pitch_and_family_)));
          set_has_pitch_and_family();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_face_name;
        break;
      }

      // optional string face_name = 14;
      case 14: {
        if (tag == 114) {
         parse_face_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_face_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->face_name().data(), this->face_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mozc.commands.RendererCommand.WinLogFont.face_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mozc.commands.RendererCommand.WinLogFont)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mozc.commands.RendererCommand.WinLogFont)
  return false;
#undef DO_
}

void RendererCommand_WinLogFont::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mozc.commands.RendererCommand.WinLogFont)
  // optional int32 height = 1 [default = 0];
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->height(), output);
  }

  // optional int32 width = 2 [default = 0];
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->width(), output);
  }

  // optional int32 escapement = 3 [default = 0];
  if (has_escapement()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->escapement(), output);
  }

  // optional int32 orientation = 4 [default = 0];
  if (has_orientation()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->orientation(), output);
  }

  // optional int32 weight = 5 [default = 0];
  if (has_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->weight(), output);
  }

  // optional bool italic = 6 [default = false];
  if (has_italic()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->italic(), output);
  }

  // optional bool underline = 7 [default = false];
  if (has_underline()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->underline(), output);
  }

  // optional bool strike_out = 8 [default = false];
  if (has_strike_out()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->strike_out(), output);
  }

  // optional int32 char_set = 9 [default = 1];
  if (has_char_set()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->char_set(), output);
  }

  // optional int32 out_precision = 10 [default = 0];
  if (has_out_precision()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->out_precision(), output);
  }

  // optional int32 clip_precision = 11 [default = 0];
  if (has_clip_precision()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->clip_precision(), output);
  }

  // optional int32 quality = 12 [default = 0];
  if (has_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->quality(), output);
  }

  // optional int32 pitch_and_family = 13 [default = 0];
  if (has_pitch_and_family()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->pitch_and_family(), output);
  }

  // optional string face_name = 14;
  if (has_face_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->face_name().data(), this->face_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mozc.commands.RendererCommand.WinLogFont.face_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->face_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mozc.commands.RendererCommand.WinLogFont)
}

::google::protobuf::uint8* RendererCommand_WinLogFont::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mozc.commands.RendererCommand.WinLogFont)
  // optional int32 height = 1 [default = 0];
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->height(), target);
  }

  // optional int32 width = 2 [default = 0];
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->width(), target);
  }

  // optional int32 escapement = 3 [default = 0];
  if (has_escapement()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->escapement(), target);
  }

  // optional int32 orientation = 4 [default = 0];
  if (has_orientation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->orientation(), target);
  }

  // optional int32 weight = 5 [default = 0];
  if (has_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->weight(), target);
  }

  // optional bool italic = 6 [default = false];
  if (has_italic()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->italic(), target);
  }

  // optional bool underline = 7 [default = false];
  if (has_underline()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->underline(), target);
  }

  // optional bool strike_out = 8 [default = false];
  if (has_strike_out()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->strike_out(), target);
  }

  // optional int32 char_set = 9 [default = 1];
  if (has_char_set()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->char_set(), target);
  }

  // optional int32 out_precision = 10 [default = 0];
  if (has_out_precision()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->out_precision(), target);
  }

  // optional int32 clip_precision = 11 [default = 0];
  if (has_clip_precision()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->clip_precision(), target);
  }

  // optional int32 quality = 12 [default = 0];
  if (has_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->quality(), target);
  }

  // optional int32 pitch_and_family = 13 [default = 0];
  if (has_pitch_and_family()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->pitch_and_family(), target);
  }

  // optional string face_name = 14;
  if (has_face_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->face_name().data(), this->face_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mozc.commands.RendererCommand.WinLogFont.face_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->face_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mozc.commands.RendererCommand.WinLogFont)
  return target;
}

int RendererCommand_WinLogFont::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:mozc.commands.RendererCommand.WinLogFont)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional int32 height = 1 [default = 0];
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->height());
    }

    // optional int32 width = 2 [default = 0];
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->width());
    }

    // optional int32 escapement = 3 [default = 0];
    if (has_escapement()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->escapement());
    }

    // optional int32 orientation = 4 [default = 0];
    if (has_orientation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->orientation());
    }

    // optional int32 weight = 5 [default = 0];
    if (has_weight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->weight());
    }

    // optional bool italic = 6 [default = false];
    if (has_italic()) {
      total_size += 1 + 1;
    }

    // optional bool underline = 7 [default = false];
    if (has_underline()) {
      total_size += 1 + 1;
    }

    // optional bool strike_out = 8 [default = false];
    if (has_strike_out()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & 16128u) {
    // optional int32 char_set = 9 [default = 1];
    if (has_char_set()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->char_set());
    }

    // optional int32 out_precision = 10 [default = 0];
    if (has_out_precision()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->out_precision());
    }

    // optional int32 clip_precision = 11 [default = 0];
    if (has_clip_precision()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->clip_precision());
    }

    // optional int32 quality = 12 [default = 0];
    if (has_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quality());
    }

    // optional int32 pitch_and_family = 13 [default = 0];
    if (has_pitch_and_family()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pitch_and_family());
    }

    // optional string face_name = 14;
    if (has_face_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->face_name());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RendererCommand_WinLogFont::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mozc.commands.RendererCommand.WinLogFont)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RendererCommand_WinLogFont* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RendererCommand_WinLogFont>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mozc.commands.RendererCommand.WinLogFont)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mozc.commands.RendererCommand.WinLogFont)
    MergeFrom(*source);
  }
}

void RendererCommand_WinLogFont::MergeFrom(const RendererCommand_WinLogFont& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mozc.commands.RendererCommand.WinLogFont)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_height()) {
      set_height(from.height());
    }
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_escapement()) {
      set_escapement(from.escapement());
    }
    if (from.has_orientation()) {
      set_orientation(from.orientation());
    }
    if (from.has_weight()) {
      set_weight(from.weight());
    }
    if (from.has_italic()) {
      set_italic(from.italic());
    }
    if (from.has_underline()) {
      set_underline(from.underline());
    }
    if (from.has_strike_out()) {
      set_strike_out(from.strike_out());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_char_set()) {
      set_char_set(from.char_set());
    }
    if (from.has_out_precision()) {
      set_out_precision(from.out_precision());
    }
    if (from.has_clip_precision()) {
      set_clip_precision(from.clip_precision());
    }
    if (from.has_quality()) {
      set_quality(from.quality());
    }
    if (from.has_pitch_and_family()) {
      set_pitch_and_family(from.pitch_and_family());
    }
    if (from.has_face_name()) {
      set_has_face_name();
      face_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.face_name_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void RendererCommand_WinLogFont::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mozc.commands.RendererCommand.WinLogFont)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RendererCommand_WinLogFont::CopyFrom(const RendererCommand_WinLogFont& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mozc.commands.RendererCommand.WinLogFont)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RendererCommand_WinLogFont::IsInitialized() const {

  return true;
}

void RendererCommand_WinLogFont::Swap(RendererCommand_WinLogFont* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RendererCommand_WinLogFont::InternalSwap(RendererCommand_WinLogFont* other) {
  std::swap(height_, other->height_);
  std::swap(width_, other->width_);
  std::swap(escapement_, other->escapement_);
  std::swap(orientation_, other->orientation_);
  std::swap(weight_, other->weight_);
  std::swap(italic_, other->italic_);
  std::swap(underline_, other->underline_);
  std::swap(strike_out_, other->strike_out_);
  std::swap(char_set_, other->char_set_);
  std::swap(out_precision_, other->out_precision_);
  std::swap(clip_precision_, other->clip_precision_);
  std::swap(quality_, other->quality_);
  std::swap(pitch_and_family_, other->pitch_and_family_);
  face_name_.Swap(&other->face_name_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RendererCommand_WinLogFont::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RendererCommand_WinLogFont_descriptor_;
  metadata.reflection = RendererCommand_WinLogFont_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

const ::google::protobuf::EnumDescriptor* RendererCommand_CompositionForm_Style_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RendererCommand_CompositionForm_Style_descriptor_;
}
bool RendererCommand_CompositionForm_Style_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 32:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const RendererCommand_CompositionForm_Style RendererCommand_CompositionForm::DEFAULT;
const RendererCommand_CompositionForm_Style RendererCommand_CompositionForm::RECT;
const RendererCommand_CompositionForm_Style RendererCommand_CompositionForm::POINT;
const RendererCommand_CompositionForm_Style RendererCommand_CompositionForm::FORCE_POSITION;
const RendererCommand_CompositionForm_Style RendererCommand_CompositionForm::Style_MIN;
const RendererCommand_CompositionForm_Style RendererCommand_CompositionForm::Style_MAX;
const int RendererCommand_CompositionForm::Style_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RendererCommand_CompositionForm::kCurrentPositionFieldNumber;
const int RendererCommand_CompositionForm::kAreaFieldNumber;
const int RendererCommand_CompositionForm::kStyleBitsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RendererCommand_CompositionForm::RendererCommand_CompositionForm()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mozc.commands.RendererCommand.CompositionForm)
}

void RendererCommand_CompositionForm::InitAsDefaultInstance() {
  current_position_ = const_cast< ::mozc::commands::RendererCommand_Point*>(&::mozc::commands::RendererCommand_Point::default_instance());
  area_ = const_cast< ::mozc::commands::RendererCommand_Rectangle*>(&::mozc::commands::RendererCommand_Rectangle::default_instance());
}

RendererCommand_CompositionForm::RendererCommand_CompositionForm(const RendererCommand_CompositionForm& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mozc.commands.RendererCommand.CompositionForm)
}

void RendererCommand_CompositionForm::SharedCtor() {
  _cached_size_ = 0;
  current_position_ = NULL;
  area_ = NULL;
  style_bits_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RendererCommand_CompositionForm::~RendererCommand_CompositionForm() {
  // @@protoc_insertion_point(destructor:mozc.commands.RendererCommand.CompositionForm)
  SharedDtor();
}

void RendererCommand_CompositionForm::SharedDtor() {
  if (this != default_instance_) {
    delete current_position_;
    delete area_;
  }
}

void RendererCommand_CompositionForm::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RendererCommand_CompositionForm::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RendererCommand_CompositionForm_descriptor_;
}

const RendererCommand_CompositionForm& RendererCommand_CompositionForm::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2frenderer_5fcommand_2eproto();
  return *default_instance_;
}

RendererCommand_CompositionForm* RendererCommand_CompositionForm::default_instance_ = NULL;

RendererCommand_CompositionForm* RendererCommand_CompositionForm::New(::google::protobuf::Arena* arena) const {
  RendererCommand_CompositionForm* n = new RendererCommand_CompositionForm;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RendererCommand_CompositionForm::Clear() {
// @@protoc_insertion_point(message_clear_start:mozc.commands.RendererCommand.CompositionForm)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_current_position()) {
      if (current_position_ != NULL) current_position_->::mozc::commands::RendererCommand_Point::Clear();
    }
    if (has_area()) {
      if (area_ != NULL) area_->::mozc::commands::RendererCommand_Rectangle::Clear();
    }
    style_bits_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool RendererCommand_CompositionForm::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mozc.commands.RendererCommand.CompositionForm)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .mozc.commands.RendererCommand.Point current_position = 2;
      case 2: {
        if (tag == 18) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_current_position()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_area;
        break;
      }

      // optional .mozc.commands.RendererCommand.Rectangle area = 3;
      case 3: {
        if (tag == 26) {
         parse_area:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_area()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_style_bits;
        break;
      }

      // optional uint32 style_bits = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_style_bits:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &style_bits_)));
          set_has_style_bits();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mozc.commands.RendererCommand.CompositionForm)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mozc.commands.RendererCommand.CompositionForm)
  return false;
#undef DO_
}

void RendererCommand_CompositionForm::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mozc.commands.RendererCommand.CompositionForm)
  // optional .mozc.commands.RendererCommand.Point current_position = 2;
  if (has_current_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->current_position_, output);
  }

  // optional .mozc.commands.RendererCommand.Rectangle area = 3;
  if (has_area()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->area_, output);
  }

  // optional uint32 style_bits = 4 [default = 0];
  if (has_style_bits()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->style_bits(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mozc.commands.RendererCommand.CompositionForm)
}

::google::protobuf::uint8* RendererCommand_CompositionForm::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mozc.commands.RendererCommand.CompositionForm)
  // optional .mozc.commands.RendererCommand.Point current_position = 2;
  if (has_current_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->current_position_, false, target);
  }

  // optional .mozc.commands.RendererCommand.Rectangle area = 3;
  if (has_area()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->area_, false, target);
  }

  // optional uint32 style_bits = 4 [default = 0];
  if (has_style_bits()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->style_bits(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mozc.commands.RendererCommand.CompositionForm)
  return target;
}

int RendererCommand_CompositionForm::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:mozc.commands.RendererCommand.CompositionForm)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional .mozc.commands.RendererCommand.Point current_position = 2;
    if (has_current_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->current_position_);
    }

    // optional .mozc.commands.RendererCommand.Rectangle area = 3;
    if (has_area()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->area_);
    }

    // optional uint32 style_bits = 4 [default = 0];
    if (has_style_bits()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->style_bits());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RendererCommand_CompositionForm::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mozc.commands.RendererCommand.CompositionForm)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RendererCommand_CompositionForm* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RendererCommand_CompositionForm>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mozc.commands.RendererCommand.CompositionForm)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mozc.commands.RendererCommand.CompositionForm)
    MergeFrom(*source);
  }
}

void RendererCommand_CompositionForm::MergeFrom(const RendererCommand_CompositionForm& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mozc.commands.RendererCommand.CompositionForm)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_current_position()) {
      mutable_current_position()->::mozc::commands::RendererCommand_Point::MergeFrom(from.current_position());
    }
    if (from.has_area()) {
      mutable_area()->::mozc::commands::RendererCommand_Rectangle::MergeFrom(from.area());
    }
    if (from.has_style_bits()) {
      set_style_bits(from.style_bits());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void RendererCommand_CompositionForm::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mozc.commands.RendererCommand.CompositionForm)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RendererCommand_CompositionForm::CopyFrom(const RendererCommand_CompositionForm& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mozc.commands.RendererCommand.CompositionForm)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RendererCommand_CompositionForm::IsInitialized() const {

  return true;
}

void RendererCommand_CompositionForm::Swap(RendererCommand_CompositionForm* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RendererCommand_CompositionForm::InternalSwap(RendererCommand_CompositionForm* other) {
  std::swap(current_position_, other->current_position_);
  std::swap(area_, other->area_);
  std::swap(style_bits_, other->style_bits_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RendererCommand_CompositionForm::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RendererCommand_CompositionForm_descriptor_;
  metadata.reflection = RendererCommand_CompositionForm_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

const ::google::protobuf::EnumDescriptor* RendererCommand_CandidateForm_Style_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RendererCommand_CandidateForm_Style_descriptor_;
}
bool RendererCommand_CandidateForm_Style_IsValid(int value) {
  switch(value) {
    case 0:
    case 64:
    case 128:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const RendererCommand_CandidateForm_Style RendererCommand_CandidateForm::DEFAULT;
const RendererCommand_CandidateForm_Style RendererCommand_CandidateForm::CANDIDATEPOS;
const RendererCommand_CandidateForm_Style RendererCommand_CandidateForm::EXCLUDE;
const RendererCommand_CandidateForm_Style RendererCommand_CandidateForm::Style_MIN;
const RendererCommand_CandidateForm_Style RendererCommand_CandidateForm::Style_MAX;
const int RendererCommand_CandidateForm::Style_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RendererCommand_CandidateForm::kCurrentPositionFieldNumber;
const int RendererCommand_CandidateForm::kAreaFieldNumber;
const int RendererCommand_CandidateForm::kStyleBitsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RendererCommand_CandidateForm::RendererCommand_CandidateForm()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mozc.commands.RendererCommand.CandidateForm)
}

void RendererCommand_CandidateForm::InitAsDefaultInstance() {
  current_position_ = const_cast< ::mozc::commands::RendererCommand_Point*>(&::mozc::commands::RendererCommand_Point::default_instance());
  area_ = const_cast< ::mozc::commands::RendererCommand_Rectangle*>(&::mozc::commands::RendererCommand_Rectangle::default_instance());
}

RendererCommand_CandidateForm::RendererCommand_CandidateForm(const RendererCommand_CandidateForm& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mozc.commands.RendererCommand.CandidateForm)
}

void RendererCommand_CandidateForm::SharedCtor() {
  _cached_size_ = 0;
  current_position_ = NULL;
  area_ = NULL;
  style_bits_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RendererCommand_CandidateForm::~RendererCommand_CandidateForm() {
  // @@protoc_insertion_point(destructor:mozc.commands.RendererCommand.CandidateForm)
  SharedDtor();
}

void RendererCommand_CandidateForm::SharedDtor() {
  if (this != default_instance_) {
    delete current_position_;
    delete area_;
  }
}

void RendererCommand_CandidateForm::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RendererCommand_CandidateForm::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RendererCommand_CandidateForm_descriptor_;
}

const RendererCommand_CandidateForm& RendererCommand_CandidateForm::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2frenderer_5fcommand_2eproto();
  return *default_instance_;
}

RendererCommand_CandidateForm* RendererCommand_CandidateForm::default_instance_ = NULL;

RendererCommand_CandidateForm* RendererCommand_CandidateForm::New(::google::protobuf::Arena* arena) const {
  RendererCommand_CandidateForm* n = new RendererCommand_CandidateForm;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RendererCommand_CandidateForm::Clear() {
// @@protoc_insertion_point(message_clear_start:mozc.commands.RendererCommand.CandidateForm)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_current_position()) {
      if (current_position_ != NULL) current_position_->::mozc::commands::RendererCommand_Point::Clear();
    }
    if (has_area()) {
      if (area_ != NULL) area_->::mozc::commands::RendererCommand_Rectangle::Clear();
    }
    style_bits_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool RendererCommand_CandidateForm::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mozc.commands.RendererCommand.CandidateForm)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .mozc.commands.RendererCommand.Point current_position = 2;
      case 2: {
        if (tag == 18) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_current_position()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_area;
        break;
      }

      // optional .mozc.commands.RendererCommand.Rectangle area = 3;
      case 3: {
        if (tag == 26) {
         parse_area:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_area()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_style_bits;
        break;
      }

      // optional uint32 style_bits = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_style_bits:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &style_bits_)));
          set_has_style_bits();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mozc.commands.RendererCommand.CandidateForm)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mozc.commands.RendererCommand.CandidateForm)
  return false;
#undef DO_
}

void RendererCommand_CandidateForm::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mozc.commands.RendererCommand.CandidateForm)
  // optional .mozc.commands.RendererCommand.Point current_position = 2;
  if (has_current_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->current_position_, output);
  }

  // optional .mozc.commands.RendererCommand.Rectangle area = 3;
  if (has_area()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->area_, output);
  }

  // optional uint32 style_bits = 4 [default = 0];
  if (has_style_bits()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->style_bits(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mozc.commands.RendererCommand.CandidateForm)
}

::google::protobuf::uint8* RendererCommand_CandidateForm::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mozc.commands.RendererCommand.CandidateForm)
  // optional .mozc.commands.RendererCommand.Point current_position = 2;
  if (has_current_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->current_position_, false, target);
  }

  // optional .mozc.commands.RendererCommand.Rectangle area = 3;
  if (has_area()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->area_, false, target);
  }

  // optional uint32 style_bits = 4 [default = 0];
  if (has_style_bits()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->style_bits(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mozc.commands.RendererCommand.CandidateForm)
  return target;
}

int RendererCommand_CandidateForm::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:mozc.commands.RendererCommand.CandidateForm)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional .mozc.commands.RendererCommand.Point current_position = 2;
    if (has_current_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->current_position_);
    }

    // optional .mozc.commands.RendererCommand.Rectangle area = 3;
    if (has_area()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->area_);
    }

    // optional uint32 style_bits = 4 [default = 0];
    if (has_style_bits()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->style_bits());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RendererCommand_CandidateForm::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mozc.commands.RendererCommand.CandidateForm)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RendererCommand_CandidateForm* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RendererCommand_CandidateForm>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mozc.commands.RendererCommand.CandidateForm)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mozc.commands.RendererCommand.CandidateForm)
    MergeFrom(*source);
  }
}

void RendererCommand_CandidateForm::MergeFrom(const RendererCommand_CandidateForm& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mozc.commands.RendererCommand.CandidateForm)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_current_position()) {
      mutable_current_position()->::mozc::commands::RendererCommand_Point::MergeFrom(from.current_position());
    }
    if (from.has_area()) {
      mutable_area()->::mozc::commands::RendererCommand_Rectangle::MergeFrom(from.area());
    }
    if (from.has_style_bits()) {
      set_style_bits(from.style_bits());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void RendererCommand_CandidateForm::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mozc.commands.RendererCommand.CandidateForm)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RendererCommand_CandidateForm::CopyFrom(const RendererCommand_CandidateForm& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mozc.commands.RendererCommand.CandidateForm)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RendererCommand_CandidateForm::IsInitialized() const {

  return true;
}

void RendererCommand_CandidateForm::Swap(RendererCommand_CandidateForm* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RendererCommand_CandidateForm::InternalSwap(RendererCommand_CandidateForm* other) {
  std::swap(current_position_, other->current_position_);
  std::swap(area_, other->area_);
  std::swap(style_bits_, other->style_bits_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RendererCommand_CandidateForm::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RendererCommand_CandidateForm_descriptor_;
  metadata.reflection = RendererCommand_CandidateForm_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RendererCommand_CharacterPosition::kPositionFieldNumber;
const int RendererCommand_CharacterPosition::kTopLeftFieldNumber;
const int RendererCommand_CharacterPosition::kLineHeightFieldNumber;
const int RendererCommand_CharacterPosition::kDocumentAreaFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RendererCommand_CharacterPosition::RendererCommand_CharacterPosition()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mozc.commands.RendererCommand.CharacterPosition)
}

void RendererCommand_CharacterPosition::InitAsDefaultInstance() {
  top_left_ = const_cast< ::mozc::commands::RendererCommand_Point*>(&::mozc::commands::RendererCommand_Point::default_instance());
  document_area_ = const_cast< ::mozc::commands::RendererCommand_Rectangle*>(&::mozc::commands::RendererCommand_Rectangle::default_instance());
}

RendererCommand_CharacterPosition::RendererCommand_CharacterPosition(const RendererCommand_CharacterPosition& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mozc.commands.RendererCommand.CharacterPosition)
}

void RendererCommand_CharacterPosition::SharedCtor() {
  _cached_size_ = 0;
  position_ = 0u;
  top_left_ = NULL;
  line_height_ = 0u;
  document_area_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RendererCommand_CharacterPosition::~RendererCommand_CharacterPosition() {
  // @@protoc_insertion_point(destructor:mozc.commands.RendererCommand.CharacterPosition)
  SharedDtor();
}

void RendererCommand_CharacterPosition::SharedDtor() {
  if (this != default_instance_) {
    delete top_left_;
    delete document_area_;
  }
}

void RendererCommand_CharacterPosition::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RendererCommand_CharacterPosition::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RendererCommand_CharacterPosition_descriptor_;
}

const RendererCommand_CharacterPosition& RendererCommand_CharacterPosition::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2frenderer_5fcommand_2eproto();
  return *default_instance_;
}

RendererCommand_CharacterPosition* RendererCommand_CharacterPosition::default_instance_ = NULL;

RendererCommand_CharacterPosition* RendererCommand_CharacterPosition::New(::google::protobuf::Arena* arena) const {
  RendererCommand_CharacterPosition* n = new RendererCommand_CharacterPosition;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RendererCommand_CharacterPosition::Clear() {
// @@protoc_insertion_point(message_clear_start:mozc.commands.RendererCommand.CharacterPosition)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(RendererCommand_CharacterPosition, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<RendererCommand_CharacterPosition*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 15u) {
    ZR_(position_, line_height_);
    if (has_top_left()) {
      if (top_left_ != NULL) top_left_->::mozc::commands::RendererCommand_Point::Clear();
    }
    if (has_document_area()) {
      if (document_area_ != NULL) document_area_->::mozc::commands::RendererCommand_Rectangle::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool RendererCommand_CharacterPosition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mozc.commands.RendererCommand.CharacterPosition)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 position = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &position_)));
          set_has_position();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_top_left;
        break;
      }

      // optional .mozc.commands.RendererCommand.Point top_left = 2;
      case 2: {
        if (tag == 18) {
         parse_top_left:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_top_left()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_line_height;
        break;
      }

      // optional uint32 line_height = 3;
      case 3: {
        if (tag == 24) {
         parse_line_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &line_height_)));
          set_has_line_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_document_area;
        break;
      }

      // optional .mozc.commands.RendererCommand.Rectangle document_area = 4;
      case 4: {
        if (tag == 34) {
         parse_document_area:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_document_area()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mozc.commands.RendererCommand.CharacterPosition)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mozc.commands.RendererCommand.CharacterPosition)
  return false;
#undef DO_
}

void RendererCommand_CharacterPosition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mozc.commands.RendererCommand.CharacterPosition)
  // optional uint32 position = 1;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->position(), output);
  }

  // optional .mozc.commands.RendererCommand.Point top_left = 2;
  if (has_top_left()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->top_left_, output);
  }

  // optional uint32 line_height = 3;
  if (has_line_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->line_height(), output);
  }

  // optional .mozc.commands.RendererCommand.Rectangle document_area = 4;
  if (has_document_area()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->document_area_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mozc.commands.RendererCommand.CharacterPosition)
}

::google::protobuf::uint8* RendererCommand_CharacterPosition::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mozc.commands.RendererCommand.CharacterPosition)
  // optional uint32 position = 1;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->position(), target);
  }

  // optional .mozc.commands.RendererCommand.Point top_left = 2;
  if (has_top_left()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->top_left_, false, target);
  }

  // optional uint32 line_height = 3;
  if (has_line_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->line_height(), target);
  }

  // optional .mozc.commands.RendererCommand.Rectangle document_area = 4;
  if (has_document_area()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->document_area_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mozc.commands.RendererCommand.CharacterPosition)
  return target;
}

int RendererCommand_CharacterPosition::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:mozc.commands.RendererCommand.CharacterPosition)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 15u) {
    // optional uint32 position = 1;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->position());
    }

    // optional .mozc.commands.RendererCommand.Point top_left = 2;
    if (has_top_left()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->top_left_);
    }

    // optional uint32 line_height = 3;
    if (has_line_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->line_height());
    }

    // optional .mozc.commands.RendererCommand.Rectangle document_area = 4;
    if (has_document_area()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->document_area_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RendererCommand_CharacterPosition::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mozc.commands.RendererCommand.CharacterPosition)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RendererCommand_CharacterPosition* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RendererCommand_CharacterPosition>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mozc.commands.RendererCommand.CharacterPosition)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mozc.commands.RendererCommand.CharacterPosition)
    MergeFrom(*source);
  }
}

void RendererCommand_CharacterPosition::MergeFrom(const RendererCommand_CharacterPosition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mozc.commands.RendererCommand.CharacterPosition)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_position()) {
      set_position(from.position());
    }
    if (from.has_top_left()) {
      mutable_top_left()->::mozc::commands::RendererCommand_Point::MergeFrom(from.top_left());
    }
    if (from.has_line_height()) {
      set_line_height(from.line_height());
    }
    if (from.has_document_area()) {
      mutable_document_area()->::mozc::commands::RendererCommand_Rectangle::MergeFrom(from.document_area());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void RendererCommand_CharacterPosition::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mozc.commands.RendererCommand.CharacterPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RendererCommand_CharacterPosition::CopyFrom(const RendererCommand_CharacterPosition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mozc.commands.RendererCommand.CharacterPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RendererCommand_CharacterPosition::IsInitialized() const {

  return true;
}

void RendererCommand_CharacterPosition::Swap(RendererCommand_CharacterPosition* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RendererCommand_CharacterPosition::InternalSwap(RendererCommand_CharacterPosition* other) {
  std::swap(position_, other->position_);
  std::swap(top_left_, other->top_left_);
  std::swap(line_height_, other->line_height_);
  std::swap(document_area_, other->document_area_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RendererCommand_CharacterPosition::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RendererCommand_CharacterPosition_descriptor_;
  metadata.reflection = RendererCommand_CharacterPosition_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RendererCommand_CaretInfo::kBlinkingFieldNumber;
const int RendererCommand_CaretInfo::kCaretRectFieldNumber;
const int RendererCommand_CaretInfo::kTargetWindowHandleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RendererCommand_CaretInfo::RendererCommand_CaretInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mozc.commands.RendererCommand.CaretInfo)
}

void RendererCommand_CaretInfo::InitAsDefaultInstance() {
  caret_rect_ = const_cast< ::mozc::commands::RendererCommand_Rectangle*>(&::mozc::commands::RendererCommand_Rectangle::default_instance());
}

RendererCommand_CaretInfo::RendererCommand_CaretInfo(const RendererCommand_CaretInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mozc.commands.RendererCommand.CaretInfo)
}

void RendererCommand_CaretInfo::SharedCtor() {
  _cached_size_ = 0;
  blinking_ = false;
  caret_rect_ = NULL;
  target_window_handle_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RendererCommand_CaretInfo::~RendererCommand_CaretInfo() {
  // @@protoc_insertion_point(destructor:mozc.commands.RendererCommand.CaretInfo)
  SharedDtor();
}

void RendererCommand_CaretInfo::SharedDtor() {
  if (this != default_instance_) {
    delete caret_rect_;
  }
}

void RendererCommand_CaretInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RendererCommand_CaretInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RendererCommand_CaretInfo_descriptor_;
}

const RendererCommand_CaretInfo& RendererCommand_CaretInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2frenderer_5fcommand_2eproto();
  return *default_instance_;
}

RendererCommand_CaretInfo* RendererCommand_CaretInfo::default_instance_ = NULL;

RendererCommand_CaretInfo* RendererCommand_CaretInfo::New(::google::protobuf::Arena* arena) const {
  RendererCommand_CaretInfo* n = new RendererCommand_CaretInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RendererCommand_CaretInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:mozc.commands.RendererCommand.CaretInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(RendererCommand_CaretInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<RendererCommand_CaretInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 7u) {
    ZR_(blinking_, target_window_handle_);
    if (has_caret_rect()) {
      if (caret_rect_ != NULL) caret_rect_->::mozc::commands::RendererCommand_Rectangle::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool RendererCommand_CaretInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mozc.commands.RendererCommand.CaretInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool blinking = 1 [default = false];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &blinking_)));
          set_has_blinking();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_caret_rect;
        break;
      }

      // optional .mozc.commands.RendererCommand.Rectangle caret_rect = 2;
      case 2: {
        if (tag == 18) {
         parse_caret_rect:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_caret_rect()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_target_window_handle;
        break;
      }

      // optional uint32 target_window_handle = 3;
      case 3: {
        if (tag == 24) {
         parse_target_window_handle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &target_window_handle_)));
          set_has_target_window_handle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mozc.commands.RendererCommand.CaretInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mozc.commands.RendererCommand.CaretInfo)
  return false;
#undef DO_
}

void RendererCommand_CaretInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mozc.commands.RendererCommand.CaretInfo)
  // optional bool blinking = 1 [default = false];
  if (has_blinking()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->blinking(), output);
  }

  // optional .mozc.commands.RendererCommand.Rectangle caret_rect = 2;
  if (has_caret_rect()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->caret_rect_, output);
  }

  // optional uint32 target_window_handle = 3;
  if (has_target_window_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->target_window_handle(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mozc.commands.RendererCommand.CaretInfo)
}

::google::protobuf::uint8* RendererCommand_CaretInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mozc.commands.RendererCommand.CaretInfo)
  // optional bool blinking = 1 [default = false];
  if (has_blinking()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->blinking(), target);
  }

  // optional .mozc.commands.RendererCommand.Rectangle caret_rect = 2;
  if (has_caret_rect()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->caret_rect_, false, target);
  }

  // optional uint32 target_window_handle = 3;
  if (has_target_window_handle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->target_window_handle(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mozc.commands.RendererCommand.CaretInfo)
  return target;
}

int RendererCommand_CaretInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:mozc.commands.RendererCommand.CaretInfo)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional bool blinking = 1 [default = false];
    if (has_blinking()) {
      total_size += 1 + 1;
    }

    // optional .mozc.commands.RendererCommand.Rectangle caret_rect = 2;
    if (has_caret_rect()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->caret_rect_);
    }

    // optional uint32 target_window_handle = 3;
    if (has_target_window_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->target_window_handle());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RendererCommand_CaretInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mozc.commands.RendererCommand.CaretInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RendererCommand_CaretInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RendererCommand_CaretInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mozc.commands.RendererCommand.CaretInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mozc.commands.RendererCommand.CaretInfo)
    MergeFrom(*source);
  }
}

void RendererCommand_CaretInfo::MergeFrom(const RendererCommand_CaretInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mozc.commands.RendererCommand.CaretInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_blinking()) {
      set_blinking(from.blinking());
    }
    if (from.has_caret_rect()) {
      mutable_caret_rect()->::mozc::commands::RendererCommand_Rectangle::MergeFrom(from.caret_rect());
    }
    if (from.has_target_window_handle()) {
      set_target_window_handle(from.target_window_handle());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void RendererCommand_CaretInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mozc.commands.RendererCommand.CaretInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RendererCommand_CaretInfo::CopyFrom(const RendererCommand_CaretInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mozc.commands.RendererCommand.CaretInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RendererCommand_CaretInfo::IsInitialized() const {

  return true;
}

void RendererCommand_CaretInfo::Swap(RendererCommand_CaretInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RendererCommand_CaretInfo::InternalSwap(RendererCommand_CaretInfo* other) {
  std::swap(blinking_, other->blinking_);
  std::swap(caret_rect_, other->caret_rect_);
  std::swap(target_window_handle_, other->target_window_handle_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RendererCommand_CaretInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RendererCommand_CaretInfo_descriptor_;
  metadata.reflection = RendererCommand_CaretInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RendererCommand_IndicatorInfo::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RendererCommand_IndicatorInfo::RendererCommand_IndicatorInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mozc.commands.RendererCommand.IndicatorInfo)
}

void RendererCommand_IndicatorInfo::InitAsDefaultInstance() {
  status_ = const_cast< ::mozc::commands::Status*>(&::mozc::commands::Status::default_instance());
}

RendererCommand_IndicatorInfo::RendererCommand_IndicatorInfo(const RendererCommand_IndicatorInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mozc.commands.RendererCommand.IndicatorInfo)
}

void RendererCommand_IndicatorInfo::SharedCtor() {
  _cached_size_ = 0;
  status_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RendererCommand_IndicatorInfo::~RendererCommand_IndicatorInfo() {
  // @@protoc_insertion_point(destructor:mozc.commands.RendererCommand.IndicatorInfo)
  SharedDtor();
}

void RendererCommand_IndicatorInfo::SharedDtor() {
  if (this != default_instance_) {
    delete status_;
  }
}

void RendererCommand_IndicatorInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RendererCommand_IndicatorInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RendererCommand_IndicatorInfo_descriptor_;
}

const RendererCommand_IndicatorInfo& RendererCommand_IndicatorInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2frenderer_5fcommand_2eproto();
  return *default_instance_;
}

RendererCommand_IndicatorInfo* RendererCommand_IndicatorInfo::default_instance_ = NULL;

RendererCommand_IndicatorInfo* RendererCommand_IndicatorInfo::New(::google::protobuf::Arena* arena) const {
  RendererCommand_IndicatorInfo* n = new RendererCommand_IndicatorInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RendererCommand_IndicatorInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:mozc.commands.RendererCommand.IndicatorInfo)
  if (has_status()) {
    if (status_ != NULL) status_->::mozc::commands::Status::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool RendererCommand_IndicatorInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mozc.commands.RendererCommand.IndicatorInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .mozc.commands.Status status = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_status()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mozc.commands.RendererCommand.IndicatorInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mozc.commands.RendererCommand.IndicatorInfo)
  return false;
#undef DO_
}

void RendererCommand_IndicatorInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mozc.commands.RendererCommand.IndicatorInfo)
  // optional .mozc.commands.Status status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->status_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mozc.commands.RendererCommand.IndicatorInfo)
}

::google::protobuf::uint8* RendererCommand_IndicatorInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mozc.commands.RendererCommand.IndicatorInfo)
  // optional .mozc.commands.Status status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->status_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mozc.commands.RendererCommand.IndicatorInfo)
  return target;
}

int RendererCommand_IndicatorInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:mozc.commands.RendererCommand.IndicatorInfo)
  int total_size = 0;

  // optional .mozc.commands.Status status = 1;
  if (has_status()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->status_);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RendererCommand_IndicatorInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mozc.commands.RendererCommand.IndicatorInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RendererCommand_IndicatorInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RendererCommand_IndicatorInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mozc.commands.RendererCommand.IndicatorInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mozc.commands.RendererCommand.IndicatorInfo)
    MergeFrom(*source);
  }
}

void RendererCommand_IndicatorInfo::MergeFrom(const RendererCommand_IndicatorInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mozc.commands.RendererCommand.IndicatorInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      mutable_status()->::mozc::commands::Status::MergeFrom(from.status());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void RendererCommand_IndicatorInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mozc.commands.RendererCommand.IndicatorInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RendererCommand_IndicatorInfo::CopyFrom(const RendererCommand_IndicatorInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mozc.commands.RendererCommand.IndicatorInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RendererCommand_IndicatorInfo::IsInitialized() const {

  return true;
}

void RendererCommand_IndicatorInfo::Swap(RendererCommand_IndicatorInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RendererCommand_IndicatorInfo::InternalSwap(RendererCommand_IndicatorInfo* other) {
  std::swap(status_, other->status_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RendererCommand_IndicatorInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RendererCommand_IndicatorInfo_descriptor_;
  metadata.reflection = RendererCommand_IndicatorInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

const ::google::protobuf::EnumDescriptor* RendererCommand_ApplicationInfo_InputFrameworkType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RendererCommand_ApplicationInfo_InputFrameworkType_descriptor_;
}
bool RendererCommand_ApplicationInfo_InputFrameworkType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const RendererCommand_ApplicationInfo_InputFrameworkType RendererCommand_ApplicationInfo::UNKNOWN_FRAMEWORK;
const RendererCommand_ApplicationInfo_InputFrameworkType RendererCommand_ApplicationInfo::TSF;
const RendererCommand_ApplicationInfo_InputFrameworkType RendererCommand_ApplicationInfo::IMM32;
const RendererCommand_ApplicationInfo_InputFrameworkType RendererCommand_ApplicationInfo::IMKit;
const RendererCommand_ApplicationInfo_InputFrameworkType RendererCommand_ApplicationInfo::IBus;
const RendererCommand_ApplicationInfo_InputFrameworkType RendererCommand_ApplicationInfo::InputFrameworkType_MIN;
const RendererCommand_ApplicationInfo_InputFrameworkType RendererCommand_ApplicationInfo::InputFrameworkType_MAX;
const int RendererCommand_ApplicationInfo::InputFrameworkType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* RendererCommand_ApplicationInfo_UIVisibility_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RendererCommand_ApplicationInfo_UIVisibility_descriptor_;
}
bool RendererCommand_ApplicationInfo_UIVisibility_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const RendererCommand_ApplicationInfo_UIVisibility RendererCommand_ApplicationInfo::ShowUIDefault;
const RendererCommand_ApplicationInfo_UIVisibility RendererCommand_ApplicationInfo::ShowCompositionWindow;
const RendererCommand_ApplicationInfo_UIVisibility RendererCommand_ApplicationInfo::ShowCandidateWindow;
const RendererCommand_ApplicationInfo_UIVisibility RendererCommand_ApplicationInfo::ShowSuggestWindow;
const RendererCommand_ApplicationInfo_UIVisibility RendererCommand_ApplicationInfo::UIVisibility_MIN;
const RendererCommand_ApplicationInfo_UIVisibility RendererCommand_ApplicationInfo::UIVisibility_MAX;
const int RendererCommand_ApplicationInfo::UIVisibility_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RendererCommand_ApplicationInfo::kProcessIdFieldNumber;
const int RendererCommand_ApplicationInfo::kThreadIdFieldNumber;
const int RendererCommand_ApplicationInfo::kReceiverHandleFieldNumber;
const int RendererCommand_ApplicationInfo::kTargetWindowHandleFieldNumber;
const int RendererCommand_ApplicationInfo::kCompositionFontFieldNumber;
const int RendererCommand_ApplicationInfo::kInputFrameworkFieldNumber;
const int RendererCommand_ApplicationInfo::kCompositionFormFieldNumber;
const int RendererCommand_ApplicationInfo::kCandidateFormFieldNumber;
const int RendererCommand_ApplicationInfo::kUiVisibilitiesFieldNumber;
const int RendererCommand_ApplicationInfo::kCompositionTargetFieldNumber;
const int RendererCommand_ApplicationInfo::kCaretInfoFieldNumber;
const int RendererCommand_ApplicationInfo::kPangoFontDescriptionFieldNumber;
const int RendererCommand_ApplicationInfo::kIndicatorInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RendererCommand_ApplicationInfo::RendererCommand_ApplicationInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mozc.commands.RendererCommand.ApplicationInfo)
}

void RendererCommand_ApplicationInfo::InitAsDefaultInstance() {
  composition_font_ = const_cast< ::mozc::commands::RendererCommand_WinLogFont*>(&::mozc::commands::RendererCommand_WinLogFont::default_instance());
  composition_form_ = const_cast< ::mozc::commands::RendererCommand_CompositionForm*>(&::mozc::commands::RendererCommand_CompositionForm::default_instance());
  candidate_form_ = const_cast< ::mozc::commands::RendererCommand_CandidateForm*>(&::mozc::commands::RendererCommand_CandidateForm::default_instance());
  composition_target_ = const_cast< ::mozc::commands::RendererCommand_CharacterPosition*>(&::mozc::commands::RendererCommand_CharacterPosition::default_instance());
  caret_info_ = const_cast< ::mozc::commands::RendererCommand_CaretInfo*>(&::mozc::commands::RendererCommand_CaretInfo::default_instance());
  indicator_info_ = const_cast< ::mozc::commands::RendererCommand_IndicatorInfo*>(&::mozc::commands::RendererCommand_IndicatorInfo::default_instance());
}

RendererCommand_ApplicationInfo::RendererCommand_ApplicationInfo(const RendererCommand_ApplicationInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mozc.commands.RendererCommand.ApplicationInfo)
}

void RendererCommand_ApplicationInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  process_id_ = 0u;
  thread_id_ = 0u;
  receiver_handle_ = 0u;
  target_window_handle_ = 0u;
  composition_font_ = NULL;
  input_framework_ = 0;
  composition_form_ = NULL;
  candidate_form_ = NULL;
  ui_visibilities_ = 0;
  composition_target_ = NULL;
  caret_info_ = NULL;
  pango_font_description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  indicator_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RendererCommand_ApplicationInfo::~RendererCommand_ApplicationInfo() {
  // @@protoc_insertion_point(destructor:mozc.commands.RendererCommand.ApplicationInfo)
  SharedDtor();
}

void RendererCommand_ApplicationInfo::SharedDtor() {
  pango_font_description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete composition_font_;
    delete composition_form_;
    delete candidate_form_;
    delete composition_target_;
    delete caret_info_;
    delete indicator_info_;
  }
}

void RendererCommand_ApplicationInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RendererCommand_ApplicationInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RendererCommand_ApplicationInfo_descriptor_;
}

const RendererCommand_ApplicationInfo& RendererCommand_ApplicationInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2frenderer_5fcommand_2eproto();
  return *default_instance_;
}

RendererCommand_ApplicationInfo* RendererCommand_ApplicationInfo::default_instance_ = NULL;

RendererCommand_ApplicationInfo* RendererCommand_ApplicationInfo::New(::google::protobuf::Arena* arena) const {
  RendererCommand_ApplicationInfo* n = new RendererCommand_ApplicationInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RendererCommand_ApplicationInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:mozc.commands.RendererCommand.ApplicationInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(RendererCommand_ApplicationInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<RendererCommand_ApplicationInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(process_id_, target_window_handle_);
    if (has_composition_font()) {
      if (composition_font_ != NULL) composition_font_->::mozc::commands::RendererCommand_WinLogFont::Clear();
    }
    input_framework_ = 0;
    if (has_composition_form()) {
      if (composition_form_ != NULL) composition_form_->::mozc::commands::RendererCommand_CompositionForm::Clear();
    }
    if (has_candidate_form()) {
      if (candidate_form_ != NULL) candidate_form_->::mozc::commands::RendererCommand_CandidateForm::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 7936u) {
    ui_visibilities_ = 0;
    if (has_composition_target()) {
      if (composition_target_ != NULL) composition_target_->::mozc::commands::RendererCommand_CharacterPosition::Clear();
    }
    if (has_caret_info()) {
      if (caret_info_ != NULL) caret_info_->::mozc::commands::RendererCommand_CaretInfo::Clear();
    }
    if (has_pango_font_description()) {
      pango_font_description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_indicator_info()) {
      if (indicator_info_ != NULL) indicator_info_->::mozc::commands::RendererCommand_IndicatorInfo::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool RendererCommand_ApplicationInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mozc.commands.RendererCommand.ApplicationInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 process_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &process_id_)));
          set_has_process_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_thread_id;
        break;
      }

      // optional uint32 thread_id = 2;
      case 2: {
        if (tag == 16) {
         parse_thread_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &thread_id_)));
          set_has_thread_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_receiver_handle;
        break;
      }

      // optional uint32 receiver_handle = 3;
      case 3: {
        if (tag == 24) {
         parse_receiver_handle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &receiver_handle_)));
          set_has_receiver_handle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_target_window_handle;
        break;
      }

      // optional uint32 target_window_handle = 4;
      case 4: {
        if (tag == 32) {
         parse_target_window_handle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &target_window_handle_)));
          set_has_target_window_handle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_composition_font;
        break;
      }

      // optional .mozc.commands.RendererCommand.WinLogFont composition_font = 5;
      case 5: {
        if (tag == 42) {
         parse_composition_font:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_composition_font()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_input_framework;
        break;
      }

      // optional .mozc.commands.RendererCommand.ApplicationInfo.InputFrameworkType input_framework = 6 [default = UNKNOWN_FRAMEWORK];
      case 6: {
        if (tag == 48) {
         parse_input_framework:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mozc::commands::RendererCommand_ApplicationInfo_InputFrameworkType_IsValid(value)) {
            set_input_framework(static_cast< ::mozc::commands::RendererCommand_ApplicationInfo_InputFrameworkType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_composition_form;
        break;
      }

      // optional .mozc.commands.RendererCommand.CompositionForm composition_form = 7;
      case 7: {
        if (tag == 58) {
         parse_composition_form:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_composition_form()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_candidate_form;
        break;
      }

      // optional .mozc.commands.RendererCommand.CandidateForm candidate_form = 8;
      case 8: {
        if (tag == 66) {
         parse_candidate_form:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_candidate_form()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_ui_visibilities;
        break;
      }

      // optional int32 ui_visibilities = 9 [default = 0];
      case 9: {
        if (tag == 72) {
         parse_ui_visibilities:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ui_visibilities_)));
          set_has_ui_visibilities();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_composition_target;
        break;
      }

      // optional .mozc.commands.RendererCommand.CharacterPosition composition_target = 10;
      case 10: {
        if (tag == 82) {
         parse_composition_target:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_composition_target()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_caret_info;
        break;
      }

      // optional .mozc.commands.RendererCommand.CaretInfo caret_info = 11;
      case 11: {
        if (tag == 90) {
         parse_caret_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_caret_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_pango_font_description;
        break;
      }

      // optional string pango_font_description = 13;
      case 13: {
        if (tag == 106) {
         parse_pango_font_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pango_font_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pango_font_description().data(), this->pango_font_description().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mozc.commands.RendererCommand.ApplicationInfo.pango_font_description");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_indicator_info;
        break;
      }

      // optional .mozc.commands.RendererCommand.IndicatorInfo indicator_info = 14;
      case 14: {
        if (tag == 114) {
         parse_indicator_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_indicator_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mozc.commands.RendererCommand.ApplicationInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mozc.commands.RendererCommand.ApplicationInfo)
  return false;
#undef DO_
}

void RendererCommand_ApplicationInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mozc.commands.RendererCommand.ApplicationInfo)
  // optional uint32 process_id = 1;
  if (has_process_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->process_id(), output);
  }

  // optional uint32 thread_id = 2;
  if (has_thread_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->thread_id(), output);
  }

  // optional uint32 receiver_handle = 3;
  if (has_receiver_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->receiver_handle(), output);
  }

  // optional uint32 target_window_handle = 4;
  if (has_target_window_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->target_window_handle(), output);
  }

  // optional .mozc.commands.RendererCommand.WinLogFont composition_font = 5;
  if (has_composition_font()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->composition_font_, output);
  }

  // optional .mozc.commands.RendererCommand.ApplicationInfo.InputFrameworkType input_framework = 6 [default = UNKNOWN_FRAMEWORK];
  if (has_input_framework()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->input_framework(), output);
  }

  // optional .mozc.commands.RendererCommand.CompositionForm composition_form = 7;
  if (has_composition_form()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->composition_form_, output);
  }

  // optional .mozc.commands.RendererCommand.CandidateForm candidate_form = 8;
  if (has_candidate_form()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->candidate_form_, output);
  }

  // optional int32 ui_visibilities = 9 [default = 0];
  if (has_ui_visibilities()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->ui_visibilities(), output);
  }

  // optional .mozc.commands.RendererCommand.CharacterPosition composition_target = 10;
  if (has_composition_target()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->composition_target_, output);
  }

  // optional .mozc.commands.RendererCommand.CaretInfo caret_info = 11;
  if (has_caret_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *this->caret_info_, output);
  }

  // optional string pango_font_description = 13;
  if (has_pango_font_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pango_font_description().data(), this->pango_font_description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mozc.commands.RendererCommand.ApplicationInfo.pango_font_description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->pango_font_description(), output);
  }

  // optional .mozc.commands.RendererCommand.IndicatorInfo indicator_info = 14;
  if (has_indicator_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, *this->indicator_info_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mozc.commands.RendererCommand.ApplicationInfo)
}

::google::protobuf::uint8* RendererCommand_ApplicationInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mozc.commands.RendererCommand.ApplicationInfo)
  // optional uint32 process_id = 1;
  if (has_process_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->process_id(), target);
  }

  // optional uint32 thread_id = 2;
  if (has_thread_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->thread_id(), target);
  }

  // optional uint32 receiver_handle = 3;
  if (has_receiver_handle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->receiver_handle(), target);
  }

  // optional uint32 target_window_handle = 4;
  if (has_target_window_handle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->target_window_handle(), target);
  }

  // optional .mozc.commands.RendererCommand.WinLogFont composition_font = 5;
  if (has_composition_font()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->composition_font_, false, target);
  }

  // optional .mozc.commands.RendererCommand.ApplicationInfo.InputFrameworkType input_framework = 6 [default = UNKNOWN_FRAMEWORK];
  if (has_input_framework()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->input_framework(), target);
  }

  // optional .mozc.commands.RendererCommand.CompositionForm composition_form = 7;
  if (has_composition_form()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->composition_form_, false, target);
  }

  // optional .mozc.commands.RendererCommand.CandidateForm candidate_form = 8;
  if (has_candidate_form()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->candidate_form_, false, target);
  }

  // optional int32 ui_visibilities = 9 [default = 0];
  if (has_ui_visibilities()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->ui_visibilities(), target);
  }

  // optional .mozc.commands.RendererCommand.CharacterPosition composition_target = 10;
  if (has_composition_target()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *this->composition_target_, false, target);
  }

  // optional .mozc.commands.RendererCommand.CaretInfo caret_info = 11;
  if (has_caret_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, *this->caret_info_, false, target);
  }

  // optional string pango_font_description = 13;
  if (has_pango_font_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pango_font_description().data(), this->pango_font_description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mozc.commands.RendererCommand.ApplicationInfo.pango_font_description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->pango_font_description(), target);
  }

  // optional .mozc.commands.RendererCommand.IndicatorInfo indicator_info = 14;
  if (has_indicator_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        14, *this->indicator_info_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mozc.commands.RendererCommand.ApplicationInfo)
  return target;
}

int RendererCommand_ApplicationInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:mozc.commands.RendererCommand.ApplicationInfo)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional uint32 process_id = 1;
    if (has_process_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->process_id());
    }

    // optional uint32 thread_id = 2;
    if (has_thread_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->thread_id());
    }

    // optional uint32 receiver_handle = 3;
    if (has_receiver_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->receiver_handle());
    }

    // optional uint32 target_window_handle = 4;
    if (has_target_window_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->target_window_handle());
    }

    // optional .mozc.commands.RendererCommand.WinLogFont composition_font = 5;
    if (has_composition_font()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->composition_font_);
    }

    // optional .mozc.commands.RendererCommand.ApplicationInfo.InputFrameworkType input_framework = 6 [default = UNKNOWN_FRAMEWORK];
    if (has_input_framework()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->input_framework());
    }

    // optional .mozc.commands.RendererCommand.CompositionForm composition_form = 7;
    if (has_composition_form()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->composition_form_);
    }

    // optional .mozc.commands.RendererCommand.CandidateForm candidate_form = 8;
    if (has_candidate_form()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->candidate_form_);
    }

  }
  if (_has_bits_[8 / 32] & 7936u) {
    // optional int32 ui_visibilities = 9 [default = 0];
    if (has_ui_visibilities()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ui_visibilities());
    }

    // optional .mozc.commands.RendererCommand.CharacterPosition composition_target = 10;
    if (has_composition_target()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->composition_target_);
    }

    // optional .mozc.commands.RendererCommand.CaretInfo caret_info = 11;
    if (has_caret_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->caret_info_);
    }

    // optional string pango_font_description = 13;
    if (has_pango_font_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pango_font_description());
    }

    // optional .mozc.commands.RendererCommand.IndicatorInfo indicator_info = 14;
    if (has_indicator_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->indicator_info_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RendererCommand_ApplicationInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mozc.commands.RendererCommand.ApplicationInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RendererCommand_ApplicationInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RendererCommand_ApplicationInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mozc.commands.RendererCommand.ApplicationInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mozc.commands.RendererCommand.ApplicationInfo)
    MergeFrom(*source);
  }
}

void RendererCommand_ApplicationInfo::MergeFrom(const RendererCommand_ApplicationInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mozc.commands.RendererCommand.ApplicationInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_process_id()) {
      set_process_id(from.process_id());
    }
    if (from.has_thread_id()) {
      set_thread_id(from.thread_id());
    }
    if (from.has_receiver_handle()) {
      set_receiver_handle(from.receiver_handle());
    }
    if (from.has_target_window_handle()) {
      set_target_window_handle(from.target_window_handle());
    }
    if (from.has_composition_font()) {
      mutable_composition_font()->::mozc::commands::RendererCommand_WinLogFont::MergeFrom(from.composition_font());
    }
    if (from.has_input_framework()) {
      set_input_framework(from.input_framework());
    }
    if (from.has_composition_form()) {
      mutable_composition_form()->::mozc::commands::RendererCommand_CompositionForm::MergeFrom(from.composition_form());
    }
    if (from.has_candidate_form()) {
      mutable_candidate_form()->::mozc::commands::RendererCommand_CandidateForm::MergeFrom(from.candidate_form());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_ui_visibilities()) {
      set_ui_visibilities(from.ui_visibilities());
    }
    if (from.has_composition_target()) {
      mutable_composition_target()->::mozc::commands::RendererCommand_CharacterPosition::MergeFrom(from.composition_target());
    }
    if (from.has_caret_info()) {
      mutable_caret_info()->::mozc::commands::RendererCommand_CaretInfo::MergeFrom(from.caret_info());
    }
    if (from.has_pango_font_description()) {
      set_has_pango_font_description();
      pango_font_description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pango_font_description_);
    }
    if (from.has_indicator_info()) {
      mutable_indicator_info()->::mozc::commands::RendererCommand_IndicatorInfo::MergeFrom(from.indicator_info());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void RendererCommand_ApplicationInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mozc.commands.RendererCommand.ApplicationInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RendererCommand_ApplicationInfo::CopyFrom(const RendererCommand_ApplicationInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mozc.commands.RendererCommand.ApplicationInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RendererCommand_ApplicationInfo::IsInitialized() const {

  return true;
}

void RendererCommand_ApplicationInfo::Swap(RendererCommand_ApplicationInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RendererCommand_ApplicationInfo::InternalSwap(RendererCommand_ApplicationInfo* other) {
  std::swap(process_id_, other->process_id_);
  std::swap(thread_id_, other->thread_id_);
  std::swap(receiver_handle_, other->receiver_handle_);
  std::swap(target_window_handle_, other->target_window_handle_);
  std::swap(composition_font_, other->composition_font_);
  std::swap(input_framework_, other->input_framework_);
  std::swap(composition_form_, other->composition_form_);
  std::swap(candidate_form_, other->candidate_form_);
  std::swap(ui_visibilities_, other->ui_visibilities_);
  std::swap(composition_target_, other->composition_target_);
  std::swap(caret_info_, other->caret_info_);
  pango_font_description_.Swap(&other->pango_font_description_);
  std::swap(indicator_info_, other->indicator_info_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RendererCommand_ApplicationInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RendererCommand_ApplicationInfo_descriptor_;
  metadata.reflection = RendererCommand_ApplicationInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RendererCommand::kTypeFieldNumber;
const int RendererCommand::kVisibleFieldNumber;
const int RendererCommand::kOutputFieldNumber;
const int RendererCommand::kPreeditRectangleFieldNumber;
const int RendererCommand::kApplicationInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RendererCommand::RendererCommand()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mozc.commands.RendererCommand)
}

void RendererCommand::InitAsDefaultInstance() {
  output_ = const_cast< ::mozc::commands::Output*>(&::mozc::commands::Output::default_instance());
  preedit_rectangle_ = const_cast< ::mozc::commands::RendererCommand_Rectangle*>(&::mozc::commands::RendererCommand_Rectangle::default_instance());
  application_info_ = const_cast< ::mozc::commands::RendererCommand_ApplicationInfo*>(&::mozc::commands::RendererCommand_ApplicationInfo::default_instance());
}

RendererCommand::RendererCommand(const RendererCommand& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mozc.commands.RendererCommand)
}

void RendererCommand::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  visible_ = false;
  output_ = NULL;
  preedit_rectangle_ = NULL;
  application_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RendererCommand::~RendererCommand() {
  // @@protoc_insertion_point(destructor:mozc.commands.RendererCommand)
  SharedDtor();
}

void RendererCommand::SharedDtor() {
  if (this != default_instance_) {
    delete output_;
    delete preedit_rectangle_;
    delete application_info_;
  }
}

void RendererCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RendererCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RendererCommand_descriptor_;
}

const RendererCommand& RendererCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2frenderer_5fcommand_2eproto();
  return *default_instance_;
}

RendererCommand* RendererCommand::default_instance_ = NULL;

RendererCommand* RendererCommand::New(::google::protobuf::Arena* arena) const {
  RendererCommand* n = new RendererCommand;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RendererCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:mozc.commands.RendererCommand)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(RendererCommand, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<RendererCommand*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 31u) {
    ZR_(type_, visible_);
    if (has_output()) {
      if (output_ != NULL) output_->::mozc::commands::Output::Clear();
    }
    if (has_preedit_rectangle()) {
      if (preedit_rectangle_ != NULL) preedit_rectangle_->::mozc::commands::RendererCommand_Rectangle::Clear();
    }
    if (has_application_info()) {
      if (application_info_ != NULL) application_info_->::mozc::commands::RendererCommand_ApplicationInfo::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool RendererCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mozc.commands.RendererCommand)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .mozc.commands.RendererCommand.CommandType type = 1 [default = NOOP];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mozc::commands::RendererCommand_CommandType_IsValid(value)) {
            set_type(static_cast< ::mozc::commands::RendererCommand_CommandType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_visible;
        break;
      }

      // optional bool visible = 2 [default = false];
      case 2: {
        if (tag == 16) {
         parse_visible:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &visible_)));
          set_has_visible();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_output;
        break;
      }

      // optional .mozc.commands.Output output = 3;
      case 3: {
        if (tag == 26) {
         parse_output:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_output()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_preedit_rectangle;
        break;
      }

      // optional .mozc.commands.RendererCommand.Rectangle preedit_rectangle = 4;
      case 4: {
        if (tag == 34) {
         parse_preedit_rectangle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_preedit_rectangle()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_application_info;
        break;
      }

      // optional .mozc.commands.RendererCommand.ApplicationInfo application_info = 5;
      case 5: {
        if (tag == 42) {
         parse_application_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_application_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mozc.commands.RendererCommand)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mozc.commands.RendererCommand)
  return false;
#undef DO_
}

void RendererCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mozc.commands.RendererCommand)
  // optional .mozc.commands.RendererCommand.CommandType type = 1 [default = NOOP];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional bool visible = 2 [default = false];
  if (has_visible()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->visible(), output);
  }

  // optional .mozc.commands.Output output = 3;
  if (has_output()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->output_, output);
  }

  // optional .mozc.commands.RendererCommand.Rectangle preedit_rectangle = 4;
  if (has_preedit_rectangle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->preedit_rectangle_, output);
  }

  // optional .mozc.commands.RendererCommand.ApplicationInfo application_info = 5;
  if (has_application_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->application_info_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mozc.commands.RendererCommand)
}

::google::protobuf::uint8* RendererCommand::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mozc.commands.RendererCommand)
  // optional .mozc.commands.RendererCommand.CommandType type = 1 [default = NOOP];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional bool visible = 2 [default = false];
  if (has_visible()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->visible(), target);
  }

  // optional .mozc.commands.Output output = 3;
  if (has_output()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->output_, false, target);
  }

  // optional .mozc.commands.RendererCommand.Rectangle preedit_rectangle = 4;
  if (has_preedit_rectangle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->preedit_rectangle_, false, target);
  }

  // optional .mozc.commands.RendererCommand.ApplicationInfo application_info = 5;
  if (has_application_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->application_info_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mozc.commands.RendererCommand)
  return target;
}

int RendererCommand::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:mozc.commands.RendererCommand)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 31u) {
    // optional .mozc.commands.RendererCommand.CommandType type = 1 [default = NOOP];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional bool visible = 2 [default = false];
    if (has_visible()) {
      total_size += 1 + 1;
    }

    // optional .mozc.commands.Output output = 3;
    if (has_output()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->output_);
    }

    // optional .mozc.commands.RendererCommand.Rectangle preedit_rectangle = 4;
    if (has_preedit_rectangle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->preedit_rectangle_);
    }

    // optional .mozc.commands.RendererCommand.ApplicationInfo application_info = 5;
    if (has_application_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->application_info_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RendererCommand::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mozc.commands.RendererCommand)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RendererCommand* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RendererCommand>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mozc.commands.RendererCommand)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mozc.commands.RendererCommand)
    MergeFrom(*source);
  }
}

void RendererCommand::MergeFrom(const RendererCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mozc.commands.RendererCommand)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_visible()) {
      set_visible(from.visible());
    }
    if (from.has_output()) {
      mutable_output()->::mozc::commands::Output::MergeFrom(from.output());
    }
    if (from.has_preedit_rectangle()) {
      mutable_preedit_rectangle()->::mozc::commands::RendererCommand_Rectangle::MergeFrom(from.preedit_rectangle());
    }
    if (from.has_application_info()) {
      mutable_application_info()->::mozc::commands::RendererCommand_ApplicationInfo::MergeFrom(from.application_info());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void RendererCommand::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mozc.commands.RendererCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RendererCommand::CopyFrom(const RendererCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mozc.commands.RendererCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RendererCommand::IsInitialized() const {

  if (has_output()) {
    if (!this->output_->IsInitialized()) return false;
  }
  return true;
}

void RendererCommand::Swap(RendererCommand* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RendererCommand::InternalSwap(RendererCommand* other) {
  std::swap(type_, other->type_);
  std::swap(visible_, other->visible_);
  std::swap(output_, other->output_);
  std::swap(preedit_rectangle_, other->preedit_rectangle_);
  std::swap(application_info_, other->application_info_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RendererCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RendererCommand_descriptor_;
  metadata.reflection = RendererCommand_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RendererCommand_Rectangle

// optional int32 left = 1;
bool RendererCommand_Rectangle::has_left() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RendererCommand_Rectangle::set_has_left() {
  _has_bits_[0] |= 0x00000001u;
}
void RendererCommand_Rectangle::clear_has_left() {
  _has_bits_[0] &= ~0x00000001u;
}
void RendererCommand_Rectangle::clear_left() {
  left_ = 0;
  clear_has_left();
}
 ::google::protobuf::int32 RendererCommand_Rectangle::left() const {
  // @@protoc_insertion_point(field_get:mozc.commands.RendererCommand.Rectangle.left)
  return left_;
}
 void RendererCommand_Rectangle::set_left(::google::protobuf::int32 value) {
  set_has_left();
  left_ = value;
  // @@protoc_insertion_point(field_set:mozc.commands.RendererCommand.Rectangle.left)
}

// optional int32 top = 2;
bool RendererCommand_Rectangle::has_top() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RendererCommand_Rectangle::set_has_top() {
  _has_bits_[0] |= 0x00000002u;
}
void RendererCommand_Rectangle::clear_has_top() {
  _has_bits_[0] &= ~0x00000002u;
}
void RendererCommand_Rectangle::clear_top() {
  top_ = 0;
  clear_has_top();
}
 ::google::protobuf::int32 RendererCommand_Rectangle::top() const {
  // @@protoc_insertion_point(field_get:mozc.commands.RendererCommand.Rectangle.top)
  return top_;
}
 void RendererCommand_Rectangle::set_top(::google::protobuf::int32 value) {
  set_has_top();
  top_ = value;
  // @@protoc_insertion_point(field_set:mozc.commands.RendererCommand.Rectangle.top)
}

// optional int32 right = 3;
bool RendererCommand_Rectangle::has_right() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void RendererCommand_Rectangle::set_has_right() {
  _has_bits_[0] |= 0x00000004u;
}
void RendererCommand_Rectangle::clear_has_right() {
  _has_bits_[0] &= ~0x00000004u;
}
void RendererCommand_Rectangle::clear_right() {
  right_ = 0;
  clear_has_right();
}
 ::google::protobuf::int32 RendererCommand_Rectangle::right() const {
  // @@protoc_insertion_point(field_get:mozc.commands.RendererCommand.Rectangle.right)
  return right_;
}
 void RendererCommand_Rectangle::set_right(::google::protobuf::int32 value) {
  set_has_right();
  right_ = value;
  // @@protoc_insertion_point(field_set:mozc.commands.RendererCommand.Rectangle.right)
}

// optional int32 bottom = 4;
bool RendererCommand_Rectangle::has_bottom() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void RendererCommand_Rectangle::set_has_bottom() {
  _has_bits_[0] |= 0x00000008u;
}
void RendererCommand_Rectangle::clear_has_bottom() {
  _has_bits_[0] &= ~0x00000008u;
}
void RendererCommand_Rectangle::clear_bottom() {
  bottom_ = 0;
  clear_has_bottom();
}
 ::google::protobuf::int32 RendererCommand_Rectangle::bottom() const {
  // @@protoc_insertion_point(field_get:mozc.commands.RendererCommand.Rectangle.bottom)
  return bottom_;
}
 void RendererCommand_Rectangle::set_bottom(::google::protobuf::int32 value) {
  set_has_bottom();
  bottom_ = value;
  // @@protoc_insertion_point(field_set:mozc.commands.RendererCommand.Rectangle.bottom)
}

// -------------------------------------------------------------------

// RendererCommand_Point

// optional int32 x = 1;
bool RendererCommand_Point::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RendererCommand_Point::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
void RendererCommand_Point::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
void RendererCommand_Point::clear_x() {
  x_ = 0;
  clear_has_x();
}
 ::google::protobuf::int32 RendererCommand_Point::x() const {
  // @@protoc_insertion_point(field_get:mozc.commands.RendererCommand.Point.x)
  return x_;
}
 void RendererCommand_Point::set_x(::google::protobuf::int32 value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:mozc.commands.RendererCommand.Point.x)
}

// optional int32 y = 2;
bool RendererCommand_Point::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RendererCommand_Point::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
void RendererCommand_Point::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
void RendererCommand_Point::clear_y() {
  y_ = 0;
  clear_has_y();
}
 ::google::protobuf::int32 RendererCommand_Point::y() const {
  // @@protoc_insertion_point(field_get:mozc.commands.RendererCommand.Point.y)
  return y_;
}
 void RendererCommand_Point::set_y(::google::protobuf::int32 value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:mozc.commands.RendererCommand.Point.y)
}

// -------------------------------------------------------------------

// RendererCommand_WinLogFont

// optional int32 height = 1 [default = 0];
bool RendererCommand_WinLogFont::has_height() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RendererCommand_WinLogFont::set_has_height() {
  _has_bits_[0] |= 0x00000001u;
}
void RendererCommand_WinLogFont::clear_has_height() {
  _has_bits_[0] &= ~0x00000001u;
}
void RendererCommand_WinLogFont::clear_height() {
  height_ = 0;
  clear_has_height();
}
 ::google::protobuf::int32 RendererCommand_WinLogFont::height() const {
  // @@protoc_insertion_point(field_get:mozc.commands.RendererCommand.WinLogFont.height)
  return height_;
}
 void RendererCommand_WinLogFont::set_height(::google::protobuf::int32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:mozc.commands.RendererCommand.WinLogFont.height)
}

// optional int32 width = 2 [default = 0];
bool RendererCommand_WinLogFont::has_width() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RendererCommand_WinLogFont::set_has_width() {
  _has_bits_[0] |= 0x00000002u;
}
void RendererCommand_WinLogFont::clear_has_width() {
  _has_bits_[0] &= ~0x00000002u;
}
void RendererCommand_WinLogFont::clear_width() {
  width_ = 0;
  clear_has_width();
}
 ::google::protobuf::int32 RendererCommand_WinLogFont::width() const {
  // @@protoc_insertion_point(field_get:mozc.commands.RendererCommand.WinLogFont.width)
  return width_;
}
 void RendererCommand_WinLogFont::set_width(::google::protobuf::int32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:mozc.commands.RendererCommand.WinLogFont.width)
}

// optional int32 escapement = 3 [default = 0];
bool RendererCommand_WinLogFont::has_escapement() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void RendererCommand_WinLogFont::set_has_escapement() {
  _has_bits_[0] |= 0x00000004u;
}
void RendererCommand_WinLogFont::clear_has_escapement() {
  _has_bits_[0] &= ~0x00000004u;
}
void RendererCommand_WinLogFont::clear_escapement() {
  escapement_ = 0;
  clear_has_escapement();
}
 ::google::protobuf::int32 RendererCommand_WinLogFont::escapement() const {
  // @@protoc_insertion_point(field_get:mozc.commands.RendererCommand.WinLogFont.escapement)
  return escapement_;
}
 void RendererCommand_WinLogFont::set_escapement(::google::protobuf::int32 value) {
  set_has_escapement();
  escapement_ = value;
  // @@protoc_insertion_point(field_set:mozc.commands.RendererCommand.WinLogFont.escapement)
}

// optional int32 orientation = 4 [default = 0];
bool RendererCommand_WinLogFont::has_orientation() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void RendererCommand_WinLogFont::set_has_orientation() {
  _has_bits_[0] |= 0x00000008u;
}
void RendererCommand_WinLogFont::clear_has_orientation() {
  _has_bits_[0] &= ~0x00000008u;
}
void RendererCommand_WinLogFont::clear_orientation() {
  orientation_ = 0;
  clear_has_orientation();
}
 ::google::protobuf::int32 RendererCommand_WinLogFont::orientation() const {
  // @@protoc_insertion_point(field_get:mozc.commands.RendererCommand.WinLogFont.orientation)
  return orientation_;
}
 void RendererCommand_WinLogFont::set_orientation(::google::protobuf::int32 value) {
  set_has_orientation();
  orientation_ = value;
  // @@protoc_insertion_point(field_set:mozc.commands.RendererCommand.WinLogFont.orientation)
}

// optional int32 weight = 5 [default = 0];
bool RendererCommand_WinLogFont::has_weight() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void RendererCommand_WinLogFont::set_has_weight() {
  _has_bits_[0] |= 0x00000010u;
}
void RendererCommand_WinLogFont::clear_has_weight() {
  _has_bits_[0] &= ~0x00000010u;
}
void RendererCommand_WinLogFont::clear_weight() {
  weight_ = 0;
  clear_has_weight();
}
 ::google::protobuf::int32 RendererCommand_WinLogFont::weight() const {
  // @@protoc_insertion_point(field_get:mozc.commands.RendererCommand.WinLogFont.weight)
  return weight_;
}
 void RendererCommand_WinLogFont::set_weight(::google::protobuf::int32 value) {
  set_has_weight();
  weight_ = value;
  // @@protoc_insertion_point(field_set:mozc.commands.RendererCommand.WinLogFont.weight)
}

// optional bool italic = 6 [default = false];
bool RendererCommand_WinLogFont::has_italic() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void RendererCommand_WinLogFont::set_has_italic() {
  _has_bits_[0] |= 0x00000020u;
}
void RendererCommand_WinLogFont::clear_has_italic() {
  _has_bits_[0] &= ~0x00000020u;
}
void RendererCommand_WinLogFont::clear_italic() {
  italic_ = false;
  clear_has_italic();
}
 bool RendererCommand_WinLogFont::italic() const {
  // @@protoc_insertion_point(field_get:mozc.commands.RendererCommand.WinLogFont.italic)
  return italic_;
}
 void RendererCommand_WinLogFont::set_italic(bool value) {
  set_has_italic();
  italic_ = value;
  // @@protoc_insertion_point(field_set:mozc.commands.RendererCommand.WinLogFont.italic)
}

// optional bool underline = 7 [default = false];
bool RendererCommand_WinLogFont::has_underline() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void RendererCommand_WinLogFont::set_has_underline() {
  _has_bits_[0] |= 0x00000040u;
}
void RendererCommand_WinLogFont::clear_has_underline() {
  _has_bits_[0] &= ~0x00000040u;
}
void RendererCommand_WinLogFont::clear_underline() {
  underline_ = false;
  clear_has_underline();
}
 bool RendererCommand_WinLogFont::underline() const {
  // @@protoc_insertion_point(field_get:mozc.commands.RendererCommand.WinLogFont.underline)
  return underline_;
}
 void RendererCommand_WinLogFont::set_underline(bool value) {
  set_has_underline();
  underline_ = value;
  // @@protoc_insertion_point(field_set:mozc.commands.RendererCommand.WinLogFont.underline)
}

// optional bool strike_out = 8 [default = false];
bool RendererCommand_WinLogFont::has_strike_out() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void RendererCommand_WinLogFont::set_has_strike_out() {
  _has_bits_[0] |= 0x00000080u;
}
void RendererCommand_WinLogFont::clear_has_strike_out() {
  _has_bits_[0] &= ~0x00000080u;
}
void RendererCommand_WinLogFont::clear_strike_out() {
  strike_out_ = false;
  clear_has_strike_out();
}
 bool RendererCommand_WinLogFont::strike_out() const {
  // @@protoc_insertion_point(field_get:mozc.commands.RendererCommand.WinLogFont.strike_out)
  return strike_out_;
}
 void RendererCommand_WinLogFont::set_strike_out(bool value) {
  set_has_strike_out();
  strike_out_ = value;
  // @@protoc_insertion_point(field_set:mozc.commands.RendererCommand.WinLogFont.strike_out)
}

// optional int32 char_set = 9 [default = 1];
bool RendererCommand_WinLogFont::has_char_set() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void RendererCommand_WinLogFont::set_has_char_set() {
  _has_bits_[0] |= 0x00000100u;
}
void RendererCommand_WinLogFont::clear_has_char_set() {
  _has_bits_[0] &= ~0x00000100u;
}
void RendererCommand_WinLogFont::clear_char_set() {
  char_set_ = 1;
  clear_has_char_set();
}
 ::google::protobuf::int32 RendererCommand_WinLogFont::char_set() const {
  // @@protoc_insertion_point(field_get:mozc.commands.RendererCommand.WinLogFont.char_set)
  return char_set_;
}
 void RendererCommand_WinLogFont::set_char_set(::google::protobuf::int32 value) {
  set_has_char_set();
  char_set_ = value;
  // @@protoc_insertion_point(field_set:mozc.commands.RendererCommand.WinLogFont.char_set)
}

// optional int32 out_precision = 10 [default = 0];
bool RendererCommand_WinLogFont::has_out_precision() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void RendererCommand_WinLogFont::set_has_out_precision() {
  _has_bits_[0] |= 0x00000200u;
}
void RendererCommand_WinLogFont::clear_has_out_precision() {
  _has_bits_[0] &= ~0x00000200u;
}
void RendererCommand_WinLogFont::clear_out_precision() {
  out_precision_ = 0;
  clear_has_out_precision();
}
 ::google::protobuf::int32 RendererCommand_WinLogFont::out_precision() const {
  // @@protoc_insertion_point(field_get:mozc.commands.RendererCommand.WinLogFont.out_precision)
  return out_precision_;
}
 void RendererCommand_WinLogFont::set_out_precision(::google::protobuf::int32 value) {
  set_has_out_precision();
  out_precision_ = value;
  // @@protoc_insertion_point(field_set:mozc.commands.RendererCommand.WinLogFont.out_precision)
}

// optional int32 clip_precision = 11 [default = 0];
bool RendererCommand_WinLogFont::has_clip_precision() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void RendererCommand_WinLogFont::set_has_clip_precision() {
  _has_bits_[0] |= 0x00000400u;
}
void RendererCommand_WinLogFont::clear_has_clip_precision() {
  _has_bits_[0] &= ~0x00000400u;
}
void RendererCommand_WinLogFont::clear_clip_precision() {
  clip_precision_ = 0;
  clear_has_clip_precision();
}
 ::google::protobuf::int32 RendererCommand_WinLogFont::clip_precision() const {
  // @@protoc_insertion_point(field_get:mozc.commands.RendererCommand.WinLogFont.clip_precision)
  return clip_precision_;
}
 void RendererCommand_WinLogFont::set_clip_precision(::google::protobuf::int32 value) {
  set_has_clip_precision();
  clip_precision_ = value;
  // @@protoc_insertion_point(field_set:mozc.commands.RendererCommand.WinLogFont.clip_precision)
}

// optional int32 quality = 12 [default = 0];
bool RendererCommand_WinLogFont::has_quality() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void RendererCommand_WinLogFont::set_has_quality() {
  _has_bits_[0] |= 0x00000800u;
}
void RendererCommand_WinLogFont::clear_has_quality() {
  _has_bits_[0] &= ~0x00000800u;
}
void RendererCommand_WinLogFont::clear_quality() {
  quality_ = 0;
  clear_has_quality();
}
 ::google::protobuf::int32 RendererCommand_WinLogFont::quality() const {
  // @@protoc_insertion_point(field_get:mozc.commands.RendererCommand.WinLogFont.quality)
  return quality_;
}
 void RendererCommand_WinLogFont::set_quality(::google::protobuf::int32 value) {
  set_has_quality();
  quality_ = value;
  // @@protoc_insertion_point(field_set:mozc.commands.RendererCommand.WinLogFont.quality)
}

// optional int32 pitch_and_family = 13 [default = 0];
bool RendererCommand_WinLogFont::has_pitch_and_family() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void RendererCommand_WinLogFont::set_has_pitch_and_family() {
  _has_bits_[0] |= 0x00001000u;
}
void RendererCommand_WinLogFont::clear_has_pitch_and_family() {
  _has_bits_[0] &= ~0x00001000u;
}
void RendererCommand_WinLogFont::clear_pitch_and_family() {
  pitch_and_family_ = 0;
  clear_has_pitch_and_family();
}
 ::google::protobuf::int32 RendererCommand_WinLogFont::pitch_and_family() const {
  // @@protoc_insertion_point(field_get:mozc.commands.RendererCommand.WinLogFont.pitch_and_family)
  return pitch_and_family_;
}
 void RendererCommand_WinLogFont::set_pitch_and_family(::google::protobuf::int32 value) {
  set_has_pitch_and_family();
  pitch_and_family_ = value;
  // @@protoc_insertion_point(field_set:mozc.commands.RendererCommand.WinLogFont.pitch_and_family)
}

// optional string face_name = 14;
bool RendererCommand_WinLogFont::has_face_name() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void RendererCommand_WinLogFont::set_has_face_name() {
  _has_bits_[0] |= 0x00002000u;
}
void RendererCommand_WinLogFont::clear_has_face_name() {
  _has_bits_[0] &= ~0x00002000u;
}
void RendererCommand_WinLogFont::clear_face_name() {
  face_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_face_name();
}
 const ::std::string& RendererCommand_WinLogFont::face_name() const {
  // @@protoc_insertion_point(field_get:mozc.commands.RendererCommand.WinLogFont.face_name)
  return face_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RendererCommand_WinLogFont::set_face_name(const ::std::string& value) {
  set_has_face_name();
  face_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mozc.commands.RendererCommand.WinLogFont.face_name)
}
 void RendererCommand_WinLogFont::set_face_name(const char* value) {
  set_has_face_name();
  face_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mozc.commands.RendererCommand.WinLogFont.face_name)
}
 void RendererCommand_WinLogFont::set_face_name(const char* value, size_t size) {
  set_has_face_name();
  face_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mozc.commands.RendererCommand.WinLogFont.face_name)
}
 ::std::string* RendererCommand_WinLogFont::mutable_face_name() {
  set_has_face_name();
  // @@protoc_insertion_point(field_mutable:mozc.commands.RendererCommand.WinLogFont.face_name)
  return face_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RendererCommand_WinLogFont::release_face_name() {
  // @@protoc_insertion_point(field_release:mozc.commands.RendererCommand.WinLogFont.face_name)
  clear_has_face_name();
  return face_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RendererCommand_WinLogFont::set_allocated_face_name(::std::string* face_name) {
  if (face_name != NULL) {
    set_has_face_name();
  } else {
    clear_has_face_name();
  }
  face_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), face_name);
  // @@protoc_insertion_point(field_set_allocated:mozc.commands.RendererCommand.WinLogFont.face_name)
}

// -------------------------------------------------------------------

// RendererCommand_CompositionForm

// optional .mozc.commands.RendererCommand.Point current_position = 2;
bool RendererCommand_CompositionForm::has_current_position() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RendererCommand_CompositionForm::set_has_current_position() {
  _has_bits_[0] |= 0x00000001u;
}
void RendererCommand_CompositionForm::clear_has_current_position() {
  _has_bits_[0] &= ~0x00000001u;
}
void RendererCommand_CompositionForm::clear_current_position() {
  if (current_position_ != NULL) current_position_->::mozc::commands::RendererCommand_Point::Clear();
  clear_has_current_position();
}
const ::mozc::commands::RendererCommand_Point& RendererCommand_CompositionForm::current_position() const {
  // @@protoc_insertion_point(field_get:mozc.commands.RendererCommand.CompositionForm.current_position)
  return current_position_ != NULL ? *current_position_ : *default_instance_->current_position_;
}
::mozc::commands::RendererCommand_Point* RendererCommand_CompositionForm::mutable_current_position() {
  set_has_current_position();
  if (current_position_ == NULL) {
    current_position_ = new ::mozc::commands::RendererCommand_Point;
  }
  // @@protoc_insertion_point(field_mutable:mozc.commands.RendererCommand.CompositionForm.current_position)
  return current_position_;
}
::mozc::commands::RendererCommand_Point* RendererCommand_CompositionForm::release_current_position() {
  // @@protoc_insertion_point(field_release:mozc.commands.RendererCommand.CompositionForm.current_position)
  clear_has_current_position();
  ::mozc::commands::RendererCommand_Point* temp = current_position_;
  current_position_ = NULL;
  return temp;
}
void RendererCommand_CompositionForm::set_allocated_current_position(::mozc::commands::RendererCommand_Point* current_position) {
  delete current_position_;
  current_position_ = current_position;
  if (current_position) {
    set_has_current_position();
  } else {
    clear_has_current_position();
  }
  // @@protoc_insertion_point(field_set_allocated:mozc.commands.RendererCommand.CompositionForm.current_position)
}

// optional .mozc.commands.RendererCommand.Rectangle area = 3;
bool RendererCommand_CompositionForm::has_area() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RendererCommand_CompositionForm::set_has_area() {
  _has_bits_[0] |= 0x00000002u;
}
void RendererCommand_CompositionForm::clear_has_area() {
  _has_bits_[0] &= ~0x00000002u;
}
void RendererCommand_CompositionForm::clear_area() {
  if (area_ != NULL) area_->::mozc::commands::RendererCommand_Rectangle::Clear();
  clear_has_area();
}
const ::mozc::commands::RendererCommand_Rectangle& RendererCommand_CompositionForm::area() const {
  // @@protoc_insertion_point(field_get:mozc.commands.RendererCommand.CompositionForm.area)
  return area_ != NULL ? *area_ : *default_instance_->area_;
}
::mozc::commands::RendererCommand_Rectangle* RendererCommand_CompositionForm::mutable_area() {
  set_has_area();
  if (area_ == NULL) {
    area_ = new ::mozc::commands::RendererCommand_Rectangle;
  }
  // @@protoc_insertion_point(field_mutable:mozc.commands.RendererCommand.CompositionForm.area)
  return area_;
}
::mozc::commands::RendererCommand_Rectangle* RendererCommand_CompositionForm::release_area() {
  // @@protoc_insertion_point(field_release:mozc.commands.RendererCommand.CompositionForm.area)
  clear_has_area();
  ::mozc::commands::RendererCommand_Rectangle* temp = area_;
  area_ = NULL;
  return temp;
}
void RendererCommand_CompositionForm::set_allocated_area(::mozc::commands::RendererCommand_Rectangle* area) {
  delete area_;
  area_ = area;
  if (area) {
    set_has_area();
  } else {
    clear_has_area();
  }
  // @@protoc_insertion_point(field_set_allocated:mozc.commands.RendererCommand.CompositionForm.area)
}

// optional uint32 style_bits = 4 [default = 0];
bool RendererCommand_CompositionForm::has_style_bits() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void RendererCommand_CompositionForm::set_has_style_bits() {
  _has_bits_[0] |= 0x00000004u;
}
void RendererCommand_CompositionForm::clear_has_style_bits() {
  _has_bits_[0] &= ~0x00000004u;
}
void RendererCommand_CompositionForm::clear_style_bits() {
  style_bits_ = 0u;
  clear_has_style_bits();
}
 ::google::protobuf::uint32 RendererCommand_CompositionForm::style_bits() const {
  // @@protoc_insertion_point(field_get:mozc.commands.RendererCommand.CompositionForm.style_bits)
  return style_bits_;
}
 void RendererCommand_CompositionForm::set_style_bits(::google::protobuf::uint32 value) {
  set_has_style_bits();
  style_bits_ = value;
  // @@protoc_insertion_point(field_set:mozc.commands.RendererCommand.CompositionForm.style_bits)
}

// -------------------------------------------------------------------

// RendererCommand_CandidateForm

// optional .mozc.commands.RendererCommand.Point current_position = 2;
bool RendererCommand_CandidateForm::has_current_position() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RendererCommand_CandidateForm::set_has_current_position() {
  _has_bits_[0] |= 0x00000001u;
}
void RendererCommand_CandidateForm::clear_has_current_position() {
  _has_bits_[0] &= ~0x00000001u;
}
void RendererCommand_CandidateForm::clear_current_position() {
  if (current_position_ != NULL) current_position_->::mozc::commands::RendererCommand_Point::Clear();
  clear_has_current_position();
}
const ::mozc::commands::RendererCommand_Point& RendererCommand_CandidateForm::current_position() const {
  // @@protoc_insertion_point(field_get:mozc.commands.RendererCommand.CandidateForm.current_position)
  return current_position_ != NULL ? *current_position_ : *default_instance_->current_position_;
}
::mozc::commands::RendererCommand_Point* RendererCommand_CandidateForm::mutable_current_position() {
  set_has_current_position();
  if (current_position_ == NULL) {
    current_position_ = new ::mozc::commands::RendererCommand_Point;
  }
  // @@protoc_insertion_point(field_mutable:mozc.commands.RendererCommand.CandidateForm.current_position)
  return current_position_;
}
::mozc::commands::RendererCommand_Point* RendererCommand_CandidateForm::release_current_position() {
  // @@protoc_insertion_point(field_release:mozc.commands.RendererCommand.CandidateForm.current_position)
  clear_has_current_position();
  ::mozc::commands::RendererCommand_Point* temp = current_position_;
  current_position_ = NULL;
  return temp;
}
void RendererCommand_CandidateForm::set_allocated_current_position(::mozc::commands::RendererCommand_Point* current_position) {
  delete current_position_;
  current_position_ = current_position;
  if (current_position) {
    set_has_current_position();
  } else {
    clear_has_current_position();
  }
  // @@protoc_insertion_point(field_set_allocated:mozc.commands.RendererCommand.CandidateForm.current_position)
}

// optional .mozc.commands.RendererCommand.Rectangle area = 3;
bool RendererCommand_CandidateForm::has_area() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RendererCommand_CandidateForm::set_has_area() {
  _has_bits_[0] |= 0x00000002u;
}
void RendererCommand_CandidateForm::clear_has_area() {
  _has_bits_[0] &= ~0x00000002u;
}
void RendererCommand_CandidateForm::clear_area() {
  if (area_ != NULL) area_->::mozc::commands::RendererCommand_Rectangle::Clear();
  clear_has_area();
}
const ::mozc::commands::RendererCommand_Rectangle& RendererCommand_CandidateForm::area() const {
  // @@protoc_insertion_point(field_get:mozc.commands.RendererCommand.CandidateForm.area)
  return area_ != NULL ? *area_ : *default_instance_->area_;
}
::mozc::commands::RendererCommand_Rectangle* RendererCommand_CandidateForm::mutable_area() {
  set_has_area();
  if (area_ == NULL) {
    area_ = new ::mozc::commands::RendererCommand_Rectangle;
  }
  // @@protoc_insertion_point(field_mutable:mozc.commands.RendererCommand.CandidateForm.area)
  return area_;
}
::mozc::commands::RendererCommand_Rectangle* RendererCommand_CandidateForm::release_area() {
  // @@protoc_insertion_point(field_release:mozc.commands.RendererCommand.CandidateForm.area)
  clear_has_area();
  ::mozc::commands::RendererCommand_Rectangle* temp = area_;
  area_ = NULL;
  return temp;
}
void RendererCommand_CandidateForm::set_allocated_area(::mozc::commands::RendererCommand_Rectangle* area) {
  delete area_;
  area_ = area;
  if (area) {
    set_has_area();
  } else {
    clear_has_area();
  }
  // @@protoc_insertion_point(field_set_allocated:mozc.commands.RendererCommand.CandidateForm.area)
}

// optional uint32 style_bits = 4 [default = 0];
bool RendererCommand_CandidateForm::has_style_bits() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void RendererCommand_CandidateForm::set_has_style_bits() {
  _has_bits_[0] |= 0x00000004u;
}
void RendererCommand_CandidateForm::clear_has_style_bits() {
  _has_bits_[0] &= ~0x00000004u;
}
void RendererCommand_CandidateForm::clear_style_bits() {
  style_bits_ = 0u;
  clear_has_style_bits();
}
 ::google::protobuf::uint32 RendererCommand_CandidateForm::style_bits() const {
  // @@protoc_insertion_point(field_get:mozc.commands.RendererCommand.CandidateForm.style_bits)
  return style_bits_;
}
 void RendererCommand_CandidateForm::set_style_bits(::google::protobuf::uint32 value) {
  set_has_style_bits();
  style_bits_ = value;
  // @@protoc_insertion_point(field_set:mozc.commands.RendererCommand.CandidateForm.style_bits)
}

// -------------------------------------------------------------------

// RendererCommand_CharacterPosition

// optional uint32 position = 1;
bool RendererCommand_CharacterPosition::has_position() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RendererCommand_CharacterPosition::set_has_position() {
  _has_bits_[0] |= 0x00000001u;
}
void RendererCommand_CharacterPosition::clear_has_position() {
  _has_bits_[0] &= ~0x00000001u;
}
void RendererCommand_CharacterPosition::clear_position() {
  position_ = 0u;
  clear_has_position();
}
 ::google::protobuf::uint32 RendererCommand_CharacterPosition::position() const {
  // @@protoc_insertion_point(field_get:mozc.commands.RendererCommand.CharacterPosition.position)
  return position_;
}
 void RendererCommand_CharacterPosition::set_position(::google::protobuf::uint32 value) {
  set_has_position();
  position_ = value;
  // @@protoc_insertion_point(field_set:mozc.commands.RendererCommand.CharacterPosition.position)
}

// optional .mozc.commands.RendererCommand.Point top_left = 2;
bool RendererCommand_CharacterPosition::has_top_left() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RendererCommand_CharacterPosition::set_has_top_left() {
  _has_bits_[0] |= 0x00000002u;
}
void RendererCommand_CharacterPosition::clear_has_top_left() {
  _has_bits_[0] &= ~0x00000002u;
}
void RendererCommand_CharacterPosition::clear_top_left() {
  if (top_left_ != NULL) top_left_->::mozc::commands::RendererCommand_Point::Clear();
  clear_has_top_left();
}
const ::mozc::commands::RendererCommand_Point& RendererCommand_CharacterPosition::top_left() const {
  // @@protoc_insertion_point(field_get:mozc.commands.RendererCommand.CharacterPosition.top_left)
  return top_left_ != NULL ? *top_left_ : *default_instance_->top_left_;
}
::mozc::commands::RendererCommand_Point* RendererCommand_CharacterPosition::mutable_top_left() {
  set_has_top_left();
  if (top_left_ == NULL) {
    top_left_ = new ::mozc::commands::RendererCommand_Point;
  }
  // @@protoc_insertion_point(field_mutable:mozc.commands.RendererCommand.CharacterPosition.top_left)
  return top_left_;
}
::mozc::commands::RendererCommand_Point* RendererCommand_CharacterPosition::release_top_left() {
  // @@protoc_insertion_point(field_release:mozc.commands.RendererCommand.CharacterPosition.top_left)
  clear_has_top_left();
  ::mozc::commands::RendererCommand_Point* temp = top_left_;
  top_left_ = NULL;
  return temp;
}
void RendererCommand_CharacterPosition::set_allocated_top_left(::mozc::commands::RendererCommand_Point* top_left) {
  delete top_left_;
  top_left_ = top_left;
  if (top_left) {
    set_has_top_left();
  } else {
    clear_has_top_left();
  }
  // @@protoc_insertion_point(field_set_allocated:mozc.commands.RendererCommand.CharacterPosition.top_left)
}

// optional uint32 line_height = 3;
bool RendererCommand_CharacterPosition::has_line_height() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void RendererCommand_CharacterPosition::set_has_line_height() {
  _has_bits_[0] |= 0x00000004u;
}
void RendererCommand_CharacterPosition::clear_has_line_height() {
  _has_bits_[0] &= ~0x00000004u;
}
void RendererCommand_CharacterPosition::clear_line_height() {
  line_height_ = 0u;
  clear_has_line_height();
}
 ::google::protobuf::uint32 RendererCommand_CharacterPosition::line_height() const {
  // @@protoc_insertion_point(field_get:mozc.commands.RendererCommand.CharacterPosition.line_height)
  return line_height_;
}
 void RendererCommand_CharacterPosition::set_line_height(::google::protobuf::uint32 value) {
  set_has_line_height();
  line_height_ = value;
  // @@protoc_insertion_point(field_set:mozc.commands.RendererCommand.CharacterPosition.line_height)
}

// optional .mozc.commands.RendererCommand.Rectangle document_area = 4;
bool RendererCommand_CharacterPosition::has_document_area() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void RendererCommand_CharacterPosition::set_has_document_area() {
  _has_bits_[0] |= 0x00000008u;
}
void RendererCommand_CharacterPosition::clear_has_document_area() {
  _has_bits_[0] &= ~0x00000008u;
}
void RendererCommand_CharacterPosition::clear_document_area() {
  if (document_area_ != NULL) document_area_->::mozc::commands::RendererCommand_Rectangle::Clear();
  clear_has_document_area();
}
const ::mozc::commands::RendererCommand_Rectangle& RendererCommand_CharacterPosition::document_area() const {
  // @@protoc_insertion_point(field_get:mozc.commands.RendererCommand.CharacterPosition.document_area)
  return document_area_ != NULL ? *document_area_ : *default_instance_->document_area_;
}
::mozc::commands::RendererCommand_Rectangle* RendererCommand_CharacterPosition::mutable_document_area() {
  set_has_document_area();
  if (document_area_ == NULL) {
    document_area_ = new ::mozc::commands::RendererCommand_Rectangle;
  }
  // @@protoc_insertion_point(field_mutable:mozc.commands.RendererCommand.CharacterPosition.document_area)
  return document_area_;
}
::mozc::commands::RendererCommand_Rectangle* RendererCommand_CharacterPosition::release_document_area() {
  // @@protoc_insertion_point(field_release:mozc.commands.RendererCommand.CharacterPosition.document_area)
  clear_has_document_area();
  ::mozc::commands::RendererCommand_Rectangle* temp = document_area_;
  document_area_ = NULL;
  return temp;
}
void RendererCommand_CharacterPosition::set_allocated_document_area(::mozc::commands::RendererCommand_Rectangle* document_area) {
  delete document_area_;
  document_area_ = document_area;
  if (document_area) {
    set_has_document_area();
  } else {
    clear_has_document_area();
  }
  // @@protoc_insertion_point(field_set_allocated:mozc.commands.RendererCommand.CharacterPosition.document_area)
}

// -------------------------------------------------------------------

// RendererCommand_CaretInfo

// optional bool blinking = 1 [default = false];
bool RendererCommand_CaretInfo::has_blinking() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RendererCommand_CaretInfo::set_has_blinking() {
  _has_bits_[0] |= 0x00000001u;
}
void RendererCommand_CaretInfo::clear_has_blinking() {
  _has_bits_[0] &= ~0x00000001u;
}
void RendererCommand_CaretInfo::clear_blinking() {
  blinking_ = false;
  clear_has_blinking();
}
 bool RendererCommand_CaretInfo::blinking() const {
  // @@protoc_insertion_point(field_get:mozc.commands.RendererCommand.CaretInfo.blinking)
  return blinking_;
}
 void RendererCommand_CaretInfo::set_blinking(bool value) {
  set_has_blinking();
  blinking_ = value;
  // @@protoc_insertion_point(field_set:mozc.commands.RendererCommand.CaretInfo.blinking)
}

// optional .mozc.commands.RendererCommand.Rectangle caret_rect = 2;
bool RendererCommand_CaretInfo::has_caret_rect() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RendererCommand_CaretInfo::set_has_caret_rect() {
  _has_bits_[0] |= 0x00000002u;
}
void RendererCommand_CaretInfo::clear_has_caret_rect() {
  _has_bits_[0] &= ~0x00000002u;
}
void RendererCommand_CaretInfo::clear_caret_rect() {
  if (caret_rect_ != NULL) caret_rect_->::mozc::commands::RendererCommand_Rectangle::Clear();
  clear_has_caret_rect();
}
const ::mozc::commands::RendererCommand_Rectangle& RendererCommand_CaretInfo::caret_rect() const {
  // @@protoc_insertion_point(field_get:mozc.commands.RendererCommand.CaretInfo.caret_rect)
  return caret_rect_ != NULL ? *caret_rect_ : *default_instance_->caret_rect_;
}
::mozc::commands::RendererCommand_Rectangle* RendererCommand_CaretInfo::mutable_caret_rect() {
  set_has_caret_rect();
  if (caret_rect_ == NULL) {
    caret_rect_ = new ::mozc::commands::RendererCommand_Rectangle;
  }
  // @@protoc_insertion_point(field_mutable:mozc.commands.RendererCommand.CaretInfo.caret_rect)
  return caret_rect_;
}
::mozc::commands::RendererCommand_Rectangle* RendererCommand_CaretInfo::release_caret_rect() {
  // @@protoc_insertion_point(field_release:mozc.commands.RendererCommand.CaretInfo.caret_rect)
  clear_has_caret_rect();
  ::mozc::commands::RendererCommand_Rectangle* temp = caret_rect_;
  caret_rect_ = NULL;
  return temp;
}
void RendererCommand_CaretInfo::set_allocated_caret_rect(::mozc::commands::RendererCommand_Rectangle* caret_rect) {
  delete caret_rect_;
  caret_rect_ = caret_rect;
  if (caret_rect) {
    set_has_caret_rect();
  } else {
    clear_has_caret_rect();
  }
  // @@protoc_insertion_point(field_set_allocated:mozc.commands.RendererCommand.CaretInfo.caret_rect)
}

// optional uint32 target_window_handle = 3;
bool RendererCommand_CaretInfo::has_target_window_handle() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void RendererCommand_CaretInfo::set_has_target_window_handle() {
  _has_bits_[0] |= 0x00000004u;
}
void RendererCommand_CaretInfo::clear_has_target_window_handle() {
  _has_bits_[0] &= ~0x00000004u;
}
void RendererCommand_CaretInfo::clear_target_window_handle() {
  target_window_handle_ = 0u;
  clear_has_target_window_handle();
}
 ::google::protobuf::uint32 RendererCommand_CaretInfo::target_window_handle() const {
  // @@protoc_insertion_point(field_get:mozc.commands.RendererCommand.CaretInfo.target_window_handle)
  return target_window_handle_;
}
 void RendererCommand_CaretInfo::set_target_window_handle(::google::protobuf::uint32 value) {
  set_has_target_window_handle();
  target_window_handle_ = value;
  // @@protoc_insertion_point(field_set:mozc.commands.RendererCommand.CaretInfo.target_window_handle)
}

// -------------------------------------------------------------------

// RendererCommand_IndicatorInfo

// optional .mozc.commands.Status status = 1;
bool RendererCommand_IndicatorInfo::has_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RendererCommand_IndicatorInfo::set_has_status() {
  _has_bits_[0] |= 0x00000001u;
}
void RendererCommand_IndicatorInfo::clear_has_status() {
  _has_bits_[0] &= ~0x00000001u;
}
void RendererCommand_IndicatorInfo::clear_status() {
  if (status_ != NULL) status_->::mozc::commands::Status::Clear();
  clear_has_status();
}
const ::mozc::commands::Status& RendererCommand_IndicatorInfo::status() const {
  // @@protoc_insertion_point(field_get:mozc.commands.RendererCommand.IndicatorInfo.status)
  return status_ != NULL ? *status_ : *default_instance_->status_;
}
::mozc::commands::Status* RendererCommand_IndicatorInfo::mutable_status() {
  set_has_status();
  if (status_ == NULL) {
    status_ = new ::mozc::commands::Status;
  }
  // @@protoc_insertion_point(field_mutable:mozc.commands.RendererCommand.IndicatorInfo.status)
  return status_;
}
::mozc::commands::Status* RendererCommand_IndicatorInfo::release_status() {
  // @@protoc_insertion_point(field_release:mozc.commands.RendererCommand.IndicatorInfo.status)
  clear_has_status();
  ::mozc::commands::Status* temp = status_;
  status_ = NULL;
  return temp;
}
void RendererCommand_IndicatorInfo::set_allocated_status(::mozc::commands::Status* status) {
  delete status_;
  status_ = status;
  if (status) {
    set_has_status();
  } else {
    clear_has_status();
  }
  // @@protoc_insertion_point(field_set_allocated:mozc.commands.RendererCommand.IndicatorInfo.status)
}

// -------------------------------------------------------------------

// RendererCommand_ApplicationInfo

// optional uint32 process_id = 1;
bool RendererCommand_ApplicationInfo::has_process_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RendererCommand_ApplicationInfo::set_has_process_id() {
  _has_bits_[0] |= 0x00000001u;
}
void RendererCommand_ApplicationInfo::clear_has_process_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void RendererCommand_ApplicationInfo::clear_process_id() {
  process_id_ = 0u;
  clear_has_process_id();
}
 ::google::protobuf::uint32 RendererCommand_ApplicationInfo::process_id() const {
  // @@protoc_insertion_point(field_get:mozc.commands.RendererCommand.ApplicationInfo.process_id)
  return process_id_;
}
 void RendererCommand_ApplicationInfo::set_process_id(::google::protobuf::uint32 value) {
  set_has_process_id();
  process_id_ = value;
  // @@protoc_insertion_point(field_set:mozc.commands.RendererCommand.ApplicationInfo.process_id)
}

// optional uint32 thread_id = 2;
bool RendererCommand_ApplicationInfo::has_thread_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RendererCommand_ApplicationInfo::set_has_thread_id() {
  _has_bits_[0] |= 0x00000002u;
}
void RendererCommand_ApplicationInfo::clear_has_thread_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void RendererCommand_ApplicationInfo::clear_thread_id() {
  thread_id_ = 0u;
  clear_has_thread_id();
}
 ::google::protobuf::uint32 RendererCommand_ApplicationInfo::thread_id() const {
  // @@protoc_insertion_point(field_get:mozc.commands.RendererCommand.ApplicationInfo.thread_id)
  return thread_id_;
}
 void RendererCommand_ApplicationInfo::set_thread_id(::google::protobuf::uint32 value) {
  set_has_thread_id();
  thread_id_ = value;
  // @@protoc_insertion_point(field_set:mozc.commands.RendererCommand.ApplicationInfo.thread_id)
}

// optional uint32 receiver_handle = 3;
bool RendererCommand_ApplicationInfo::has_receiver_handle() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void RendererCommand_ApplicationInfo::set_has_receiver_handle() {
  _has_bits_[0] |= 0x00000004u;
}
void RendererCommand_ApplicationInfo::clear_has_receiver_handle() {
  _has_bits_[0] &= ~0x00000004u;
}
void RendererCommand_ApplicationInfo::clear_receiver_handle() {
  receiver_handle_ = 0u;
  clear_has_receiver_handle();
}
 ::google::protobuf::uint32 RendererCommand_ApplicationInfo::receiver_handle() const {
  // @@protoc_insertion_point(field_get:mozc.commands.RendererCommand.ApplicationInfo.receiver_handle)
  return receiver_handle_;
}
 void RendererCommand_ApplicationInfo::set_receiver_handle(::google::protobuf::uint32 value) {
  set_has_receiver_handle();
  receiver_handle_ = value;
  // @@protoc_insertion_point(field_set:mozc.commands.RendererCommand.ApplicationInfo.receiver_handle)
}

// optional uint32 target_window_handle = 4;
bool RendererCommand_ApplicationInfo::has_target_window_handle() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void RendererCommand_ApplicationInfo::set_has_target_window_handle() {
  _has_bits_[0] |= 0x00000008u;
}
void RendererCommand_ApplicationInfo::clear_has_target_window_handle() {
  _has_bits_[0] &= ~0x00000008u;
}
void RendererCommand_ApplicationInfo::clear_target_window_handle() {
  target_window_handle_ = 0u;
  clear_has_target_window_handle();
}
 ::google::protobuf::uint32 RendererCommand_ApplicationInfo::target_window_handle() const {
  // @@protoc_insertion_point(field_get:mozc.commands.RendererCommand.ApplicationInfo.target_window_handle)
  return target_window_handle_;
}
 void RendererCommand_ApplicationInfo::set_target_window_handle(::google::protobuf::uint32 value) {
  set_has_target_window_handle();
  target_window_handle_ = value;
  // @@protoc_insertion_point(field_set:mozc.commands.RendererCommand.ApplicationInfo.target_window_handle)
}

// optional .mozc.commands.RendererCommand.WinLogFont composition_font = 5;
bool RendererCommand_ApplicationInfo::has_composition_font() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void RendererCommand_ApplicationInfo::set_has_composition_font() {
  _has_bits_[0] |= 0x00000010u;
}
void RendererCommand_ApplicationInfo::clear_has_composition_font() {
  _has_bits_[0] &= ~0x00000010u;
}
void RendererCommand_ApplicationInfo::clear_composition_font() {
  if (composition_font_ != NULL) composition_font_->::mozc::commands::RendererCommand_WinLogFont::Clear();
  clear_has_composition_font();
}
const ::mozc::commands::RendererCommand_WinLogFont& RendererCommand_ApplicationInfo::composition_font() const {
  // @@protoc_insertion_point(field_get:mozc.commands.RendererCommand.ApplicationInfo.composition_font)
  return composition_font_ != NULL ? *composition_font_ : *default_instance_->composition_font_;
}
::mozc::commands::RendererCommand_WinLogFont* RendererCommand_ApplicationInfo::mutable_composition_font() {
  set_has_composition_font();
  if (composition_font_ == NULL) {
    composition_font_ = new ::mozc::commands::RendererCommand_WinLogFont;
  }
  // @@protoc_insertion_point(field_mutable:mozc.commands.RendererCommand.ApplicationInfo.composition_font)
  return composition_font_;
}
::mozc::commands::RendererCommand_WinLogFont* RendererCommand_ApplicationInfo::release_composition_font() {
  // @@protoc_insertion_point(field_release:mozc.commands.RendererCommand.ApplicationInfo.composition_font)
  clear_has_composition_font();
  ::mozc::commands::RendererCommand_WinLogFont* temp = composition_font_;
  composition_font_ = NULL;
  return temp;
}
void RendererCommand_ApplicationInfo::set_allocated_composition_font(::mozc::commands::RendererCommand_WinLogFont* composition_font) {
  delete composition_font_;
  composition_font_ = composition_font;
  if (composition_font) {
    set_has_composition_font();
  } else {
    clear_has_composition_font();
  }
  // @@protoc_insertion_point(field_set_allocated:mozc.commands.RendererCommand.ApplicationInfo.composition_font)
}

// optional .mozc.commands.RendererCommand.ApplicationInfo.InputFrameworkType input_framework = 6 [default = UNKNOWN_FRAMEWORK];
bool RendererCommand_ApplicationInfo::has_input_framework() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void RendererCommand_ApplicationInfo::set_has_input_framework() {
  _has_bits_[0] |= 0x00000020u;
}
void RendererCommand_ApplicationInfo::clear_has_input_framework() {
  _has_bits_[0] &= ~0x00000020u;
}
void RendererCommand_ApplicationInfo::clear_input_framework() {
  input_framework_ = 0;
  clear_has_input_framework();
}
 ::mozc::commands::RendererCommand_ApplicationInfo_InputFrameworkType RendererCommand_ApplicationInfo::input_framework() const {
  // @@protoc_insertion_point(field_get:mozc.commands.RendererCommand.ApplicationInfo.input_framework)
  return static_cast< ::mozc::commands::RendererCommand_ApplicationInfo_InputFrameworkType >(input_framework_);
}
 void RendererCommand_ApplicationInfo::set_input_framework(::mozc::commands::RendererCommand_ApplicationInfo_InputFrameworkType value) {
  assert(::mozc::commands::RendererCommand_ApplicationInfo_InputFrameworkType_IsValid(value));
  set_has_input_framework();
  input_framework_ = value;
  // @@protoc_insertion_point(field_set:mozc.commands.RendererCommand.ApplicationInfo.input_framework)
}

// optional .mozc.commands.RendererCommand.CompositionForm composition_form = 7;
bool RendererCommand_ApplicationInfo::has_composition_form() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void RendererCommand_ApplicationInfo::set_has_composition_form() {
  _has_bits_[0] |= 0x00000040u;
}
void RendererCommand_ApplicationInfo::clear_has_composition_form() {
  _has_bits_[0] &= ~0x00000040u;
}
void RendererCommand_ApplicationInfo::clear_composition_form() {
  if (composition_form_ != NULL) composition_form_->::mozc::commands::RendererCommand_CompositionForm::Clear();
  clear_has_composition_form();
}
const ::mozc::commands::RendererCommand_CompositionForm& RendererCommand_ApplicationInfo::composition_form() const {
  // @@protoc_insertion_point(field_get:mozc.commands.RendererCommand.ApplicationInfo.composition_form)
  return composition_form_ != NULL ? *composition_form_ : *default_instance_->composition_form_;
}
::mozc::commands::RendererCommand_CompositionForm* RendererCommand_ApplicationInfo::mutable_composition_form() {
  set_has_composition_form();
  if (composition_form_ == NULL) {
    composition_form_ = new ::mozc::commands::RendererCommand_CompositionForm;
  }
  // @@protoc_insertion_point(field_mutable:mozc.commands.RendererCommand.ApplicationInfo.composition_form)
  return composition_form_;
}
::mozc::commands::RendererCommand_CompositionForm* RendererCommand_ApplicationInfo::release_composition_form() {
  // @@protoc_insertion_point(field_release:mozc.commands.RendererCommand.ApplicationInfo.composition_form)
  clear_has_composition_form();
  ::mozc::commands::RendererCommand_CompositionForm* temp = composition_form_;
  composition_form_ = NULL;
  return temp;
}
void RendererCommand_ApplicationInfo::set_allocated_composition_form(::mozc::commands::RendererCommand_CompositionForm* composition_form) {
  delete composition_form_;
  composition_form_ = composition_form;
  if (composition_form) {
    set_has_composition_form();
  } else {
    clear_has_composition_form();
  }
  // @@protoc_insertion_point(field_set_allocated:mozc.commands.RendererCommand.ApplicationInfo.composition_form)
}

// optional .mozc.commands.RendererCommand.CandidateForm candidate_form = 8;
bool RendererCommand_ApplicationInfo::has_candidate_form() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void RendererCommand_ApplicationInfo::set_has_candidate_form() {
  _has_bits_[0] |= 0x00000080u;
}
void RendererCommand_ApplicationInfo::clear_has_candidate_form() {
  _has_bits_[0] &= ~0x00000080u;
}
void RendererCommand_ApplicationInfo::clear_candidate_form() {
  if (candidate_form_ != NULL) candidate_form_->::mozc::commands::RendererCommand_CandidateForm::Clear();
  clear_has_candidate_form();
}
const ::mozc::commands::RendererCommand_CandidateForm& RendererCommand_ApplicationInfo::candidate_form() const {
  // @@protoc_insertion_point(field_get:mozc.commands.RendererCommand.ApplicationInfo.candidate_form)
  return candidate_form_ != NULL ? *candidate_form_ : *default_instance_->candidate_form_;
}
::mozc::commands::RendererCommand_CandidateForm* RendererCommand_ApplicationInfo::mutable_candidate_form() {
  set_has_candidate_form();
  if (candidate_form_ == NULL) {
    candidate_form_ = new ::mozc::commands::RendererCommand_CandidateForm;
  }
  // @@protoc_insertion_point(field_mutable:mozc.commands.RendererCommand.ApplicationInfo.candidate_form)
  return candidate_form_;
}
::mozc::commands::RendererCommand_CandidateForm* RendererCommand_ApplicationInfo::release_candidate_form() {
  // @@protoc_insertion_point(field_release:mozc.commands.RendererCommand.ApplicationInfo.candidate_form)
  clear_has_candidate_form();
  ::mozc::commands::RendererCommand_CandidateForm* temp = candidate_form_;
  candidate_form_ = NULL;
  return temp;
}
void RendererCommand_ApplicationInfo::set_allocated_candidate_form(::mozc::commands::RendererCommand_CandidateForm* candidate_form) {
  delete candidate_form_;
  candidate_form_ = candidate_form;
  if (candidate_form) {
    set_has_candidate_form();
  } else {
    clear_has_candidate_form();
  }
  // @@protoc_insertion_point(field_set_allocated:mozc.commands.RendererCommand.ApplicationInfo.candidate_form)
}

// optional int32 ui_visibilities = 9 [default = 0];
bool RendererCommand_ApplicationInfo::has_ui_visibilities() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void RendererCommand_ApplicationInfo::set_has_ui_visibilities() {
  _has_bits_[0] |= 0x00000100u;
}
void RendererCommand_ApplicationInfo::clear_has_ui_visibilities() {
  _has_bits_[0] &= ~0x00000100u;
}
void RendererCommand_ApplicationInfo::clear_ui_visibilities() {
  ui_visibilities_ = 0;
  clear_has_ui_visibilities();
}
 ::google::protobuf::int32 RendererCommand_ApplicationInfo::ui_visibilities() const {
  // @@protoc_insertion_point(field_get:mozc.commands.RendererCommand.ApplicationInfo.ui_visibilities)
  return ui_visibilities_;
}
 void RendererCommand_ApplicationInfo::set_ui_visibilities(::google::protobuf::int32 value) {
  set_has_ui_visibilities();
  ui_visibilities_ = value;
  // @@protoc_insertion_point(field_set:mozc.commands.RendererCommand.ApplicationInfo.ui_visibilities)
}

// optional .mozc.commands.RendererCommand.CharacterPosition composition_target = 10;
bool RendererCommand_ApplicationInfo::has_composition_target() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void RendererCommand_ApplicationInfo::set_has_composition_target() {
  _has_bits_[0] |= 0x00000200u;
}
void RendererCommand_ApplicationInfo::clear_has_composition_target() {
  _has_bits_[0] &= ~0x00000200u;
}
void RendererCommand_ApplicationInfo::clear_composition_target() {
  if (composition_target_ != NULL) composition_target_->::mozc::commands::RendererCommand_CharacterPosition::Clear();
  clear_has_composition_target();
}
const ::mozc::commands::RendererCommand_CharacterPosition& RendererCommand_ApplicationInfo::composition_target() const {
  // @@protoc_insertion_point(field_get:mozc.commands.RendererCommand.ApplicationInfo.composition_target)
  return composition_target_ != NULL ? *composition_target_ : *default_instance_->composition_target_;
}
::mozc::commands::RendererCommand_CharacterPosition* RendererCommand_ApplicationInfo::mutable_composition_target() {
  set_has_composition_target();
  if (composition_target_ == NULL) {
    composition_target_ = new ::mozc::commands::RendererCommand_CharacterPosition;
  }
  // @@protoc_insertion_point(field_mutable:mozc.commands.RendererCommand.ApplicationInfo.composition_target)
  return composition_target_;
}
::mozc::commands::RendererCommand_CharacterPosition* RendererCommand_ApplicationInfo::release_composition_target() {
  // @@protoc_insertion_point(field_release:mozc.commands.RendererCommand.ApplicationInfo.composition_target)
  clear_has_composition_target();
  ::mozc::commands::RendererCommand_CharacterPosition* temp = composition_target_;
  composition_target_ = NULL;
  return temp;
}
void RendererCommand_ApplicationInfo::set_allocated_composition_target(::mozc::commands::RendererCommand_CharacterPosition* composition_target) {
  delete composition_target_;
  composition_target_ = composition_target;
  if (composition_target) {
    set_has_composition_target();
  } else {
    clear_has_composition_target();
  }
  // @@protoc_insertion_point(field_set_allocated:mozc.commands.RendererCommand.ApplicationInfo.composition_target)
}

// optional .mozc.commands.RendererCommand.CaretInfo caret_info = 11;
bool RendererCommand_ApplicationInfo::has_caret_info() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void RendererCommand_ApplicationInfo::set_has_caret_info() {
  _has_bits_[0] |= 0x00000400u;
}
void RendererCommand_ApplicationInfo::clear_has_caret_info() {
  _has_bits_[0] &= ~0x00000400u;
}
void RendererCommand_ApplicationInfo::clear_caret_info() {
  if (caret_info_ != NULL) caret_info_->::mozc::commands::RendererCommand_CaretInfo::Clear();
  clear_has_caret_info();
}
const ::mozc::commands::RendererCommand_CaretInfo& RendererCommand_ApplicationInfo::caret_info() const {
  // @@protoc_insertion_point(field_get:mozc.commands.RendererCommand.ApplicationInfo.caret_info)
  return caret_info_ != NULL ? *caret_info_ : *default_instance_->caret_info_;
}
::mozc::commands::RendererCommand_CaretInfo* RendererCommand_ApplicationInfo::mutable_caret_info() {
  set_has_caret_info();
  if (caret_info_ == NULL) {
    caret_info_ = new ::mozc::commands::RendererCommand_CaretInfo;
  }
  // @@protoc_insertion_point(field_mutable:mozc.commands.RendererCommand.ApplicationInfo.caret_info)
  return caret_info_;
}
::mozc::commands::RendererCommand_CaretInfo* RendererCommand_ApplicationInfo::release_caret_info() {
  // @@protoc_insertion_point(field_release:mozc.commands.RendererCommand.ApplicationInfo.caret_info)
  clear_has_caret_info();
  ::mozc::commands::RendererCommand_CaretInfo* temp = caret_info_;
  caret_info_ = NULL;
  return temp;
}
void RendererCommand_ApplicationInfo::set_allocated_caret_info(::mozc::commands::RendererCommand_CaretInfo* caret_info) {
  delete caret_info_;
  caret_info_ = caret_info;
  if (caret_info) {
    set_has_caret_info();
  } else {
    clear_has_caret_info();
  }
  // @@protoc_insertion_point(field_set_allocated:mozc.commands.RendererCommand.ApplicationInfo.caret_info)
}

// optional string pango_font_description = 13;
bool RendererCommand_ApplicationInfo::has_pango_font_description() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void RendererCommand_ApplicationInfo::set_has_pango_font_description() {
  _has_bits_[0] |= 0x00000800u;
}
void RendererCommand_ApplicationInfo::clear_has_pango_font_description() {
  _has_bits_[0] &= ~0x00000800u;
}
void RendererCommand_ApplicationInfo::clear_pango_font_description() {
  pango_font_description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_pango_font_description();
}
 const ::std::string& RendererCommand_ApplicationInfo::pango_font_description() const {
  // @@protoc_insertion_point(field_get:mozc.commands.RendererCommand.ApplicationInfo.pango_font_description)
  return pango_font_description_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RendererCommand_ApplicationInfo::set_pango_font_description(const ::std::string& value) {
  set_has_pango_font_description();
  pango_font_description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mozc.commands.RendererCommand.ApplicationInfo.pango_font_description)
}
 void RendererCommand_ApplicationInfo::set_pango_font_description(const char* value) {
  set_has_pango_font_description();
  pango_font_description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mozc.commands.RendererCommand.ApplicationInfo.pango_font_description)
}
 void RendererCommand_ApplicationInfo::set_pango_font_description(const char* value, size_t size) {
  set_has_pango_font_description();
  pango_font_description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mozc.commands.RendererCommand.ApplicationInfo.pango_font_description)
}
 ::std::string* RendererCommand_ApplicationInfo::mutable_pango_font_description() {
  set_has_pango_font_description();
  // @@protoc_insertion_point(field_mutable:mozc.commands.RendererCommand.ApplicationInfo.pango_font_description)
  return pango_font_description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RendererCommand_ApplicationInfo::release_pango_font_description() {
  // @@protoc_insertion_point(field_release:mozc.commands.RendererCommand.ApplicationInfo.pango_font_description)
  clear_has_pango_font_description();
  return pango_font_description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RendererCommand_ApplicationInfo::set_allocated_pango_font_description(::std::string* pango_font_description) {
  if (pango_font_description != NULL) {
    set_has_pango_font_description();
  } else {
    clear_has_pango_font_description();
  }
  pango_font_description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pango_font_description);
  // @@protoc_insertion_point(field_set_allocated:mozc.commands.RendererCommand.ApplicationInfo.pango_font_description)
}

// optional .mozc.commands.RendererCommand.IndicatorInfo indicator_info = 14;
bool RendererCommand_ApplicationInfo::has_indicator_info() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void RendererCommand_ApplicationInfo::set_has_indicator_info() {
  _has_bits_[0] |= 0x00001000u;
}
void RendererCommand_ApplicationInfo::clear_has_indicator_info() {
  _has_bits_[0] &= ~0x00001000u;
}
void RendererCommand_ApplicationInfo::clear_indicator_info() {
  if (indicator_info_ != NULL) indicator_info_->::mozc::commands::RendererCommand_IndicatorInfo::Clear();
  clear_has_indicator_info();
}
const ::mozc::commands::RendererCommand_IndicatorInfo& RendererCommand_ApplicationInfo::indicator_info() const {
  // @@protoc_insertion_point(field_get:mozc.commands.RendererCommand.ApplicationInfo.indicator_info)
  return indicator_info_ != NULL ? *indicator_info_ : *default_instance_->indicator_info_;
}
::mozc::commands::RendererCommand_IndicatorInfo* RendererCommand_ApplicationInfo::mutable_indicator_info() {
  set_has_indicator_info();
  if (indicator_info_ == NULL) {
    indicator_info_ = new ::mozc::commands::RendererCommand_IndicatorInfo;
  }
  // @@protoc_insertion_point(field_mutable:mozc.commands.RendererCommand.ApplicationInfo.indicator_info)
  return indicator_info_;
}
::mozc::commands::RendererCommand_IndicatorInfo* RendererCommand_ApplicationInfo::release_indicator_info() {
  // @@protoc_insertion_point(field_release:mozc.commands.RendererCommand.ApplicationInfo.indicator_info)
  clear_has_indicator_info();
  ::mozc::commands::RendererCommand_IndicatorInfo* temp = indicator_info_;
  indicator_info_ = NULL;
  return temp;
}
void RendererCommand_ApplicationInfo::set_allocated_indicator_info(::mozc::commands::RendererCommand_IndicatorInfo* indicator_info) {
  delete indicator_info_;
  indicator_info_ = indicator_info;
  if (indicator_info) {
    set_has_indicator_info();
  } else {
    clear_has_indicator_info();
  }
  // @@protoc_insertion_point(field_set_allocated:mozc.commands.RendererCommand.ApplicationInfo.indicator_info)
}

// -------------------------------------------------------------------

// RendererCommand

// optional .mozc.commands.RendererCommand.CommandType type = 1 [default = NOOP];
bool RendererCommand::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RendererCommand::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
void RendererCommand::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void RendererCommand::clear_type() {
  type_ = 0;
  clear_has_type();
}
 ::mozc::commands::RendererCommand_CommandType RendererCommand::type() const {
  // @@protoc_insertion_point(field_get:mozc.commands.RendererCommand.type)
  return static_cast< ::mozc::commands::RendererCommand_CommandType >(type_);
}
 void RendererCommand::set_type(::mozc::commands::RendererCommand_CommandType value) {
  assert(::mozc::commands::RendererCommand_CommandType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:mozc.commands.RendererCommand.type)
}

// optional bool visible = 2 [default = false];
bool RendererCommand::has_visible() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RendererCommand::set_has_visible() {
  _has_bits_[0] |= 0x00000002u;
}
void RendererCommand::clear_has_visible() {
  _has_bits_[0] &= ~0x00000002u;
}
void RendererCommand::clear_visible() {
  visible_ = false;
  clear_has_visible();
}
 bool RendererCommand::visible() const {
  // @@protoc_insertion_point(field_get:mozc.commands.RendererCommand.visible)
  return visible_;
}
 void RendererCommand::set_visible(bool value) {
  set_has_visible();
  visible_ = value;
  // @@protoc_insertion_point(field_set:mozc.commands.RendererCommand.visible)
}

// optional .mozc.commands.Output output = 3;
bool RendererCommand::has_output() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void RendererCommand::set_has_output() {
  _has_bits_[0] |= 0x00000004u;
}
void RendererCommand::clear_has_output() {
  _has_bits_[0] &= ~0x00000004u;
}
void RendererCommand::clear_output() {
  if (output_ != NULL) output_->::mozc::commands::Output::Clear();
  clear_has_output();
}
const ::mozc::commands::Output& RendererCommand::output() const {
  // @@protoc_insertion_point(field_get:mozc.commands.RendererCommand.output)
  return output_ != NULL ? *output_ : *default_instance_->output_;
}
::mozc::commands::Output* RendererCommand::mutable_output() {
  set_has_output();
  if (output_ == NULL) {
    output_ = new ::mozc::commands::Output;
  }
  // @@protoc_insertion_point(field_mutable:mozc.commands.RendererCommand.output)
  return output_;
}
::mozc::commands::Output* RendererCommand::release_output() {
  // @@protoc_insertion_point(field_release:mozc.commands.RendererCommand.output)
  clear_has_output();
  ::mozc::commands::Output* temp = output_;
  output_ = NULL;
  return temp;
}
void RendererCommand::set_allocated_output(::mozc::commands::Output* output) {
  delete output_;
  output_ = output;
  if (output) {
    set_has_output();
  } else {
    clear_has_output();
  }
  // @@protoc_insertion_point(field_set_allocated:mozc.commands.RendererCommand.output)
}

// optional .mozc.commands.RendererCommand.Rectangle preedit_rectangle = 4;
bool RendererCommand::has_preedit_rectangle() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void RendererCommand::set_has_preedit_rectangle() {
  _has_bits_[0] |= 0x00000008u;
}
void RendererCommand::clear_has_preedit_rectangle() {
  _has_bits_[0] &= ~0x00000008u;
}
void RendererCommand::clear_preedit_rectangle() {
  if (preedit_rectangle_ != NULL) preedit_rectangle_->::mozc::commands::RendererCommand_Rectangle::Clear();
  clear_has_preedit_rectangle();
}
const ::mozc::commands::RendererCommand_Rectangle& RendererCommand::preedit_rectangle() const {
  // @@protoc_insertion_point(field_get:mozc.commands.RendererCommand.preedit_rectangle)
  return preedit_rectangle_ != NULL ? *preedit_rectangle_ : *default_instance_->preedit_rectangle_;
}
::mozc::commands::RendererCommand_Rectangle* RendererCommand::mutable_preedit_rectangle() {
  set_has_preedit_rectangle();
  if (preedit_rectangle_ == NULL) {
    preedit_rectangle_ = new ::mozc::commands::RendererCommand_Rectangle;
  }
  // @@protoc_insertion_point(field_mutable:mozc.commands.RendererCommand.preedit_rectangle)
  return preedit_rectangle_;
}
::mozc::commands::RendererCommand_Rectangle* RendererCommand::release_preedit_rectangle() {
  // @@protoc_insertion_point(field_release:mozc.commands.RendererCommand.preedit_rectangle)
  clear_has_preedit_rectangle();
  ::mozc::commands::RendererCommand_Rectangle* temp = preedit_rectangle_;
  preedit_rectangle_ = NULL;
  return temp;
}
void RendererCommand::set_allocated_preedit_rectangle(::mozc::commands::RendererCommand_Rectangle* preedit_rectangle) {
  delete preedit_rectangle_;
  preedit_rectangle_ = preedit_rectangle;
  if (preedit_rectangle) {
    set_has_preedit_rectangle();
  } else {
    clear_has_preedit_rectangle();
  }
  // @@protoc_insertion_point(field_set_allocated:mozc.commands.RendererCommand.preedit_rectangle)
}

// optional .mozc.commands.RendererCommand.ApplicationInfo application_info = 5;
bool RendererCommand::has_application_info() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void RendererCommand::set_has_application_info() {
  _has_bits_[0] |= 0x00000010u;
}
void RendererCommand::clear_has_application_info() {
  _has_bits_[0] &= ~0x00000010u;
}
void RendererCommand::clear_application_info() {
  if (application_info_ != NULL) application_info_->::mozc::commands::RendererCommand_ApplicationInfo::Clear();
  clear_has_application_info();
}
const ::mozc::commands::RendererCommand_ApplicationInfo& RendererCommand::application_info() const {
  // @@protoc_insertion_point(field_get:mozc.commands.RendererCommand.application_info)
  return application_info_ != NULL ? *application_info_ : *default_instance_->application_info_;
}
::mozc::commands::RendererCommand_ApplicationInfo* RendererCommand::mutable_application_info() {
  set_has_application_info();
  if (application_info_ == NULL) {
    application_info_ = new ::mozc::commands::RendererCommand_ApplicationInfo;
  }
  // @@protoc_insertion_point(field_mutable:mozc.commands.RendererCommand.application_info)
  return application_info_;
}
::mozc::commands::RendererCommand_ApplicationInfo* RendererCommand::release_application_info() {
  // @@protoc_insertion_point(field_release:mozc.commands.RendererCommand.application_info)
  clear_has_application_info();
  ::mozc::commands::RendererCommand_ApplicationInfo* temp = application_info_;
  application_info_ = NULL;
  return temp;
}
void RendererCommand::set_allocated_application_info(::mozc::commands::RendererCommand_ApplicationInfo* application_info) {
  delete application_info_;
  application_info_ = application_info;
  if (application_info) {
    set_has_application_info();
  } else {
    clear_has_application_info();
  }
  // @@protoc_insertion_point(field_set_allocated:mozc.commands.RendererCommand.application_info)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace commands
}  // namespace mozc

// @@protoc_insertion_point(global_scope)
