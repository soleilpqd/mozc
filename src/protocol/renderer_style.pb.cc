// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protocol/renderer_style.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "protocol/renderer_style.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace mozc {
namespace renderer {

namespace {

const ::google::protobuf::Descriptor* RendererStyle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RendererStyle_reflection_ = NULL;
const ::google::protobuf::Descriptor* RendererStyle_RGBAColor_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RendererStyle_RGBAColor_reflection_ = NULL;
const ::google::protobuf::Descriptor* RendererStyle_TextStyle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RendererStyle_TextStyle_reflection_ = NULL;
const ::google::protobuf::Descriptor* RendererStyle_InfolistStyle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RendererStyle_InfolistStyle_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_protocol_2frenderer_5fstyle_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_protocol_2frenderer_5fstyle_2eproto() {
  protobuf_AddDesc_protocol_2frenderer_5fstyle_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "protocol/renderer_style.proto");
  GOOGLE_CHECK(file != NULL);
  RendererStyle_descriptor_ = file->message_type(0);
  static const int RendererStyle_offsets_[18] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RendererStyle, window_border_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RendererStyle, footer_height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RendererStyle, row_rect_padding_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RendererStyle, border_color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RendererStyle, column_minimum_width_string_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RendererStyle, text_styles_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RendererStyle, footer_border_colors_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RendererStyle, footer_style_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RendererStyle, footer_sub_label_style_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RendererStyle, focused_background_color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RendererStyle, focused_border_color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RendererStyle, scrollbar_background_color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RendererStyle, scrollbar_indicator_color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RendererStyle, scrollbar_width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RendererStyle, footer_top_color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RendererStyle, footer_bottom_color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RendererStyle, logo_file_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RendererStyle, infolist_style_),
  };
  RendererStyle_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RendererStyle_descriptor_,
      RendererStyle::default_instance_,
      RendererStyle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RendererStyle, _has_bits_[0]),
      -1,
      -1,
      sizeof(RendererStyle),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RendererStyle, _internal_metadata_),
      -1);
  RendererStyle_RGBAColor_descriptor_ = RendererStyle_descriptor_->nested_type(0);
  static const int RendererStyle_RGBAColor_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RendererStyle_RGBAColor, r_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RendererStyle_RGBAColor, g_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RendererStyle_RGBAColor, b_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RendererStyle_RGBAColor, a_),
  };
  RendererStyle_RGBAColor_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RendererStyle_RGBAColor_descriptor_,
      RendererStyle_RGBAColor::default_instance_,
      RendererStyle_RGBAColor_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RendererStyle_RGBAColor, _has_bits_[0]),
      -1,
      -1,
      sizeof(RendererStyle_RGBAColor),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RendererStyle_RGBAColor, _internal_metadata_),
      -1);
  RendererStyle_TextStyle_descriptor_ = RendererStyle_descriptor_->nested_type(1);
  static const int RendererStyle_TextStyle_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RendererStyle_TextStyle, font_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RendererStyle_TextStyle, foreground_color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RendererStyle_TextStyle, background_color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RendererStyle_TextStyle, left_padding_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RendererStyle_TextStyle, right_padding_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RendererStyle_TextStyle, font_name_),
  };
  RendererStyle_TextStyle_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RendererStyle_TextStyle_descriptor_,
      RendererStyle_TextStyle::default_instance_,
      RendererStyle_TextStyle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RendererStyle_TextStyle, _has_bits_[0]),
      -1,
      -1,
      sizeof(RendererStyle_TextStyle),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RendererStyle_TextStyle, _internal_metadata_),
      -1);
  RendererStyle_InfolistStyle_descriptor_ = RendererStyle_descriptor_->nested_type(2);
  static const int RendererStyle_InfolistStyle_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RendererStyle_InfolistStyle, caption_string_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RendererStyle_InfolistStyle, caption_height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RendererStyle_InfolistStyle, caption_padding_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RendererStyle_InfolistStyle, window_border_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RendererStyle_InfolistStyle, row_rect_padding_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RendererStyle_InfolistStyle, window_width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RendererStyle_InfolistStyle, caption_style_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RendererStyle_InfolistStyle, title_style_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RendererStyle_InfolistStyle, description_style_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RendererStyle_InfolistStyle, border_color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RendererStyle_InfolistStyle, caption_background_color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RendererStyle_InfolistStyle, focused_background_color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RendererStyle_InfolistStyle, focused_border_color_),
  };
  RendererStyle_InfolistStyle_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RendererStyle_InfolistStyle_descriptor_,
      RendererStyle_InfolistStyle::default_instance_,
      RendererStyle_InfolistStyle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RendererStyle_InfolistStyle, _has_bits_[0]),
      -1,
      -1,
      sizeof(RendererStyle_InfolistStyle),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RendererStyle_InfolistStyle, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_protocol_2frenderer_5fstyle_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RendererStyle_descriptor_, &RendererStyle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RendererStyle_RGBAColor_descriptor_, &RendererStyle_RGBAColor::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RendererStyle_TextStyle_descriptor_, &RendererStyle_TextStyle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RendererStyle_InfolistStyle_descriptor_, &RendererStyle_InfolistStyle::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_protocol_2frenderer_5fstyle_2eproto() {
  delete RendererStyle::default_instance_;
  delete RendererStyle_reflection_;
  delete RendererStyle_RGBAColor::default_instance_;
  delete RendererStyle_RGBAColor_reflection_;
  delete RendererStyle_TextStyle::default_instance_;
  delete RendererStyle_TextStyle_reflection_;
  delete RendererStyle_InfolistStyle::default_instance_;
  delete RendererStyle_InfolistStyle_reflection_;
}

void protobuf_AddDesc_protocol_2frenderer_5fstyle_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_protocol_2frenderer_5fstyle_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\035protocol/renderer_style.proto\022\rmozc.re"
    "nderer\"\217\017\n\rRendererStyle\022\025\n\rwindow_borde"
    "r\030\001 \001(\005\022\025\n\rfooter_height\030\002 \001(\005\022\030\n\020row_re"
    "ct_padding\030\003 \001(\005\022<\n\014border_color\030\004 \001(\0132&"
    ".mozc.renderer.RendererStyle.RGBAColor\022#"
    "\n\033column_minimum_width_string\030\005 \001(\t\022;\n\013t"
    "ext_styles\030\006 \003(\0132&.mozc.renderer.Rendere"
    "rStyle.TextStyle\022D\n\024footer_border_colors"
    "\030\007 \003(\0132&.mozc.renderer.RendererStyle.RGB"
    "AColor\022<\n\014footer_style\030\010 \001(\0132&.mozc.rend"
    "erer.RendererStyle.TextStyle\022F\n\026footer_s"
    "ub_label_style\030\t \001(\0132&.mozc.renderer.Ren"
    "dererStyle.TextStyle\022H\n\030focused_backgrou"
    "nd_color\030\n \001(\0132&.mozc.renderer.RendererS"
    "tyle.RGBAColor\022D\n\024focused_border_color\030\013"
    " \001(\0132&.mozc.renderer.RendererStyle.RGBAC"
    "olor\022J\n\032scrollbar_background_color\030\014 \001(\013"
    "2&.mozc.renderer.RendererStyle.RGBAColor"
    "\022I\n\031scrollbar_indicator_color\030\r \001(\0132&.mo"
    "zc.renderer.RendererStyle.RGBAColor\022\027\n\017s"
    "crollbar_width\030\016 \001(\005\022@\n\020footer_top_color"
    "\030\017 \001(\0132&.mozc.renderer.RendererStyle.RGB"
    "AColor\022C\n\023footer_bottom_color\030\020 \001(\0132&.mo"
    "zc.renderer.RendererStyle.RGBAColor\022\026\n\016l"
    "ogo_file_name\030\021 \001(\t\022B\n\016infolist_style\030\022 "
    "\001(\0132*.mozc.renderer.RendererStyle.Infoli"
    "stStyle\032C\n\tRGBAColor\022\014\n\001r\030\001 \002(\001:\0010\022\014\n\001g\030"
    "\002 \002(\001:\0010\022\014\n\001b\030\003 \002(\001:\0010\022\014\n\001a\030\004 \001(\001:\0011\032\350\001\n"
    "\tTextStyle\022\021\n\tfont_size\030\001 \001(\001\022@\n\020foregro"
    "und_color\030\002 \001(\0132&.mozc.renderer.Renderer"
    "Style.RGBAColor\022@\n\020background_color\030\003 \001("
    "\0132&.mozc.renderer.RendererStyle.RGBAColo"
    "r\022\027\n\014left_padding\030\004 \001(\005:\0010\022\030\n\rright_padd"
    "ing\030\005 \001(\005:\0010\022\021\n\tfont_name\030\006 \001(\t\032\366\004\n\rInfo"
    "listStyle\022\026\n\016caption_string\030\001 \001(\t\022\026\n\016cap"
    "tion_height\030\002 \001(\005\022\027\n\017caption_padding\030\003 \001"
    "(\005\022\025\n\rwindow_border\030\004 \001(\005\022\030\n\020row_rect_pa"
    "dding\030\005 \001(\005\022\024\n\014window_width\030\006 \001(\005\022=\n\rcap"
    "tion_style\030\007 \001(\0132&.mozc.renderer.Rendere"
    "rStyle.TextStyle\022;\n\013title_style\030\010 \001(\0132&."
    "mozc.renderer.RendererStyle.TextStyle\022A\n"
    "\021description_style\030\t \001(\0132&.mozc.renderer"
    ".RendererStyle.TextStyle\022<\n\014border_color"
    "\030\n \001(\0132&.mozc.renderer.RendererStyle.RGB"
    "AColor\022H\n\030caption_background_color\030\013 \001(\013"
    "2&.mozc.renderer.RendererStyle.RGBAColor"
    "\022H\n\030focused_background_color\030\014 \001(\0132&.moz"
    "c.renderer.RendererStyle.RGBAColor\022D\n\024fo"
    "cused_border_color\030\r \001(\0132&.mozc.renderer"
    ".RendererStyle.RGBAColor", 1984);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "protocol/renderer_style.proto", &protobuf_RegisterTypes);
  RendererStyle::default_instance_ = new RendererStyle();
  RendererStyle_RGBAColor::default_instance_ = new RendererStyle_RGBAColor();
  RendererStyle_TextStyle::default_instance_ = new RendererStyle_TextStyle();
  RendererStyle_InfolistStyle::default_instance_ = new RendererStyle_InfolistStyle();
  RendererStyle::default_instance_->InitAsDefaultInstance();
  RendererStyle_RGBAColor::default_instance_->InitAsDefaultInstance();
  RendererStyle_TextStyle::default_instance_->InitAsDefaultInstance();
  RendererStyle_InfolistStyle::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_protocol_2frenderer_5fstyle_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_protocol_2frenderer_5fstyle_2eproto {
  StaticDescriptorInitializer_protocol_2frenderer_5fstyle_2eproto() {
    protobuf_AddDesc_protocol_2frenderer_5fstyle_2eproto();
  }
} static_descriptor_initializer_protocol_2frenderer_5fstyle_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RendererStyle_RGBAColor::kRFieldNumber;
const int RendererStyle_RGBAColor::kGFieldNumber;
const int RendererStyle_RGBAColor::kBFieldNumber;
const int RendererStyle_RGBAColor::kAFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RendererStyle_RGBAColor::RendererStyle_RGBAColor()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mozc.renderer.RendererStyle.RGBAColor)
}

void RendererStyle_RGBAColor::InitAsDefaultInstance() {
}

RendererStyle_RGBAColor::RendererStyle_RGBAColor(const RendererStyle_RGBAColor& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mozc.renderer.RendererStyle.RGBAColor)
}

void RendererStyle_RGBAColor::SharedCtor() {
  _cached_size_ = 0;
  r_ = 0;
  g_ = 0;
  b_ = 0;
  a_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RendererStyle_RGBAColor::~RendererStyle_RGBAColor() {
  // @@protoc_insertion_point(destructor:mozc.renderer.RendererStyle.RGBAColor)
  SharedDtor();
}

void RendererStyle_RGBAColor::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RendererStyle_RGBAColor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RendererStyle_RGBAColor::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RendererStyle_RGBAColor_descriptor_;
}

const RendererStyle_RGBAColor& RendererStyle_RGBAColor::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2frenderer_5fstyle_2eproto();
  return *default_instance_;
}

RendererStyle_RGBAColor* RendererStyle_RGBAColor::default_instance_ = NULL;

RendererStyle_RGBAColor* RendererStyle_RGBAColor::New(::google::protobuf::Arena* arena) const {
  RendererStyle_RGBAColor* n = new RendererStyle_RGBAColor;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RendererStyle_RGBAColor::Clear() {
// @@protoc_insertion_point(message_clear_start:mozc.renderer.RendererStyle.RGBAColor)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(RendererStyle_RGBAColor, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<RendererStyle_RGBAColor*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 15u) {
    ZR_(r_, b_);
    a_ = 1;
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool RendererStyle_RGBAColor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mozc.renderer.RendererStyle.RGBAColor)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double r = 1 [default = 0];
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &r_)));
          set_has_r();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_g;
        break;
      }

      // required double g = 2 [default = 0];
      case 2: {
        if (tag == 17) {
         parse_g:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &g_)));
          set_has_g();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_b;
        break;
      }

      // required double b = 3 [default = 0];
      case 3: {
        if (tag == 25) {
         parse_b:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &b_)));
          set_has_b();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_a;
        break;
      }

      // optional double a = 4 [default = 1];
      case 4: {
        if (tag == 33) {
         parse_a:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &a_)));
          set_has_a();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mozc.renderer.RendererStyle.RGBAColor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mozc.renderer.RendererStyle.RGBAColor)
  return false;
#undef DO_
}

void RendererStyle_RGBAColor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mozc.renderer.RendererStyle.RGBAColor)
  // required double r = 1 [default = 0];
  if (has_r()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->r(), output);
  }

  // required double g = 2 [default = 0];
  if (has_g()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->g(), output);
  }

  // required double b = 3 [default = 0];
  if (has_b()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->b(), output);
  }

  // optional double a = 4 [default = 1];
  if (has_a()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->a(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mozc.renderer.RendererStyle.RGBAColor)
}

::google::protobuf::uint8* RendererStyle_RGBAColor::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mozc.renderer.RendererStyle.RGBAColor)
  // required double r = 1 [default = 0];
  if (has_r()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->r(), target);
  }

  // required double g = 2 [default = 0];
  if (has_g()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->g(), target);
  }

  // required double b = 3 [default = 0];
  if (has_b()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->b(), target);
  }

  // optional double a = 4 [default = 1];
  if (has_a()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->a(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mozc.renderer.RendererStyle.RGBAColor)
  return target;
}

int RendererStyle_RGBAColor::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:mozc.renderer.RendererStyle.RGBAColor)
  int total_size = 0;

  if (has_r()) {
    // required double r = 1 [default = 0];
    total_size += 1 + 8;
  }

  if (has_g()) {
    // required double g = 2 [default = 0];
    total_size += 1 + 8;
  }

  if (has_b()) {
    // required double b = 3 [default = 0];
    total_size += 1 + 8;
  }

  return total_size;
}
int RendererStyle_RGBAColor::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:mozc.renderer.RendererStyle.RGBAColor)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required double r = 1 [default = 0];
    total_size += 1 + 8;

    // required double g = 2 [default = 0];
    total_size += 1 + 8;

    // required double b = 3 [default = 0];
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional double a = 4 [default = 1];
  if (has_a()) {
    total_size += 1 + 8;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RendererStyle_RGBAColor::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mozc.renderer.RendererStyle.RGBAColor)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RendererStyle_RGBAColor* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RendererStyle_RGBAColor>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mozc.renderer.RendererStyle.RGBAColor)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mozc.renderer.RendererStyle.RGBAColor)
    MergeFrom(*source);
  }
}

void RendererStyle_RGBAColor::MergeFrom(const RendererStyle_RGBAColor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mozc.renderer.RendererStyle.RGBAColor)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_r()) {
      set_r(from.r());
    }
    if (from.has_g()) {
      set_g(from.g());
    }
    if (from.has_b()) {
      set_b(from.b());
    }
    if (from.has_a()) {
      set_a(from.a());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void RendererStyle_RGBAColor::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mozc.renderer.RendererStyle.RGBAColor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RendererStyle_RGBAColor::CopyFrom(const RendererStyle_RGBAColor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mozc.renderer.RendererStyle.RGBAColor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RendererStyle_RGBAColor::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void RendererStyle_RGBAColor::Swap(RendererStyle_RGBAColor* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RendererStyle_RGBAColor::InternalSwap(RendererStyle_RGBAColor* other) {
  std::swap(r_, other->r_);
  std::swap(g_, other->g_);
  std::swap(b_, other->b_);
  std::swap(a_, other->a_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RendererStyle_RGBAColor::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RendererStyle_RGBAColor_descriptor_;
  metadata.reflection = RendererStyle_RGBAColor_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RendererStyle_TextStyle::kFontSizeFieldNumber;
const int RendererStyle_TextStyle::kForegroundColorFieldNumber;
const int RendererStyle_TextStyle::kBackgroundColorFieldNumber;
const int RendererStyle_TextStyle::kLeftPaddingFieldNumber;
const int RendererStyle_TextStyle::kRightPaddingFieldNumber;
const int RendererStyle_TextStyle::kFontNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RendererStyle_TextStyle::RendererStyle_TextStyle()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mozc.renderer.RendererStyle.TextStyle)
}

void RendererStyle_TextStyle::InitAsDefaultInstance() {
  foreground_color_ = const_cast< ::mozc::renderer::RendererStyle_RGBAColor*>(&::mozc::renderer::RendererStyle_RGBAColor::default_instance());
  background_color_ = const_cast< ::mozc::renderer::RendererStyle_RGBAColor*>(&::mozc::renderer::RendererStyle_RGBAColor::default_instance());
}

RendererStyle_TextStyle::RendererStyle_TextStyle(const RendererStyle_TextStyle& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mozc.renderer.RendererStyle.TextStyle)
}

void RendererStyle_TextStyle::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  font_size_ = 0;
  foreground_color_ = NULL;
  background_color_ = NULL;
  left_padding_ = 0;
  right_padding_ = 0;
  font_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RendererStyle_TextStyle::~RendererStyle_TextStyle() {
  // @@protoc_insertion_point(destructor:mozc.renderer.RendererStyle.TextStyle)
  SharedDtor();
}

void RendererStyle_TextStyle::SharedDtor() {
  font_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete foreground_color_;
    delete background_color_;
  }
}

void RendererStyle_TextStyle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RendererStyle_TextStyle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RendererStyle_TextStyle_descriptor_;
}

const RendererStyle_TextStyle& RendererStyle_TextStyle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2frenderer_5fstyle_2eproto();
  return *default_instance_;
}

RendererStyle_TextStyle* RendererStyle_TextStyle::default_instance_ = NULL;

RendererStyle_TextStyle* RendererStyle_TextStyle::New(::google::protobuf::Arena* arena) const {
  RendererStyle_TextStyle* n = new RendererStyle_TextStyle;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RendererStyle_TextStyle::Clear() {
// @@protoc_insertion_point(message_clear_start:mozc.renderer.RendererStyle.TextStyle)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(RendererStyle_TextStyle, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<RendererStyle_TextStyle*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 63u) {
    ZR_(left_padding_, right_padding_);
    font_size_ = 0;
    if (has_foreground_color()) {
      if (foreground_color_ != NULL) foreground_color_->::mozc::renderer::RendererStyle_RGBAColor::Clear();
    }
    if (has_background_color()) {
      if (background_color_ != NULL) background_color_->::mozc::renderer::RendererStyle_RGBAColor::Clear();
    }
    if (has_font_name()) {
      font_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool RendererStyle_TextStyle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mozc.renderer.RendererStyle.TextStyle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double font_size = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &font_size_)));
          set_has_font_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_foreground_color;
        break;
      }

      // optional .mozc.renderer.RendererStyle.RGBAColor foreground_color = 2;
      case 2: {
        if (tag == 18) {
         parse_foreground_color:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_foreground_color()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_background_color;
        break;
      }

      // optional .mozc.renderer.RendererStyle.RGBAColor background_color = 3;
      case 3: {
        if (tag == 26) {
         parse_background_color:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_background_color()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_left_padding;
        break;
      }

      // optional int32 left_padding = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_left_padding:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &left_padding_)));
          set_has_left_padding();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_right_padding;
        break;
      }

      // optional int32 right_padding = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_right_padding:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &right_padding_)));
          set_has_right_padding();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_font_name;
        break;
      }

      // optional string font_name = 6;
      case 6: {
        if (tag == 50) {
         parse_font_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_font_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->font_name().data(), this->font_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mozc.renderer.RendererStyle.TextStyle.font_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mozc.renderer.RendererStyle.TextStyle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mozc.renderer.RendererStyle.TextStyle)
  return false;
#undef DO_
}

void RendererStyle_TextStyle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mozc.renderer.RendererStyle.TextStyle)
  // optional double font_size = 1;
  if (has_font_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->font_size(), output);
  }

  // optional .mozc.renderer.RendererStyle.RGBAColor foreground_color = 2;
  if (has_foreground_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->foreground_color_, output);
  }

  // optional .mozc.renderer.RendererStyle.RGBAColor background_color = 3;
  if (has_background_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->background_color_, output);
  }

  // optional int32 left_padding = 4 [default = 0];
  if (has_left_padding()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->left_padding(), output);
  }

  // optional int32 right_padding = 5 [default = 0];
  if (has_right_padding()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->right_padding(), output);
  }

  // optional string font_name = 6;
  if (has_font_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->font_name().data(), this->font_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mozc.renderer.RendererStyle.TextStyle.font_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->font_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mozc.renderer.RendererStyle.TextStyle)
}

::google::protobuf::uint8* RendererStyle_TextStyle::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mozc.renderer.RendererStyle.TextStyle)
  // optional double font_size = 1;
  if (has_font_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->font_size(), target);
  }

  // optional .mozc.renderer.RendererStyle.RGBAColor foreground_color = 2;
  if (has_foreground_color()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->foreground_color_, false, target);
  }

  // optional .mozc.renderer.RendererStyle.RGBAColor background_color = 3;
  if (has_background_color()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->background_color_, false, target);
  }

  // optional int32 left_padding = 4 [default = 0];
  if (has_left_padding()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->left_padding(), target);
  }

  // optional int32 right_padding = 5 [default = 0];
  if (has_right_padding()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->right_padding(), target);
  }

  // optional string font_name = 6;
  if (has_font_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->font_name().data(), this->font_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mozc.renderer.RendererStyle.TextStyle.font_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->font_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mozc.renderer.RendererStyle.TextStyle)
  return target;
}

int RendererStyle_TextStyle::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:mozc.renderer.RendererStyle.TextStyle)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 63u) {
    // optional double font_size = 1;
    if (has_font_size()) {
      total_size += 1 + 8;
    }

    // optional .mozc.renderer.RendererStyle.RGBAColor foreground_color = 2;
    if (has_foreground_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->foreground_color_);
    }

    // optional .mozc.renderer.RendererStyle.RGBAColor background_color = 3;
    if (has_background_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->background_color_);
    }

    // optional int32 left_padding = 4 [default = 0];
    if (has_left_padding()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->left_padding());
    }

    // optional int32 right_padding = 5 [default = 0];
    if (has_right_padding()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->right_padding());
    }

    // optional string font_name = 6;
    if (has_font_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->font_name());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RendererStyle_TextStyle::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mozc.renderer.RendererStyle.TextStyle)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RendererStyle_TextStyle* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RendererStyle_TextStyle>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mozc.renderer.RendererStyle.TextStyle)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mozc.renderer.RendererStyle.TextStyle)
    MergeFrom(*source);
  }
}

void RendererStyle_TextStyle::MergeFrom(const RendererStyle_TextStyle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mozc.renderer.RendererStyle.TextStyle)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_font_size()) {
      set_font_size(from.font_size());
    }
    if (from.has_foreground_color()) {
      mutable_foreground_color()->::mozc::renderer::RendererStyle_RGBAColor::MergeFrom(from.foreground_color());
    }
    if (from.has_background_color()) {
      mutable_background_color()->::mozc::renderer::RendererStyle_RGBAColor::MergeFrom(from.background_color());
    }
    if (from.has_left_padding()) {
      set_left_padding(from.left_padding());
    }
    if (from.has_right_padding()) {
      set_right_padding(from.right_padding());
    }
    if (from.has_font_name()) {
      set_has_font_name();
      font_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.font_name_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void RendererStyle_TextStyle::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mozc.renderer.RendererStyle.TextStyle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RendererStyle_TextStyle::CopyFrom(const RendererStyle_TextStyle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mozc.renderer.RendererStyle.TextStyle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RendererStyle_TextStyle::IsInitialized() const {

  if (has_foreground_color()) {
    if (!this->foreground_color_->IsInitialized()) return false;
  }
  if (has_background_color()) {
    if (!this->background_color_->IsInitialized()) return false;
  }
  return true;
}

void RendererStyle_TextStyle::Swap(RendererStyle_TextStyle* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RendererStyle_TextStyle::InternalSwap(RendererStyle_TextStyle* other) {
  std::swap(font_size_, other->font_size_);
  std::swap(foreground_color_, other->foreground_color_);
  std::swap(background_color_, other->background_color_);
  std::swap(left_padding_, other->left_padding_);
  std::swap(right_padding_, other->right_padding_);
  font_name_.Swap(&other->font_name_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RendererStyle_TextStyle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RendererStyle_TextStyle_descriptor_;
  metadata.reflection = RendererStyle_TextStyle_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RendererStyle_InfolistStyle::kCaptionStringFieldNumber;
const int RendererStyle_InfolistStyle::kCaptionHeightFieldNumber;
const int RendererStyle_InfolistStyle::kCaptionPaddingFieldNumber;
const int RendererStyle_InfolistStyle::kWindowBorderFieldNumber;
const int RendererStyle_InfolistStyle::kRowRectPaddingFieldNumber;
const int RendererStyle_InfolistStyle::kWindowWidthFieldNumber;
const int RendererStyle_InfolistStyle::kCaptionStyleFieldNumber;
const int RendererStyle_InfolistStyle::kTitleStyleFieldNumber;
const int RendererStyle_InfolistStyle::kDescriptionStyleFieldNumber;
const int RendererStyle_InfolistStyle::kBorderColorFieldNumber;
const int RendererStyle_InfolistStyle::kCaptionBackgroundColorFieldNumber;
const int RendererStyle_InfolistStyle::kFocusedBackgroundColorFieldNumber;
const int RendererStyle_InfolistStyle::kFocusedBorderColorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RendererStyle_InfolistStyle::RendererStyle_InfolistStyle()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mozc.renderer.RendererStyle.InfolistStyle)
}

void RendererStyle_InfolistStyle::InitAsDefaultInstance() {
  caption_style_ = const_cast< ::mozc::renderer::RendererStyle_TextStyle*>(&::mozc::renderer::RendererStyle_TextStyle::default_instance());
  title_style_ = const_cast< ::mozc::renderer::RendererStyle_TextStyle*>(&::mozc::renderer::RendererStyle_TextStyle::default_instance());
  description_style_ = const_cast< ::mozc::renderer::RendererStyle_TextStyle*>(&::mozc::renderer::RendererStyle_TextStyle::default_instance());
  border_color_ = const_cast< ::mozc::renderer::RendererStyle_RGBAColor*>(&::mozc::renderer::RendererStyle_RGBAColor::default_instance());
  caption_background_color_ = const_cast< ::mozc::renderer::RendererStyle_RGBAColor*>(&::mozc::renderer::RendererStyle_RGBAColor::default_instance());
  focused_background_color_ = const_cast< ::mozc::renderer::RendererStyle_RGBAColor*>(&::mozc::renderer::RendererStyle_RGBAColor::default_instance());
  focused_border_color_ = const_cast< ::mozc::renderer::RendererStyle_RGBAColor*>(&::mozc::renderer::RendererStyle_RGBAColor::default_instance());
}

RendererStyle_InfolistStyle::RendererStyle_InfolistStyle(const RendererStyle_InfolistStyle& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mozc.renderer.RendererStyle.InfolistStyle)
}

void RendererStyle_InfolistStyle::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  caption_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  caption_height_ = 0;
  caption_padding_ = 0;
  window_border_ = 0;
  row_rect_padding_ = 0;
  window_width_ = 0;
  caption_style_ = NULL;
  title_style_ = NULL;
  description_style_ = NULL;
  border_color_ = NULL;
  caption_background_color_ = NULL;
  focused_background_color_ = NULL;
  focused_border_color_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RendererStyle_InfolistStyle::~RendererStyle_InfolistStyle() {
  // @@protoc_insertion_point(destructor:mozc.renderer.RendererStyle.InfolistStyle)
  SharedDtor();
}

void RendererStyle_InfolistStyle::SharedDtor() {
  caption_string_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete caption_style_;
    delete title_style_;
    delete description_style_;
    delete border_color_;
    delete caption_background_color_;
    delete focused_background_color_;
    delete focused_border_color_;
  }
}

void RendererStyle_InfolistStyle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RendererStyle_InfolistStyle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RendererStyle_InfolistStyle_descriptor_;
}

const RendererStyle_InfolistStyle& RendererStyle_InfolistStyle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2frenderer_5fstyle_2eproto();
  return *default_instance_;
}

RendererStyle_InfolistStyle* RendererStyle_InfolistStyle::default_instance_ = NULL;

RendererStyle_InfolistStyle* RendererStyle_InfolistStyle::New(::google::protobuf::Arena* arena) const {
  RendererStyle_InfolistStyle* n = new RendererStyle_InfolistStyle;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RendererStyle_InfolistStyle::Clear() {
// @@protoc_insertion_point(message_clear_start:mozc.renderer.RendererStyle.InfolistStyle)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(RendererStyle_InfolistStyle, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<RendererStyle_InfolistStyle*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(caption_height_, row_rect_padding_);
    if (has_caption_string()) {
      caption_string_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    window_width_ = 0;
    if (has_caption_style()) {
      if (caption_style_ != NULL) caption_style_->::mozc::renderer::RendererStyle_TextStyle::Clear();
    }
    if (has_title_style()) {
      if (title_style_ != NULL) title_style_->::mozc::renderer::RendererStyle_TextStyle::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 7936u) {
    if (has_description_style()) {
      if (description_style_ != NULL) description_style_->::mozc::renderer::RendererStyle_TextStyle::Clear();
    }
    if (has_border_color()) {
      if (border_color_ != NULL) border_color_->::mozc::renderer::RendererStyle_RGBAColor::Clear();
    }
    if (has_caption_background_color()) {
      if (caption_background_color_ != NULL) caption_background_color_->::mozc::renderer::RendererStyle_RGBAColor::Clear();
    }
    if (has_focused_background_color()) {
      if (focused_background_color_ != NULL) focused_background_color_->::mozc::renderer::RendererStyle_RGBAColor::Clear();
    }
    if (has_focused_border_color()) {
      if (focused_border_color_ != NULL) focused_border_color_->::mozc::renderer::RendererStyle_RGBAColor::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool RendererStyle_InfolistStyle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mozc.renderer.RendererStyle.InfolistStyle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string caption_string = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_caption_string()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->caption_string().data(), this->caption_string().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mozc.renderer.RendererStyle.InfolistStyle.caption_string");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_caption_height;
        break;
      }

      // optional int32 caption_height = 2;
      case 2: {
        if (tag == 16) {
         parse_caption_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &caption_height_)));
          set_has_caption_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_caption_padding;
        break;
      }

      // optional int32 caption_padding = 3;
      case 3: {
        if (tag == 24) {
         parse_caption_padding:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &caption_padding_)));
          set_has_caption_padding();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_window_border;
        break;
      }

      // optional int32 window_border = 4;
      case 4: {
        if (tag == 32) {
         parse_window_border:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &window_border_)));
          set_has_window_border();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_row_rect_padding;
        break;
      }

      // optional int32 row_rect_padding = 5;
      case 5: {
        if (tag == 40) {
         parse_row_rect_padding:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &row_rect_padding_)));
          set_has_row_rect_padding();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_window_width;
        break;
      }

      // optional int32 window_width = 6;
      case 6: {
        if (tag == 48) {
         parse_window_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &window_width_)));
          set_has_window_width();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_caption_style;
        break;
      }

      // optional .mozc.renderer.RendererStyle.TextStyle caption_style = 7;
      case 7: {
        if (tag == 58) {
         parse_caption_style:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_caption_style()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_title_style;
        break;
      }

      // optional .mozc.renderer.RendererStyle.TextStyle title_style = 8;
      case 8: {
        if (tag == 66) {
         parse_title_style:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_title_style()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_description_style;
        break;
      }

      // optional .mozc.renderer.RendererStyle.TextStyle description_style = 9;
      case 9: {
        if (tag == 74) {
         parse_description_style:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_description_style()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_border_color;
        break;
      }

      // optional .mozc.renderer.RendererStyle.RGBAColor border_color = 10;
      case 10: {
        if (tag == 82) {
         parse_border_color:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_border_color()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_caption_background_color;
        break;
      }

      // optional .mozc.renderer.RendererStyle.RGBAColor caption_background_color = 11;
      case 11: {
        if (tag == 90) {
         parse_caption_background_color:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_caption_background_color()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_focused_background_color;
        break;
      }

      // optional .mozc.renderer.RendererStyle.RGBAColor focused_background_color = 12;
      case 12: {
        if (tag == 98) {
         parse_focused_background_color:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_focused_background_color()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_focused_border_color;
        break;
      }

      // optional .mozc.renderer.RendererStyle.RGBAColor focused_border_color = 13;
      case 13: {
        if (tag == 106) {
         parse_focused_border_color:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_focused_border_color()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mozc.renderer.RendererStyle.InfolistStyle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mozc.renderer.RendererStyle.InfolistStyle)
  return false;
#undef DO_
}

void RendererStyle_InfolistStyle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mozc.renderer.RendererStyle.InfolistStyle)
  // optional string caption_string = 1;
  if (has_caption_string()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->caption_string().data(), this->caption_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mozc.renderer.RendererStyle.InfolistStyle.caption_string");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->caption_string(), output);
  }

  // optional int32 caption_height = 2;
  if (has_caption_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->caption_height(), output);
  }

  // optional int32 caption_padding = 3;
  if (has_caption_padding()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->caption_padding(), output);
  }

  // optional int32 window_border = 4;
  if (has_window_border()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->window_border(), output);
  }

  // optional int32 row_rect_padding = 5;
  if (has_row_rect_padding()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->row_rect_padding(), output);
  }

  // optional int32 window_width = 6;
  if (has_window_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->window_width(), output);
  }

  // optional .mozc.renderer.RendererStyle.TextStyle caption_style = 7;
  if (has_caption_style()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->caption_style_, output);
  }

  // optional .mozc.renderer.RendererStyle.TextStyle title_style = 8;
  if (has_title_style()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->title_style_, output);
  }

  // optional .mozc.renderer.RendererStyle.TextStyle description_style = 9;
  if (has_description_style()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->description_style_, output);
  }

  // optional .mozc.renderer.RendererStyle.RGBAColor border_color = 10;
  if (has_border_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->border_color_, output);
  }

  // optional .mozc.renderer.RendererStyle.RGBAColor caption_background_color = 11;
  if (has_caption_background_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *this->caption_background_color_, output);
  }

  // optional .mozc.renderer.RendererStyle.RGBAColor focused_background_color = 12;
  if (has_focused_background_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *this->focused_background_color_, output);
  }

  // optional .mozc.renderer.RendererStyle.RGBAColor focused_border_color = 13;
  if (has_focused_border_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, *this->focused_border_color_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mozc.renderer.RendererStyle.InfolistStyle)
}

::google::protobuf::uint8* RendererStyle_InfolistStyle::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mozc.renderer.RendererStyle.InfolistStyle)
  // optional string caption_string = 1;
  if (has_caption_string()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->caption_string().data(), this->caption_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mozc.renderer.RendererStyle.InfolistStyle.caption_string");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->caption_string(), target);
  }

  // optional int32 caption_height = 2;
  if (has_caption_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->caption_height(), target);
  }

  // optional int32 caption_padding = 3;
  if (has_caption_padding()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->caption_padding(), target);
  }

  // optional int32 window_border = 4;
  if (has_window_border()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->window_border(), target);
  }

  // optional int32 row_rect_padding = 5;
  if (has_row_rect_padding()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->row_rect_padding(), target);
  }

  // optional int32 window_width = 6;
  if (has_window_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->window_width(), target);
  }

  // optional .mozc.renderer.RendererStyle.TextStyle caption_style = 7;
  if (has_caption_style()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->caption_style_, false, target);
  }

  // optional .mozc.renderer.RendererStyle.TextStyle title_style = 8;
  if (has_title_style()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->title_style_, false, target);
  }

  // optional .mozc.renderer.RendererStyle.TextStyle description_style = 9;
  if (has_description_style()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *this->description_style_, false, target);
  }

  // optional .mozc.renderer.RendererStyle.RGBAColor border_color = 10;
  if (has_border_color()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *this->border_color_, false, target);
  }

  // optional .mozc.renderer.RendererStyle.RGBAColor caption_background_color = 11;
  if (has_caption_background_color()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, *this->caption_background_color_, false, target);
  }

  // optional .mozc.renderer.RendererStyle.RGBAColor focused_background_color = 12;
  if (has_focused_background_color()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, *this->focused_background_color_, false, target);
  }

  // optional .mozc.renderer.RendererStyle.RGBAColor focused_border_color = 13;
  if (has_focused_border_color()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        13, *this->focused_border_color_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mozc.renderer.RendererStyle.InfolistStyle)
  return target;
}

int RendererStyle_InfolistStyle::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:mozc.renderer.RendererStyle.InfolistStyle)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional string caption_string = 1;
    if (has_caption_string()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->caption_string());
    }

    // optional int32 caption_height = 2;
    if (has_caption_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->caption_height());
    }

    // optional int32 caption_padding = 3;
    if (has_caption_padding()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->caption_padding());
    }

    // optional int32 window_border = 4;
    if (has_window_border()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->window_border());
    }

    // optional int32 row_rect_padding = 5;
    if (has_row_rect_padding()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->row_rect_padding());
    }

    // optional int32 window_width = 6;
    if (has_window_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->window_width());
    }

    // optional .mozc.renderer.RendererStyle.TextStyle caption_style = 7;
    if (has_caption_style()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->caption_style_);
    }

    // optional .mozc.renderer.RendererStyle.TextStyle title_style = 8;
    if (has_title_style()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->title_style_);
    }

  }
  if (_has_bits_[8 / 32] & 7936u) {
    // optional .mozc.renderer.RendererStyle.TextStyle description_style = 9;
    if (has_description_style()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->description_style_);
    }

    // optional .mozc.renderer.RendererStyle.RGBAColor border_color = 10;
    if (has_border_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->border_color_);
    }

    // optional .mozc.renderer.RendererStyle.RGBAColor caption_background_color = 11;
    if (has_caption_background_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->caption_background_color_);
    }

    // optional .mozc.renderer.RendererStyle.RGBAColor focused_background_color = 12;
    if (has_focused_background_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->focused_background_color_);
    }

    // optional .mozc.renderer.RendererStyle.RGBAColor focused_border_color = 13;
    if (has_focused_border_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->focused_border_color_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RendererStyle_InfolistStyle::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mozc.renderer.RendererStyle.InfolistStyle)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RendererStyle_InfolistStyle* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RendererStyle_InfolistStyle>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mozc.renderer.RendererStyle.InfolistStyle)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mozc.renderer.RendererStyle.InfolistStyle)
    MergeFrom(*source);
  }
}

void RendererStyle_InfolistStyle::MergeFrom(const RendererStyle_InfolistStyle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mozc.renderer.RendererStyle.InfolistStyle)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_caption_string()) {
      set_has_caption_string();
      caption_string_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.caption_string_);
    }
    if (from.has_caption_height()) {
      set_caption_height(from.caption_height());
    }
    if (from.has_caption_padding()) {
      set_caption_padding(from.caption_padding());
    }
    if (from.has_window_border()) {
      set_window_border(from.window_border());
    }
    if (from.has_row_rect_padding()) {
      set_row_rect_padding(from.row_rect_padding());
    }
    if (from.has_window_width()) {
      set_window_width(from.window_width());
    }
    if (from.has_caption_style()) {
      mutable_caption_style()->::mozc::renderer::RendererStyle_TextStyle::MergeFrom(from.caption_style());
    }
    if (from.has_title_style()) {
      mutable_title_style()->::mozc::renderer::RendererStyle_TextStyle::MergeFrom(from.title_style());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_description_style()) {
      mutable_description_style()->::mozc::renderer::RendererStyle_TextStyle::MergeFrom(from.description_style());
    }
    if (from.has_border_color()) {
      mutable_border_color()->::mozc::renderer::RendererStyle_RGBAColor::MergeFrom(from.border_color());
    }
    if (from.has_caption_background_color()) {
      mutable_caption_background_color()->::mozc::renderer::RendererStyle_RGBAColor::MergeFrom(from.caption_background_color());
    }
    if (from.has_focused_background_color()) {
      mutable_focused_background_color()->::mozc::renderer::RendererStyle_RGBAColor::MergeFrom(from.focused_background_color());
    }
    if (from.has_focused_border_color()) {
      mutable_focused_border_color()->::mozc::renderer::RendererStyle_RGBAColor::MergeFrom(from.focused_border_color());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void RendererStyle_InfolistStyle::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mozc.renderer.RendererStyle.InfolistStyle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RendererStyle_InfolistStyle::CopyFrom(const RendererStyle_InfolistStyle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mozc.renderer.RendererStyle.InfolistStyle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RendererStyle_InfolistStyle::IsInitialized() const {

  if (has_caption_style()) {
    if (!this->caption_style_->IsInitialized()) return false;
  }
  if (has_title_style()) {
    if (!this->title_style_->IsInitialized()) return false;
  }
  if (has_description_style()) {
    if (!this->description_style_->IsInitialized()) return false;
  }
  if (has_border_color()) {
    if (!this->border_color_->IsInitialized()) return false;
  }
  if (has_caption_background_color()) {
    if (!this->caption_background_color_->IsInitialized()) return false;
  }
  if (has_focused_background_color()) {
    if (!this->focused_background_color_->IsInitialized()) return false;
  }
  if (has_focused_border_color()) {
    if (!this->focused_border_color_->IsInitialized()) return false;
  }
  return true;
}

void RendererStyle_InfolistStyle::Swap(RendererStyle_InfolistStyle* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RendererStyle_InfolistStyle::InternalSwap(RendererStyle_InfolistStyle* other) {
  caption_string_.Swap(&other->caption_string_);
  std::swap(caption_height_, other->caption_height_);
  std::swap(caption_padding_, other->caption_padding_);
  std::swap(window_border_, other->window_border_);
  std::swap(row_rect_padding_, other->row_rect_padding_);
  std::swap(window_width_, other->window_width_);
  std::swap(caption_style_, other->caption_style_);
  std::swap(title_style_, other->title_style_);
  std::swap(description_style_, other->description_style_);
  std::swap(border_color_, other->border_color_);
  std::swap(caption_background_color_, other->caption_background_color_);
  std::swap(focused_background_color_, other->focused_background_color_);
  std::swap(focused_border_color_, other->focused_border_color_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RendererStyle_InfolistStyle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RendererStyle_InfolistStyle_descriptor_;
  metadata.reflection = RendererStyle_InfolistStyle_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RendererStyle::kWindowBorderFieldNumber;
const int RendererStyle::kFooterHeightFieldNumber;
const int RendererStyle::kRowRectPaddingFieldNumber;
const int RendererStyle::kBorderColorFieldNumber;
const int RendererStyle::kColumnMinimumWidthStringFieldNumber;
const int RendererStyle::kTextStylesFieldNumber;
const int RendererStyle::kFooterBorderColorsFieldNumber;
const int RendererStyle::kFooterStyleFieldNumber;
const int RendererStyle::kFooterSubLabelStyleFieldNumber;
const int RendererStyle::kFocusedBackgroundColorFieldNumber;
const int RendererStyle::kFocusedBorderColorFieldNumber;
const int RendererStyle::kScrollbarBackgroundColorFieldNumber;
const int RendererStyle::kScrollbarIndicatorColorFieldNumber;
const int RendererStyle::kScrollbarWidthFieldNumber;
const int RendererStyle::kFooterTopColorFieldNumber;
const int RendererStyle::kFooterBottomColorFieldNumber;
const int RendererStyle::kLogoFileNameFieldNumber;
const int RendererStyle::kInfolistStyleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RendererStyle::RendererStyle()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mozc.renderer.RendererStyle)
}

void RendererStyle::InitAsDefaultInstance() {
  border_color_ = const_cast< ::mozc::renderer::RendererStyle_RGBAColor*>(&::mozc::renderer::RendererStyle_RGBAColor::default_instance());
  footer_style_ = const_cast< ::mozc::renderer::RendererStyle_TextStyle*>(&::mozc::renderer::RendererStyle_TextStyle::default_instance());
  footer_sub_label_style_ = const_cast< ::mozc::renderer::RendererStyle_TextStyle*>(&::mozc::renderer::RendererStyle_TextStyle::default_instance());
  focused_background_color_ = const_cast< ::mozc::renderer::RendererStyle_RGBAColor*>(&::mozc::renderer::RendererStyle_RGBAColor::default_instance());
  focused_border_color_ = const_cast< ::mozc::renderer::RendererStyle_RGBAColor*>(&::mozc::renderer::RendererStyle_RGBAColor::default_instance());
  scrollbar_background_color_ = const_cast< ::mozc::renderer::RendererStyle_RGBAColor*>(&::mozc::renderer::RendererStyle_RGBAColor::default_instance());
  scrollbar_indicator_color_ = const_cast< ::mozc::renderer::RendererStyle_RGBAColor*>(&::mozc::renderer::RendererStyle_RGBAColor::default_instance());
  footer_top_color_ = const_cast< ::mozc::renderer::RendererStyle_RGBAColor*>(&::mozc::renderer::RendererStyle_RGBAColor::default_instance());
  footer_bottom_color_ = const_cast< ::mozc::renderer::RendererStyle_RGBAColor*>(&::mozc::renderer::RendererStyle_RGBAColor::default_instance());
  infolist_style_ = const_cast< ::mozc::renderer::RendererStyle_InfolistStyle*>(&::mozc::renderer::RendererStyle_InfolistStyle::default_instance());
}

RendererStyle::RendererStyle(const RendererStyle& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mozc.renderer.RendererStyle)
}

void RendererStyle::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  window_border_ = 0;
  footer_height_ = 0;
  row_rect_padding_ = 0;
  border_color_ = NULL;
  column_minimum_width_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  footer_style_ = NULL;
  footer_sub_label_style_ = NULL;
  focused_background_color_ = NULL;
  focused_border_color_ = NULL;
  scrollbar_background_color_ = NULL;
  scrollbar_indicator_color_ = NULL;
  scrollbar_width_ = 0;
  footer_top_color_ = NULL;
  footer_bottom_color_ = NULL;
  logo_file_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  infolist_style_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RendererStyle::~RendererStyle() {
  // @@protoc_insertion_point(destructor:mozc.renderer.RendererStyle)
  SharedDtor();
}

void RendererStyle::SharedDtor() {
  column_minimum_width_string_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  logo_file_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete border_color_;
    delete footer_style_;
    delete footer_sub_label_style_;
    delete focused_background_color_;
    delete focused_border_color_;
    delete scrollbar_background_color_;
    delete scrollbar_indicator_color_;
    delete footer_top_color_;
    delete footer_bottom_color_;
    delete infolist_style_;
  }
}

void RendererStyle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RendererStyle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RendererStyle_descriptor_;
}

const RendererStyle& RendererStyle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2frenderer_5fstyle_2eproto();
  return *default_instance_;
}

RendererStyle* RendererStyle::default_instance_ = NULL;

RendererStyle* RendererStyle::New(::google::protobuf::Arena* arena) const {
  RendererStyle* n = new RendererStyle;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RendererStyle::Clear() {
// @@protoc_insertion_point(message_clear_start:mozc.renderer.RendererStyle)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(RendererStyle, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<RendererStyle*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 159u) {
    ZR_(window_border_, footer_height_);
    row_rect_padding_ = 0;
    if (has_border_color()) {
      if (border_color_ != NULL) border_color_->::mozc::renderer::RendererStyle_RGBAColor::Clear();
    }
    if (has_column_minimum_width_string()) {
      column_minimum_width_string_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_footer_style()) {
      if (footer_style_ != NULL) footer_style_->::mozc::renderer::RendererStyle_TextStyle::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 65280u) {
    if (has_footer_sub_label_style()) {
      if (footer_sub_label_style_ != NULL) footer_sub_label_style_->::mozc::renderer::RendererStyle_TextStyle::Clear();
    }
    if (has_focused_background_color()) {
      if (focused_background_color_ != NULL) focused_background_color_->::mozc::renderer::RendererStyle_RGBAColor::Clear();
    }
    if (has_focused_border_color()) {
      if (focused_border_color_ != NULL) focused_border_color_->::mozc::renderer::RendererStyle_RGBAColor::Clear();
    }
    if (has_scrollbar_background_color()) {
      if (scrollbar_background_color_ != NULL) scrollbar_background_color_->::mozc::renderer::RendererStyle_RGBAColor::Clear();
    }
    if (has_scrollbar_indicator_color()) {
      if (scrollbar_indicator_color_ != NULL) scrollbar_indicator_color_->::mozc::renderer::RendererStyle_RGBAColor::Clear();
    }
    scrollbar_width_ = 0;
    if (has_footer_top_color()) {
      if (footer_top_color_ != NULL) footer_top_color_->::mozc::renderer::RendererStyle_RGBAColor::Clear();
    }
    if (has_footer_bottom_color()) {
      if (footer_bottom_color_ != NULL) footer_bottom_color_->::mozc::renderer::RendererStyle_RGBAColor::Clear();
    }
  }
  if (_has_bits_[16 / 32] & 196608u) {
    if (has_logo_file_name()) {
      logo_file_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_infolist_style()) {
      if (infolist_style_ != NULL) infolist_style_->::mozc::renderer::RendererStyle_InfolistStyle::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  text_styles_.Clear();
  footer_border_colors_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool RendererStyle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mozc.renderer.RendererStyle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 window_border = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &window_border_)));
          set_has_window_border();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_footer_height;
        break;
      }

      // optional int32 footer_height = 2;
      case 2: {
        if (tag == 16) {
         parse_footer_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &footer_height_)));
          set_has_footer_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_row_rect_padding;
        break;
      }

      // optional int32 row_rect_padding = 3;
      case 3: {
        if (tag == 24) {
         parse_row_rect_padding:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &row_rect_padding_)));
          set_has_row_rect_padding();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_border_color;
        break;
      }

      // optional .mozc.renderer.RendererStyle.RGBAColor border_color = 4;
      case 4: {
        if (tag == 34) {
         parse_border_color:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_border_color()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_column_minimum_width_string;
        break;
      }

      // optional string column_minimum_width_string = 5;
      case 5: {
        if (tag == 42) {
         parse_column_minimum_width_string:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_column_minimum_width_string()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->column_minimum_width_string().data(), this->column_minimum_width_string().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mozc.renderer.RendererStyle.column_minimum_width_string");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_text_styles;
        break;
      }

      // repeated .mozc.renderer.RendererStyle.TextStyle text_styles = 6;
      case 6: {
        if (tag == 50) {
         parse_text_styles:
          DO_(input->IncrementRecursionDepth());
         parse_loop_text_styles:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_text_styles()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_loop_text_styles;
        if (input->ExpectTag(58)) goto parse_loop_footer_border_colors;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .mozc.renderer.RendererStyle.RGBAColor footer_border_colors = 7;
      case 7: {
        if (tag == 58) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_footer_border_colors:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_footer_border_colors()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_loop_footer_border_colors;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(66)) goto parse_footer_style;
        break;
      }

      // optional .mozc.renderer.RendererStyle.TextStyle footer_style = 8;
      case 8: {
        if (tag == 66) {
         parse_footer_style:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_footer_style()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_footer_sub_label_style;
        break;
      }

      // optional .mozc.renderer.RendererStyle.TextStyle footer_sub_label_style = 9;
      case 9: {
        if (tag == 74) {
         parse_footer_sub_label_style:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_footer_sub_label_style()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_focused_background_color;
        break;
      }

      // optional .mozc.renderer.RendererStyle.RGBAColor focused_background_color = 10;
      case 10: {
        if (tag == 82) {
         parse_focused_background_color:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_focused_background_color()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_focused_border_color;
        break;
      }

      // optional .mozc.renderer.RendererStyle.RGBAColor focused_border_color = 11;
      case 11: {
        if (tag == 90) {
         parse_focused_border_color:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_focused_border_color()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_scrollbar_background_color;
        break;
      }

      // optional .mozc.renderer.RendererStyle.RGBAColor scrollbar_background_color = 12;
      case 12: {
        if (tag == 98) {
         parse_scrollbar_background_color:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_scrollbar_background_color()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_scrollbar_indicator_color;
        break;
      }

      // optional .mozc.renderer.RendererStyle.RGBAColor scrollbar_indicator_color = 13;
      case 13: {
        if (tag == 106) {
         parse_scrollbar_indicator_color:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_scrollbar_indicator_color()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_scrollbar_width;
        break;
      }

      // optional int32 scrollbar_width = 14;
      case 14: {
        if (tag == 112) {
         parse_scrollbar_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &scrollbar_width_)));
          set_has_scrollbar_width();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_footer_top_color;
        break;
      }

      // optional .mozc.renderer.RendererStyle.RGBAColor footer_top_color = 15;
      case 15: {
        if (tag == 122) {
         parse_footer_top_color:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_footer_top_color()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_footer_bottom_color;
        break;
      }

      // optional .mozc.renderer.RendererStyle.RGBAColor footer_bottom_color = 16;
      case 16: {
        if (tag == 130) {
         parse_footer_bottom_color:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_footer_bottom_color()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_logo_file_name;
        break;
      }

      // optional string logo_file_name = 17;
      case 17: {
        if (tag == 138) {
         parse_logo_file_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_logo_file_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->logo_file_name().data(), this->logo_file_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mozc.renderer.RendererStyle.logo_file_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_infolist_style;
        break;
      }

      // optional .mozc.renderer.RendererStyle.InfolistStyle infolist_style = 18;
      case 18: {
        if (tag == 146) {
         parse_infolist_style:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_infolist_style()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mozc.renderer.RendererStyle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mozc.renderer.RendererStyle)
  return false;
#undef DO_
}

void RendererStyle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mozc.renderer.RendererStyle)
  // optional int32 window_border = 1;
  if (has_window_border()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->window_border(), output);
  }

  // optional int32 footer_height = 2;
  if (has_footer_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->footer_height(), output);
  }

  // optional int32 row_rect_padding = 3;
  if (has_row_rect_padding()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->row_rect_padding(), output);
  }

  // optional .mozc.renderer.RendererStyle.RGBAColor border_color = 4;
  if (has_border_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->border_color_, output);
  }

  // optional string column_minimum_width_string = 5;
  if (has_column_minimum_width_string()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->column_minimum_width_string().data(), this->column_minimum_width_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mozc.renderer.RendererStyle.column_minimum_width_string");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->column_minimum_width_string(), output);
  }

  // repeated .mozc.renderer.RendererStyle.TextStyle text_styles = 6;
  for (unsigned int i = 0, n = this->text_styles_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->text_styles(i), output);
  }

  // repeated .mozc.renderer.RendererStyle.RGBAColor footer_border_colors = 7;
  for (unsigned int i = 0, n = this->footer_border_colors_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->footer_border_colors(i), output);
  }

  // optional .mozc.renderer.RendererStyle.TextStyle footer_style = 8;
  if (has_footer_style()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->footer_style_, output);
  }

  // optional .mozc.renderer.RendererStyle.TextStyle footer_sub_label_style = 9;
  if (has_footer_sub_label_style()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->footer_sub_label_style_, output);
  }

  // optional .mozc.renderer.RendererStyle.RGBAColor focused_background_color = 10;
  if (has_focused_background_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->focused_background_color_, output);
  }

  // optional .mozc.renderer.RendererStyle.RGBAColor focused_border_color = 11;
  if (has_focused_border_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *this->focused_border_color_, output);
  }

  // optional .mozc.renderer.RendererStyle.RGBAColor scrollbar_background_color = 12;
  if (has_scrollbar_background_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *this->scrollbar_background_color_, output);
  }

  // optional .mozc.renderer.RendererStyle.RGBAColor scrollbar_indicator_color = 13;
  if (has_scrollbar_indicator_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, *this->scrollbar_indicator_color_, output);
  }

  // optional int32 scrollbar_width = 14;
  if (has_scrollbar_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->scrollbar_width(), output);
  }

  // optional .mozc.renderer.RendererStyle.RGBAColor footer_top_color = 15;
  if (has_footer_top_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, *this->footer_top_color_, output);
  }

  // optional .mozc.renderer.RendererStyle.RGBAColor footer_bottom_color = 16;
  if (has_footer_bottom_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, *this->footer_bottom_color_, output);
  }

  // optional string logo_file_name = 17;
  if (has_logo_file_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->logo_file_name().data(), this->logo_file_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mozc.renderer.RendererStyle.logo_file_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      17, this->logo_file_name(), output);
  }

  // optional .mozc.renderer.RendererStyle.InfolistStyle infolist_style = 18;
  if (has_infolist_style()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, *this->infolist_style_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mozc.renderer.RendererStyle)
}

::google::protobuf::uint8* RendererStyle::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mozc.renderer.RendererStyle)
  // optional int32 window_border = 1;
  if (has_window_border()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->window_border(), target);
  }

  // optional int32 footer_height = 2;
  if (has_footer_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->footer_height(), target);
  }

  // optional int32 row_rect_padding = 3;
  if (has_row_rect_padding()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->row_rect_padding(), target);
  }

  // optional .mozc.renderer.RendererStyle.RGBAColor border_color = 4;
  if (has_border_color()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->border_color_, false, target);
  }

  // optional string column_minimum_width_string = 5;
  if (has_column_minimum_width_string()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->column_minimum_width_string().data(), this->column_minimum_width_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mozc.renderer.RendererStyle.column_minimum_width_string");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->column_minimum_width_string(), target);
  }

  // repeated .mozc.renderer.RendererStyle.TextStyle text_styles = 6;
  for (unsigned int i = 0, n = this->text_styles_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, this->text_styles(i), false, target);
  }

  // repeated .mozc.renderer.RendererStyle.RGBAColor footer_border_colors = 7;
  for (unsigned int i = 0, n = this->footer_border_colors_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, this->footer_border_colors(i), false, target);
  }

  // optional .mozc.renderer.RendererStyle.TextStyle footer_style = 8;
  if (has_footer_style()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->footer_style_, false, target);
  }

  // optional .mozc.renderer.RendererStyle.TextStyle footer_sub_label_style = 9;
  if (has_footer_sub_label_style()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *this->footer_sub_label_style_, false, target);
  }

  // optional .mozc.renderer.RendererStyle.RGBAColor focused_background_color = 10;
  if (has_focused_background_color()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *this->focused_background_color_, false, target);
  }

  // optional .mozc.renderer.RendererStyle.RGBAColor focused_border_color = 11;
  if (has_focused_border_color()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, *this->focused_border_color_, false, target);
  }

  // optional .mozc.renderer.RendererStyle.RGBAColor scrollbar_background_color = 12;
  if (has_scrollbar_background_color()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, *this->scrollbar_background_color_, false, target);
  }

  // optional .mozc.renderer.RendererStyle.RGBAColor scrollbar_indicator_color = 13;
  if (has_scrollbar_indicator_color()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        13, *this->scrollbar_indicator_color_, false, target);
  }

  // optional int32 scrollbar_width = 14;
  if (has_scrollbar_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->scrollbar_width(), target);
  }

  // optional .mozc.renderer.RendererStyle.RGBAColor footer_top_color = 15;
  if (has_footer_top_color()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        15, *this->footer_top_color_, false, target);
  }

  // optional .mozc.renderer.RendererStyle.RGBAColor footer_bottom_color = 16;
  if (has_footer_bottom_color()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        16, *this->footer_bottom_color_, false, target);
  }

  // optional string logo_file_name = 17;
  if (has_logo_file_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->logo_file_name().data(), this->logo_file_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mozc.renderer.RendererStyle.logo_file_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->logo_file_name(), target);
  }

  // optional .mozc.renderer.RendererStyle.InfolistStyle infolist_style = 18;
  if (has_infolist_style()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        18, *this->infolist_style_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mozc.renderer.RendererStyle)
  return target;
}

int RendererStyle::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:mozc.renderer.RendererStyle)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 159u) {
    // optional int32 window_border = 1;
    if (has_window_border()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->window_border());
    }

    // optional int32 footer_height = 2;
    if (has_footer_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->footer_height());
    }

    // optional int32 row_rect_padding = 3;
    if (has_row_rect_padding()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->row_rect_padding());
    }

    // optional .mozc.renderer.RendererStyle.RGBAColor border_color = 4;
    if (has_border_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->border_color_);
    }

    // optional string column_minimum_width_string = 5;
    if (has_column_minimum_width_string()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->column_minimum_width_string());
    }

    // optional .mozc.renderer.RendererStyle.TextStyle footer_style = 8;
    if (has_footer_style()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->footer_style_);
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional .mozc.renderer.RendererStyle.TextStyle footer_sub_label_style = 9;
    if (has_footer_sub_label_style()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->footer_sub_label_style_);
    }

    // optional .mozc.renderer.RendererStyle.RGBAColor focused_background_color = 10;
    if (has_focused_background_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->focused_background_color_);
    }

    // optional .mozc.renderer.RendererStyle.RGBAColor focused_border_color = 11;
    if (has_focused_border_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->focused_border_color_);
    }

    // optional .mozc.renderer.RendererStyle.RGBAColor scrollbar_background_color = 12;
    if (has_scrollbar_background_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->scrollbar_background_color_);
    }

    // optional .mozc.renderer.RendererStyle.RGBAColor scrollbar_indicator_color = 13;
    if (has_scrollbar_indicator_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->scrollbar_indicator_color_);
    }

    // optional int32 scrollbar_width = 14;
    if (has_scrollbar_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->scrollbar_width());
    }

    // optional .mozc.renderer.RendererStyle.RGBAColor footer_top_color = 15;
    if (has_footer_top_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->footer_top_color_);
    }

    // optional .mozc.renderer.RendererStyle.RGBAColor footer_bottom_color = 16;
    if (has_footer_bottom_color()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->footer_bottom_color_);
    }

  }
  if (_has_bits_[16 / 32] & 196608u) {
    // optional string logo_file_name = 17;
    if (has_logo_file_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->logo_file_name());
    }

    // optional .mozc.renderer.RendererStyle.InfolistStyle infolist_style = 18;
    if (has_infolist_style()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->infolist_style_);
    }

  }
  // repeated .mozc.renderer.RendererStyle.TextStyle text_styles = 6;
  total_size += 1 * this->text_styles_size();
  for (int i = 0; i < this->text_styles_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->text_styles(i));
  }

  // repeated .mozc.renderer.RendererStyle.RGBAColor footer_border_colors = 7;
  total_size += 1 * this->footer_border_colors_size();
  for (int i = 0; i < this->footer_border_colors_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->footer_border_colors(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RendererStyle::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mozc.renderer.RendererStyle)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RendererStyle* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RendererStyle>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mozc.renderer.RendererStyle)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mozc.renderer.RendererStyle)
    MergeFrom(*source);
  }
}

void RendererStyle::MergeFrom(const RendererStyle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mozc.renderer.RendererStyle)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  text_styles_.MergeFrom(from.text_styles_);
  footer_border_colors_.MergeFrom(from.footer_border_colors_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_window_border()) {
      set_window_border(from.window_border());
    }
    if (from.has_footer_height()) {
      set_footer_height(from.footer_height());
    }
    if (from.has_row_rect_padding()) {
      set_row_rect_padding(from.row_rect_padding());
    }
    if (from.has_border_color()) {
      mutable_border_color()->::mozc::renderer::RendererStyle_RGBAColor::MergeFrom(from.border_color());
    }
    if (from.has_column_minimum_width_string()) {
      set_has_column_minimum_width_string();
      column_minimum_width_string_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.column_minimum_width_string_);
    }
    if (from.has_footer_style()) {
      mutable_footer_style()->::mozc::renderer::RendererStyle_TextStyle::MergeFrom(from.footer_style());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_footer_sub_label_style()) {
      mutable_footer_sub_label_style()->::mozc::renderer::RendererStyle_TextStyle::MergeFrom(from.footer_sub_label_style());
    }
    if (from.has_focused_background_color()) {
      mutable_focused_background_color()->::mozc::renderer::RendererStyle_RGBAColor::MergeFrom(from.focused_background_color());
    }
    if (from.has_focused_border_color()) {
      mutable_focused_border_color()->::mozc::renderer::RendererStyle_RGBAColor::MergeFrom(from.focused_border_color());
    }
    if (from.has_scrollbar_background_color()) {
      mutable_scrollbar_background_color()->::mozc::renderer::RendererStyle_RGBAColor::MergeFrom(from.scrollbar_background_color());
    }
    if (from.has_scrollbar_indicator_color()) {
      mutable_scrollbar_indicator_color()->::mozc::renderer::RendererStyle_RGBAColor::MergeFrom(from.scrollbar_indicator_color());
    }
    if (from.has_scrollbar_width()) {
      set_scrollbar_width(from.scrollbar_width());
    }
    if (from.has_footer_top_color()) {
      mutable_footer_top_color()->::mozc::renderer::RendererStyle_RGBAColor::MergeFrom(from.footer_top_color());
    }
    if (from.has_footer_bottom_color()) {
      mutable_footer_bottom_color()->::mozc::renderer::RendererStyle_RGBAColor::MergeFrom(from.footer_bottom_color());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_logo_file_name()) {
      set_has_logo_file_name();
      logo_file_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.logo_file_name_);
    }
    if (from.has_infolist_style()) {
      mutable_infolist_style()->::mozc::renderer::RendererStyle_InfolistStyle::MergeFrom(from.infolist_style());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void RendererStyle::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mozc.renderer.RendererStyle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RendererStyle::CopyFrom(const RendererStyle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mozc.renderer.RendererStyle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RendererStyle::IsInitialized() const {

  if (has_border_color()) {
    if (!this->border_color_->IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->text_styles())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->footer_border_colors())) return false;
  if (has_footer_style()) {
    if (!this->footer_style_->IsInitialized()) return false;
  }
  if (has_footer_sub_label_style()) {
    if (!this->footer_sub_label_style_->IsInitialized()) return false;
  }
  if (has_focused_background_color()) {
    if (!this->focused_background_color_->IsInitialized()) return false;
  }
  if (has_focused_border_color()) {
    if (!this->focused_border_color_->IsInitialized()) return false;
  }
  if (has_scrollbar_background_color()) {
    if (!this->scrollbar_background_color_->IsInitialized()) return false;
  }
  if (has_scrollbar_indicator_color()) {
    if (!this->scrollbar_indicator_color_->IsInitialized()) return false;
  }
  if (has_footer_top_color()) {
    if (!this->footer_top_color_->IsInitialized()) return false;
  }
  if (has_footer_bottom_color()) {
    if (!this->footer_bottom_color_->IsInitialized()) return false;
  }
  if (has_infolist_style()) {
    if (!this->infolist_style_->IsInitialized()) return false;
  }
  return true;
}

void RendererStyle::Swap(RendererStyle* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RendererStyle::InternalSwap(RendererStyle* other) {
  std::swap(window_border_, other->window_border_);
  std::swap(footer_height_, other->footer_height_);
  std::swap(row_rect_padding_, other->row_rect_padding_);
  std::swap(border_color_, other->border_color_);
  column_minimum_width_string_.Swap(&other->column_minimum_width_string_);
  text_styles_.UnsafeArenaSwap(&other->text_styles_);
  footer_border_colors_.UnsafeArenaSwap(&other->footer_border_colors_);
  std::swap(footer_style_, other->footer_style_);
  std::swap(footer_sub_label_style_, other->footer_sub_label_style_);
  std::swap(focused_background_color_, other->focused_background_color_);
  std::swap(focused_border_color_, other->focused_border_color_);
  std::swap(scrollbar_background_color_, other->scrollbar_background_color_);
  std::swap(scrollbar_indicator_color_, other->scrollbar_indicator_color_);
  std::swap(scrollbar_width_, other->scrollbar_width_);
  std::swap(footer_top_color_, other->footer_top_color_);
  std::swap(footer_bottom_color_, other->footer_bottom_color_);
  logo_file_name_.Swap(&other->logo_file_name_);
  std::swap(infolist_style_, other->infolist_style_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RendererStyle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RendererStyle_descriptor_;
  metadata.reflection = RendererStyle_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RendererStyle_RGBAColor

// required double r = 1 [default = 0];
bool RendererStyle_RGBAColor::has_r() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RendererStyle_RGBAColor::set_has_r() {
  _has_bits_[0] |= 0x00000001u;
}
void RendererStyle_RGBAColor::clear_has_r() {
  _has_bits_[0] &= ~0x00000001u;
}
void RendererStyle_RGBAColor::clear_r() {
  r_ = 0;
  clear_has_r();
}
 double RendererStyle_RGBAColor::r() const {
  // @@protoc_insertion_point(field_get:mozc.renderer.RendererStyle.RGBAColor.r)
  return r_;
}
 void RendererStyle_RGBAColor::set_r(double value) {
  set_has_r();
  r_ = value;
  // @@protoc_insertion_point(field_set:mozc.renderer.RendererStyle.RGBAColor.r)
}

// required double g = 2 [default = 0];
bool RendererStyle_RGBAColor::has_g() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RendererStyle_RGBAColor::set_has_g() {
  _has_bits_[0] |= 0x00000002u;
}
void RendererStyle_RGBAColor::clear_has_g() {
  _has_bits_[0] &= ~0x00000002u;
}
void RendererStyle_RGBAColor::clear_g() {
  g_ = 0;
  clear_has_g();
}
 double RendererStyle_RGBAColor::g() const {
  // @@protoc_insertion_point(field_get:mozc.renderer.RendererStyle.RGBAColor.g)
  return g_;
}
 void RendererStyle_RGBAColor::set_g(double value) {
  set_has_g();
  g_ = value;
  // @@protoc_insertion_point(field_set:mozc.renderer.RendererStyle.RGBAColor.g)
}

// required double b = 3 [default = 0];
bool RendererStyle_RGBAColor::has_b() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void RendererStyle_RGBAColor::set_has_b() {
  _has_bits_[0] |= 0x00000004u;
}
void RendererStyle_RGBAColor::clear_has_b() {
  _has_bits_[0] &= ~0x00000004u;
}
void RendererStyle_RGBAColor::clear_b() {
  b_ = 0;
  clear_has_b();
}
 double RendererStyle_RGBAColor::b() const {
  // @@protoc_insertion_point(field_get:mozc.renderer.RendererStyle.RGBAColor.b)
  return b_;
}
 void RendererStyle_RGBAColor::set_b(double value) {
  set_has_b();
  b_ = value;
  // @@protoc_insertion_point(field_set:mozc.renderer.RendererStyle.RGBAColor.b)
}

// optional double a = 4 [default = 1];
bool RendererStyle_RGBAColor::has_a() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void RendererStyle_RGBAColor::set_has_a() {
  _has_bits_[0] |= 0x00000008u;
}
void RendererStyle_RGBAColor::clear_has_a() {
  _has_bits_[0] &= ~0x00000008u;
}
void RendererStyle_RGBAColor::clear_a() {
  a_ = 1;
  clear_has_a();
}
 double RendererStyle_RGBAColor::a() const {
  // @@protoc_insertion_point(field_get:mozc.renderer.RendererStyle.RGBAColor.a)
  return a_;
}
 void RendererStyle_RGBAColor::set_a(double value) {
  set_has_a();
  a_ = value;
  // @@protoc_insertion_point(field_set:mozc.renderer.RendererStyle.RGBAColor.a)
}

// -------------------------------------------------------------------

// RendererStyle_TextStyle

// optional double font_size = 1;
bool RendererStyle_TextStyle::has_font_size() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RendererStyle_TextStyle::set_has_font_size() {
  _has_bits_[0] |= 0x00000001u;
}
void RendererStyle_TextStyle::clear_has_font_size() {
  _has_bits_[0] &= ~0x00000001u;
}
void RendererStyle_TextStyle::clear_font_size() {
  font_size_ = 0;
  clear_has_font_size();
}
 double RendererStyle_TextStyle::font_size() const {
  // @@protoc_insertion_point(field_get:mozc.renderer.RendererStyle.TextStyle.font_size)
  return font_size_;
}
 void RendererStyle_TextStyle::set_font_size(double value) {
  set_has_font_size();
  font_size_ = value;
  // @@protoc_insertion_point(field_set:mozc.renderer.RendererStyle.TextStyle.font_size)
}

// optional .mozc.renderer.RendererStyle.RGBAColor foreground_color = 2;
bool RendererStyle_TextStyle::has_foreground_color() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RendererStyle_TextStyle::set_has_foreground_color() {
  _has_bits_[0] |= 0x00000002u;
}
void RendererStyle_TextStyle::clear_has_foreground_color() {
  _has_bits_[0] &= ~0x00000002u;
}
void RendererStyle_TextStyle::clear_foreground_color() {
  if (foreground_color_ != NULL) foreground_color_->::mozc::renderer::RendererStyle_RGBAColor::Clear();
  clear_has_foreground_color();
}
const ::mozc::renderer::RendererStyle_RGBAColor& RendererStyle_TextStyle::foreground_color() const {
  // @@protoc_insertion_point(field_get:mozc.renderer.RendererStyle.TextStyle.foreground_color)
  return foreground_color_ != NULL ? *foreground_color_ : *default_instance_->foreground_color_;
}
::mozc::renderer::RendererStyle_RGBAColor* RendererStyle_TextStyle::mutable_foreground_color() {
  set_has_foreground_color();
  if (foreground_color_ == NULL) {
    foreground_color_ = new ::mozc::renderer::RendererStyle_RGBAColor;
  }
  // @@protoc_insertion_point(field_mutable:mozc.renderer.RendererStyle.TextStyle.foreground_color)
  return foreground_color_;
}
::mozc::renderer::RendererStyle_RGBAColor* RendererStyle_TextStyle::release_foreground_color() {
  // @@protoc_insertion_point(field_release:mozc.renderer.RendererStyle.TextStyle.foreground_color)
  clear_has_foreground_color();
  ::mozc::renderer::RendererStyle_RGBAColor* temp = foreground_color_;
  foreground_color_ = NULL;
  return temp;
}
void RendererStyle_TextStyle::set_allocated_foreground_color(::mozc::renderer::RendererStyle_RGBAColor* foreground_color) {
  delete foreground_color_;
  foreground_color_ = foreground_color;
  if (foreground_color) {
    set_has_foreground_color();
  } else {
    clear_has_foreground_color();
  }
  // @@protoc_insertion_point(field_set_allocated:mozc.renderer.RendererStyle.TextStyle.foreground_color)
}

// optional .mozc.renderer.RendererStyle.RGBAColor background_color = 3;
bool RendererStyle_TextStyle::has_background_color() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void RendererStyle_TextStyle::set_has_background_color() {
  _has_bits_[0] |= 0x00000004u;
}
void RendererStyle_TextStyle::clear_has_background_color() {
  _has_bits_[0] &= ~0x00000004u;
}
void RendererStyle_TextStyle::clear_background_color() {
  if (background_color_ != NULL) background_color_->::mozc::renderer::RendererStyle_RGBAColor::Clear();
  clear_has_background_color();
}
const ::mozc::renderer::RendererStyle_RGBAColor& RendererStyle_TextStyle::background_color() const {
  // @@protoc_insertion_point(field_get:mozc.renderer.RendererStyle.TextStyle.background_color)
  return background_color_ != NULL ? *background_color_ : *default_instance_->background_color_;
}
::mozc::renderer::RendererStyle_RGBAColor* RendererStyle_TextStyle::mutable_background_color() {
  set_has_background_color();
  if (background_color_ == NULL) {
    background_color_ = new ::mozc::renderer::RendererStyle_RGBAColor;
  }
  // @@protoc_insertion_point(field_mutable:mozc.renderer.RendererStyle.TextStyle.background_color)
  return background_color_;
}
::mozc::renderer::RendererStyle_RGBAColor* RendererStyle_TextStyle::release_background_color() {
  // @@protoc_insertion_point(field_release:mozc.renderer.RendererStyle.TextStyle.background_color)
  clear_has_background_color();
  ::mozc::renderer::RendererStyle_RGBAColor* temp = background_color_;
  background_color_ = NULL;
  return temp;
}
void RendererStyle_TextStyle::set_allocated_background_color(::mozc::renderer::RendererStyle_RGBAColor* background_color) {
  delete background_color_;
  background_color_ = background_color;
  if (background_color) {
    set_has_background_color();
  } else {
    clear_has_background_color();
  }
  // @@protoc_insertion_point(field_set_allocated:mozc.renderer.RendererStyle.TextStyle.background_color)
}

// optional int32 left_padding = 4 [default = 0];
bool RendererStyle_TextStyle::has_left_padding() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void RendererStyle_TextStyle::set_has_left_padding() {
  _has_bits_[0] |= 0x00000008u;
}
void RendererStyle_TextStyle::clear_has_left_padding() {
  _has_bits_[0] &= ~0x00000008u;
}
void RendererStyle_TextStyle::clear_left_padding() {
  left_padding_ = 0;
  clear_has_left_padding();
}
 ::google::protobuf::int32 RendererStyle_TextStyle::left_padding() const {
  // @@protoc_insertion_point(field_get:mozc.renderer.RendererStyle.TextStyle.left_padding)
  return left_padding_;
}
 void RendererStyle_TextStyle::set_left_padding(::google::protobuf::int32 value) {
  set_has_left_padding();
  left_padding_ = value;
  // @@protoc_insertion_point(field_set:mozc.renderer.RendererStyle.TextStyle.left_padding)
}

// optional int32 right_padding = 5 [default = 0];
bool RendererStyle_TextStyle::has_right_padding() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void RendererStyle_TextStyle::set_has_right_padding() {
  _has_bits_[0] |= 0x00000010u;
}
void RendererStyle_TextStyle::clear_has_right_padding() {
  _has_bits_[0] &= ~0x00000010u;
}
void RendererStyle_TextStyle::clear_right_padding() {
  right_padding_ = 0;
  clear_has_right_padding();
}
 ::google::protobuf::int32 RendererStyle_TextStyle::right_padding() const {
  // @@protoc_insertion_point(field_get:mozc.renderer.RendererStyle.TextStyle.right_padding)
  return right_padding_;
}
 void RendererStyle_TextStyle::set_right_padding(::google::protobuf::int32 value) {
  set_has_right_padding();
  right_padding_ = value;
  // @@protoc_insertion_point(field_set:mozc.renderer.RendererStyle.TextStyle.right_padding)
}

// optional string font_name = 6;
bool RendererStyle_TextStyle::has_font_name() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void RendererStyle_TextStyle::set_has_font_name() {
  _has_bits_[0] |= 0x00000020u;
}
void RendererStyle_TextStyle::clear_has_font_name() {
  _has_bits_[0] &= ~0x00000020u;
}
void RendererStyle_TextStyle::clear_font_name() {
  font_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_font_name();
}
 const ::std::string& RendererStyle_TextStyle::font_name() const {
  // @@protoc_insertion_point(field_get:mozc.renderer.RendererStyle.TextStyle.font_name)
  return font_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RendererStyle_TextStyle::set_font_name(const ::std::string& value) {
  set_has_font_name();
  font_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mozc.renderer.RendererStyle.TextStyle.font_name)
}
 void RendererStyle_TextStyle::set_font_name(const char* value) {
  set_has_font_name();
  font_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mozc.renderer.RendererStyle.TextStyle.font_name)
}
 void RendererStyle_TextStyle::set_font_name(const char* value, size_t size) {
  set_has_font_name();
  font_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mozc.renderer.RendererStyle.TextStyle.font_name)
}
 ::std::string* RendererStyle_TextStyle::mutable_font_name() {
  set_has_font_name();
  // @@protoc_insertion_point(field_mutable:mozc.renderer.RendererStyle.TextStyle.font_name)
  return font_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RendererStyle_TextStyle::release_font_name() {
  // @@protoc_insertion_point(field_release:mozc.renderer.RendererStyle.TextStyle.font_name)
  clear_has_font_name();
  return font_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RendererStyle_TextStyle::set_allocated_font_name(::std::string* font_name) {
  if (font_name != NULL) {
    set_has_font_name();
  } else {
    clear_has_font_name();
  }
  font_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), font_name);
  // @@protoc_insertion_point(field_set_allocated:mozc.renderer.RendererStyle.TextStyle.font_name)
}

// -------------------------------------------------------------------

// RendererStyle_InfolistStyle

// optional string caption_string = 1;
bool RendererStyle_InfolistStyle::has_caption_string() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RendererStyle_InfolistStyle::set_has_caption_string() {
  _has_bits_[0] |= 0x00000001u;
}
void RendererStyle_InfolistStyle::clear_has_caption_string() {
  _has_bits_[0] &= ~0x00000001u;
}
void RendererStyle_InfolistStyle::clear_caption_string() {
  caption_string_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_caption_string();
}
 const ::std::string& RendererStyle_InfolistStyle::caption_string() const {
  // @@protoc_insertion_point(field_get:mozc.renderer.RendererStyle.InfolistStyle.caption_string)
  return caption_string_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RendererStyle_InfolistStyle::set_caption_string(const ::std::string& value) {
  set_has_caption_string();
  caption_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mozc.renderer.RendererStyle.InfolistStyle.caption_string)
}
 void RendererStyle_InfolistStyle::set_caption_string(const char* value) {
  set_has_caption_string();
  caption_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mozc.renderer.RendererStyle.InfolistStyle.caption_string)
}
 void RendererStyle_InfolistStyle::set_caption_string(const char* value, size_t size) {
  set_has_caption_string();
  caption_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mozc.renderer.RendererStyle.InfolistStyle.caption_string)
}
 ::std::string* RendererStyle_InfolistStyle::mutable_caption_string() {
  set_has_caption_string();
  // @@protoc_insertion_point(field_mutable:mozc.renderer.RendererStyle.InfolistStyle.caption_string)
  return caption_string_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RendererStyle_InfolistStyle::release_caption_string() {
  // @@protoc_insertion_point(field_release:mozc.renderer.RendererStyle.InfolistStyle.caption_string)
  clear_has_caption_string();
  return caption_string_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RendererStyle_InfolistStyle::set_allocated_caption_string(::std::string* caption_string) {
  if (caption_string != NULL) {
    set_has_caption_string();
  } else {
    clear_has_caption_string();
  }
  caption_string_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), caption_string);
  // @@protoc_insertion_point(field_set_allocated:mozc.renderer.RendererStyle.InfolistStyle.caption_string)
}

// optional int32 caption_height = 2;
bool RendererStyle_InfolistStyle::has_caption_height() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RendererStyle_InfolistStyle::set_has_caption_height() {
  _has_bits_[0] |= 0x00000002u;
}
void RendererStyle_InfolistStyle::clear_has_caption_height() {
  _has_bits_[0] &= ~0x00000002u;
}
void RendererStyle_InfolistStyle::clear_caption_height() {
  caption_height_ = 0;
  clear_has_caption_height();
}
 ::google::protobuf::int32 RendererStyle_InfolistStyle::caption_height() const {
  // @@protoc_insertion_point(field_get:mozc.renderer.RendererStyle.InfolistStyle.caption_height)
  return caption_height_;
}
 void RendererStyle_InfolistStyle::set_caption_height(::google::protobuf::int32 value) {
  set_has_caption_height();
  caption_height_ = value;
  // @@protoc_insertion_point(field_set:mozc.renderer.RendererStyle.InfolistStyle.caption_height)
}

// optional int32 caption_padding = 3;
bool RendererStyle_InfolistStyle::has_caption_padding() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void RendererStyle_InfolistStyle::set_has_caption_padding() {
  _has_bits_[0] |= 0x00000004u;
}
void RendererStyle_InfolistStyle::clear_has_caption_padding() {
  _has_bits_[0] &= ~0x00000004u;
}
void RendererStyle_InfolistStyle::clear_caption_padding() {
  caption_padding_ = 0;
  clear_has_caption_padding();
}
 ::google::protobuf::int32 RendererStyle_InfolistStyle::caption_padding() const {
  // @@protoc_insertion_point(field_get:mozc.renderer.RendererStyle.InfolistStyle.caption_padding)
  return caption_padding_;
}
 void RendererStyle_InfolistStyle::set_caption_padding(::google::protobuf::int32 value) {
  set_has_caption_padding();
  caption_padding_ = value;
  // @@protoc_insertion_point(field_set:mozc.renderer.RendererStyle.InfolistStyle.caption_padding)
}

// optional int32 window_border = 4;
bool RendererStyle_InfolistStyle::has_window_border() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void RendererStyle_InfolistStyle::set_has_window_border() {
  _has_bits_[0] |= 0x00000008u;
}
void RendererStyle_InfolistStyle::clear_has_window_border() {
  _has_bits_[0] &= ~0x00000008u;
}
void RendererStyle_InfolistStyle::clear_window_border() {
  window_border_ = 0;
  clear_has_window_border();
}
 ::google::protobuf::int32 RendererStyle_InfolistStyle::window_border() const {
  // @@protoc_insertion_point(field_get:mozc.renderer.RendererStyle.InfolistStyle.window_border)
  return window_border_;
}
 void RendererStyle_InfolistStyle::set_window_border(::google::protobuf::int32 value) {
  set_has_window_border();
  window_border_ = value;
  // @@protoc_insertion_point(field_set:mozc.renderer.RendererStyle.InfolistStyle.window_border)
}

// optional int32 row_rect_padding = 5;
bool RendererStyle_InfolistStyle::has_row_rect_padding() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void RendererStyle_InfolistStyle::set_has_row_rect_padding() {
  _has_bits_[0] |= 0x00000010u;
}
void RendererStyle_InfolistStyle::clear_has_row_rect_padding() {
  _has_bits_[0] &= ~0x00000010u;
}
void RendererStyle_InfolistStyle::clear_row_rect_padding() {
  row_rect_padding_ = 0;
  clear_has_row_rect_padding();
}
 ::google::protobuf::int32 RendererStyle_InfolistStyle::row_rect_padding() const {
  // @@protoc_insertion_point(field_get:mozc.renderer.RendererStyle.InfolistStyle.row_rect_padding)
  return row_rect_padding_;
}
 void RendererStyle_InfolistStyle::set_row_rect_padding(::google::protobuf::int32 value) {
  set_has_row_rect_padding();
  row_rect_padding_ = value;
  // @@protoc_insertion_point(field_set:mozc.renderer.RendererStyle.InfolistStyle.row_rect_padding)
}

// optional int32 window_width = 6;
bool RendererStyle_InfolistStyle::has_window_width() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void RendererStyle_InfolistStyle::set_has_window_width() {
  _has_bits_[0] |= 0x00000020u;
}
void RendererStyle_InfolistStyle::clear_has_window_width() {
  _has_bits_[0] &= ~0x00000020u;
}
void RendererStyle_InfolistStyle::clear_window_width() {
  window_width_ = 0;
  clear_has_window_width();
}
 ::google::protobuf::int32 RendererStyle_InfolistStyle::window_width() const {
  // @@protoc_insertion_point(field_get:mozc.renderer.RendererStyle.InfolistStyle.window_width)
  return window_width_;
}
 void RendererStyle_InfolistStyle::set_window_width(::google::protobuf::int32 value) {
  set_has_window_width();
  window_width_ = value;
  // @@protoc_insertion_point(field_set:mozc.renderer.RendererStyle.InfolistStyle.window_width)
}

// optional .mozc.renderer.RendererStyle.TextStyle caption_style = 7;
bool RendererStyle_InfolistStyle::has_caption_style() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void RendererStyle_InfolistStyle::set_has_caption_style() {
  _has_bits_[0] |= 0x00000040u;
}
void RendererStyle_InfolistStyle::clear_has_caption_style() {
  _has_bits_[0] &= ~0x00000040u;
}
void RendererStyle_InfolistStyle::clear_caption_style() {
  if (caption_style_ != NULL) caption_style_->::mozc::renderer::RendererStyle_TextStyle::Clear();
  clear_has_caption_style();
}
const ::mozc::renderer::RendererStyle_TextStyle& RendererStyle_InfolistStyle::caption_style() const {
  // @@protoc_insertion_point(field_get:mozc.renderer.RendererStyle.InfolistStyle.caption_style)
  return caption_style_ != NULL ? *caption_style_ : *default_instance_->caption_style_;
}
::mozc::renderer::RendererStyle_TextStyle* RendererStyle_InfolistStyle::mutable_caption_style() {
  set_has_caption_style();
  if (caption_style_ == NULL) {
    caption_style_ = new ::mozc::renderer::RendererStyle_TextStyle;
  }
  // @@protoc_insertion_point(field_mutable:mozc.renderer.RendererStyle.InfolistStyle.caption_style)
  return caption_style_;
}
::mozc::renderer::RendererStyle_TextStyle* RendererStyle_InfolistStyle::release_caption_style() {
  // @@protoc_insertion_point(field_release:mozc.renderer.RendererStyle.InfolistStyle.caption_style)
  clear_has_caption_style();
  ::mozc::renderer::RendererStyle_TextStyle* temp = caption_style_;
  caption_style_ = NULL;
  return temp;
}
void RendererStyle_InfolistStyle::set_allocated_caption_style(::mozc::renderer::RendererStyle_TextStyle* caption_style) {
  delete caption_style_;
  caption_style_ = caption_style;
  if (caption_style) {
    set_has_caption_style();
  } else {
    clear_has_caption_style();
  }
  // @@protoc_insertion_point(field_set_allocated:mozc.renderer.RendererStyle.InfolistStyle.caption_style)
}

// optional .mozc.renderer.RendererStyle.TextStyle title_style = 8;
bool RendererStyle_InfolistStyle::has_title_style() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void RendererStyle_InfolistStyle::set_has_title_style() {
  _has_bits_[0] |= 0x00000080u;
}
void RendererStyle_InfolistStyle::clear_has_title_style() {
  _has_bits_[0] &= ~0x00000080u;
}
void RendererStyle_InfolistStyle::clear_title_style() {
  if (title_style_ != NULL) title_style_->::mozc::renderer::RendererStyle_TextStyle::Clear();
  clear_has_title_style();
}
const ::mozc::renderer::RendererStyle_TextStyle& RendererStyle_InfolistStyle::title_style() const {
  // @@protoc_insertion_point(field_get:mozc.renderer.RendererStyle.InfolistStyle.title_style)
  return title_style_ != NULL ? *title_style_ : *default_instance_->title_style_;
}
::mozc::renderer::RendererStyle_TextStyle* RendererStyle_InfolistStyle::mutable_title_style() {
  set_has_title_style();
  if (title_style_ == NULL) {
    title_style_ = new ::mozc::renderer::RendererStyle_TextStyle;
  }
  // @@protoc_insertion_point(field_mutable:mozc.renderer.RendererStyle.InfolistStyle.title_style)
  return title_style_;
}
::mozc::renderer::RendererStyle_TextStyle* RendererStyle_InfolistStyle::release_title_style() {
  // @@protoc_insertion_point(field_release:mozc.renderer.RendererStyle.InfolistStyle.title_style)
  clear_has_title_style();
  ::mozc::renderer::RendererStyle_TextStyle* temp = title_style_;
  title_style_ = NULL;
  return temp;
}
void RendererStyle_InfolistStyle::set_allocated_title_style(::mozc::renderer::RendererStyle_TextStyle* title_style) {
  delete title_style_;
  title_style_ = title_style;
  if (title_style) {
    set_has_title_style();
  } else {
    clear_has_title_style();
  }
  // @@protoc_insertion_point(field_set_allocated:mozc.renderer.RendererStyle.InfolistStyle.title_style)
}

// optional .mozc.renderer.RendererStyle.TextStyle description_style = 9;
bool RendererStyle_InfolistStyle::has_description_style() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void RendererStyle_InfolistStyle::set_has_description_style() {
  _has_bits_[0] |= 0x00000100u;
}
void RendererStyle_InfolistStyle::clear_has_description_style() {
  _has_bits_[0] &= ~0x00000100u;
}
void RendererStyle_InfolistStyle::clear_description_style() {
  if (description_style_ != NULL) description_style_->::mozc::renderer::RendererStyle_TextStyle::Clear();
  clear_has_description_style();
}
const ::mozc::renderer::RendererStyle_TextStyle& RendererStyle_InfolistStyle::description_style() const {
  // @@protoc_insertion_point(field_get:mozc.renderer.RendererStyle.InfolistStyle.description_style)
  return description_style_ != NULL ? *description_style_ : *default_instance_->description_style_;
}
::mozc::renderer::RendererStyle_TextStyle* RendererStyle_InfolistStyle::mutable_description_style() {
  set_has_description_style();
  if (description_style_ == NULL) {
    description_style_ = new ::mozc::renderer::RendererStyle_TextStyle;
  }
  // @@protoc_insertion_point(field_mutable:mozc.renderer.RendererStyle.InfolistStyle.description_style)
  return description_style_;
}
::mozc::renderer::RendererStyle_TextStyle* RendererStyle_InfolistStyle::release_description_style() {
  // @@protoc_insertion_point(field_release:mozc.renderer.RendererStyle.InfolistStyle.description_style)
  clear_has_description_style();
  ::mozc::renderer::RendererStyle_TextStyle* temp = description_style_;
  description_style_ = NULL;
  return temp;
}
void RendererStyle_InfolistStyle::set_allocated_description_style(::mozc::renderer::RendererStyle_TextStyle* description_style) {
  delete description_style_;
  description_style_ = description_style;
  if (description_style) {
    set_has_description_style();
  } else {
    clear_has_description_style();
  }
  // @@protoc_insertion_point(field_set_allocated:mozc.renderer.RendererStyle.InfolistStyle.description_style)
}

// optional .mozc.renderer.RendererStyle.RGBAColor border_color = 10;
bool RendererStyle_InfolistStyle::has_border_color() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void RendererStyle_InfolistStyle::set_has_border_color() {
  _has_bits_[0] |= 0x00000200u;
}
void RendererStyle_InfolistStyle::clear_has_border_color() {
  _has_bits_[0] &= ~0x00000200u;
}
void RendererStyle_InfolistStyle::clear_border_color() {
  if (border_color_ != NULL) border_color_->::mozc::renderer::RendererStyle_RGBAColor::Clear();
  clear_has_border_color();
}
const ::mozc::renderer::RendererStyle_RGBAColor& RendererStyle_InfolistStyle::border_color() const {
  // @@protoc_insertion_point(field_get:mozc.renderer.RendererStyle.InfolistStyle.border_color)
  return border_color_ != NULL ? *border_color_ : *default_instance_->border_color_;
}
::mozc::renderer::RendererStyle_RGBAColor* RendererStyle_InfolistStyle::mutable_border_color() {
  set_has_border_color();
  if (border_color_ == NULL) {
    border_color_ = new ::mozc::renderer::RendererStyle_RGBAColor;
  }
  // @@protoc_insertion_point(field_mutable:mozc.renderer.RendererStyle.InfolistStyle.border_color)
  return border_color_;
}
::mozc::renderer::RendererStyle_RGBAColor* RendererStyle_InfolistStyle::release_border_color() {
  // @@protoc_insertion_point(field_release:mozc.renderer.RendererStyle.InfolistStyle.border_color)
  clear_has_border_color();
  ::mozc::renderer::RendererStyle_RGBAColor* temp = border_color_;
  border_color_ = NULL;
  return temp;
}
void RendererStyle_InfolistStyle::set_allocated_border_color(::mozc::renderer::RendererStyle_RGBAColor* border_color) {
  delete border_color_;
  border_color_ = border_color;
  if (border_color) {
    set_has_border_color();
  } else {
    clear_has_border_color();
  }
  // @@protoc_insertion_point(field_set_allocated:mozc.renderer.RendererStyle.InfolistStyle.border_color)
}

// optional .mozc.renderer.RendererStyle.RGBAColor caption_background_color = 11;
bool RendererStyle_InfolistStyle::has_caption_background_color() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void RendererStyle_InfolistStyle::set_has_caption_background_color() {
  _has_bits_[0] |= 0x00000400u;
}
void RendererStyle_InfolistStyle::clear_has_caption_background_color() {
  _has_bits_[0] &= ~0x00000400u;
}
void RendererStyle_InfolistStyle::clear_caption_background_color() {
  if (caption_background_color_ != NULL) caption_background_color_->::mozc::renderer::RendererStyle_RGBAColor::Clear();
  clear_has_caption_background_color();
}
const ::mozc::renderer::RendererStyle_RGBAColor& RendererStyle_InfolistStyle::caption_background_color() const {
  // @@protoc_insertion_point(field_get:mozc.renderer.RendererStyle.InfolistStyle.caption_background_color)
  return caption_background_color_ != NULL ? *caption_background_color_ : *default_instance_->caption_background_color_;
}
::mozc::renderer::RendererStyle_RGBAColor* RendererStyle_InfolistStyle::mutable_caption_background_color() {
  set_has_caption_background_color();
  if (caption_background_color_ == NULL) {
    caption_background_color_ = new ::mozc::renderer::RendererStyle_RGBAColor;
  }
  // @@protoc_insertion_point(field_mutable:mozc.renderer.RendererStyle.InfolistStyle.caption_background_color)
  return caption_background_color_;
}
::mozc::renderer::RendererStyle_RGBAColor* RendererStyle_InfolistStyle::release_caption_background_color() {
  // @@protoc_insertion_point(field_release:mozc.renderer.RendererStyle.InfolistStyle.caption_background_color)
  clear_has_caption_background_color();
  ::mozc::renderer::RendererStyle_RGBAColor* temp = caption_background_color_;
  caption_background_color_ = NULL;
  return temp;
}
void RendererStyle_InfolistStyle::set_allocated_caption_background_color(::mozc::renderer::RendererStyle_RGBAColor* caption_background_color) {
  delete caption_background_color_;
  caption_background_color_ = caption_background_color;
  if (caption_background_color) {
    set_has_caption_background_color();
  } else {
    clear_has_caption_background_color();
  }
  // @@protoc_insertion_point(field_set_allocated:mozc.renderer.RendererStyle.InfolistStyle.caption_background_color)
}

// optional .mozc.renderer.RendererStyle.RGBAColor focused_background_color = 12;
bool RendererStyle_InfolistStyle::has_focused_background_color() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void RendererStyle_InfolistStyle::set_has_focused_background_color() {
  _has_bits_[0] |= 0x00000800u;
}
void RendererStyle_InfolistStyle::clear_has_focused_background_color() {
  _has_bits_[0] &= ~0x00000800u;
}
void RendererStyle_InfolistStyle::clear_focused_background_color() {
  if (focused_background_color_ != NULL) focused_background_color_->::mozc::renderer::RendererStyle_RGBAColor::Clear();
  clear_has_focused_background_color();
}
const ::mozc::renderer::RendererStyle_RGBAColor& RendererStyle_InfolistStyle::focused_background_color() const {
  // @@protoc_insertion_point(field_get:mozc.renderer.RendererStyle.InfolistStyle.focused_background_color)
  return focused_background_color_ != NULL ? *focused_background_color_ : *default_instance_->focused_background_color_;
}
::mozc::renderer::RendererStyle_RGBAColor* RendererStyle_InfolistStyle::mutable_focused_background_color() {
  set_has_focused_background_color();
  if (focused_background_color_ == NULL) {
    focused_background_color_ = new ::mozc::renderer::RendererStyle_RGBAColor;
  }
  // @@protoc_insertion_point(field_mutable:mozc.renderer.RendererStyle.InfolistStyle.focused_background_color)
  return focused_background_color_;
}
::mozc::renderer::RendererStyle_RGBAColor* RendererStyle_InfolistStyle::release_focused_background_color() {
  // @@protoc_insertion_point(field_release:mozc.renderer.RendererStyle.InfolistStyle.focused_background_color)
  clear_has_focused_background_color();
  ::mozc::renderer::RendererStyle_RGBAColor* temp = focused_background_color_;
  focused_background_color_ = NULL;
  return temp;
}
void RendererStyle_InfolistStyle::set_allocated_focused_background_color(::mozc::renderer::RendererStyle_RGBAColor* focused_background_color) {
  delete focused_background_color_;
  focused_background_color_ = focused_background_color;
  if (focused_background_color) {
    set_has_focused_background_color();
  } else {
    clear_has_focused_background_color();
  }
  // @@protoc_insertion_point(field_set_allocated:mozc.renderer.RendererStyle.InfolistStyle.focused_background_color)
}

// optional .mozc.renderer.RendererStyle.RGBAColor focused_border_color = 13;
bool RendererStyle_InfolistStyle::has_focused_border_color() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void RendererStyle_InfolistStyle::set_has_focused_border_color() {
  _has_bits_[0] |= 0x00001000u;
}
void RendererStyle_InfolistStyle::clear_has_focused_border_color() {
  _has_bits_[0] &= ~0x00001000u;
}
void RendererStyle_InfolistStyle::clear_focused_border_color() {
  if (focused_border_color_ != NULL) focused_border_color_->::mozc::renderer::RendererStyle_RGBAColor::Clear();
  clear_has_focused_border_color();
}
const ::mozc::renderer::RendererStyle_RGBAColor& RendererStyle_InfolistStyle::focused_border_color() const {
  // @@protoc_insertion_point(field_get:mozc.renderer.RendererStyle.InfolistStyle.focused_border_color)
  return focused_border_color_ != NULL ? *focused_border_color_ : *default_instance_->focused_border_color_;
}
::mozc::renderer::RendererStyle_RGBAColor* RendererStyle_InfolistStyle::mutable_focused_border_color() {
  set_has_focused_border_color();
  if (focused_border_color_ == NULL) {
    focused_border_color_ = new ::mozc::renderer::RendererStyle_RGBAColor;
  }
  // @@protoc_insertion_point(field_mutable:mozc.renderer.RendererStyle.InfolistStyle.focused_border_color)
  return focused_border_color_;
}
::mozc::renderer::RendererStyle_RGBAColor* RendererStyle_InfolistStyle::release_focused_border_color() {
  // @@protoc_insertion_point(field_release:mozc.renderer.RendererStyle.InfolistStyle.focused_border_color)
  clear_has_focused_border_color();
  ::mozc::renderer::RendererStyle_RGBAColor* temp = focused_border_color_;
  focused_border_color_ = NULL;
  return temp;
}
void RendererStyle_InfolistStyle::set_allocated_focused_border_color(::mozc::renderer::RendererStyle_RGBAColor* focused_border_color) {
  delete focused_border_color_;
  focused_border_color_ = focused_border_color;
  if (focused_border_color) {
    set_has_focused_border_color();
  } else {
    clear_has_focused_border_color();
  }
  // @@protoc_insertion_point(field_set_allocated:mozc.renderer.RendererStyle.InfolistStyle.focused_border_color)
}

// -------------------------------------------------------------------

// RendererStyle

// optional int32 window_border = 1;
bool RendererStyle::has_window_border() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RendererStyle::set_has_window_border() {
  _has_bits_[0] |= 0x00000001u;
}
void RendererStyle::clear_has_window_border() {
  _has_bits_[0] &= ~0x00000001u;
}
void RendererStyle::clear_window_border() {
  window_border_ = 0;
  clear_has_window_border();
}
 ::google::protobuf::int32 RendererStyle::window_border() const {
  // @@protoc_insertion_point(field_get:mozc.renderer.RendererStyle.window_border)
  return window_border_;
}
 void RendererStyle::set_window_border(::google::protobuf::int32 value) {
  set_has_window_border();
  window_border_ = value;
  // @@protoc_insertion_point(field_set:mozc.renderer.RendererStyle.window_border)
}

// optional int32 footer_height = 2;
bool RendererStyle::has_footer_height() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RendererStyle::set_has_footer_height() {
  _has_bits_[0] |= 0x00000002u;
}
void RendererStyle::clear_has_footer_height() {
  _has_bits_[0] &= ~0x00000002u;
}
void RendererStyle::clear_footer_height() {
  footer_height_ = 0;
  clear_has_footer_height();
}
 ::google::protobuf::int32 RendererStyle::footer_height() const {
  // @@protoc_insertion_point(field_get:mozc.renderer.RendererStyle.footer_height)
  return footer_height_;
}
 void RendererStyle::set_footer_height(::google::protobuf::int32 value) {
  set_has_footer_height();
  footer_height_ = value;
  // @@protoc_insertion_point(field_set:mozc.renderer.RendererStyle.footer_height)
}

// optional int32 row_rect_padding = 3;
bool RendererStyle::has_row_rect_padding() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void RendererStyle::set_has_row_rect_padding() {
  _has_bits_[0] |= 0x00000004u;
}
void RendererStyle::clear_has_row_rect_padding() {
  _has_bits_[0] &= ~0x00000004u;
}
void RendererStyle::clear_row_rect_padding() {
  row_rect_padding_ = 0;
  clear_has_row_rect_padding();
}
 ::google::protobuf::int32 RendererStyle::row_rect_padding() const {
  // @@protoc_insertion_point(field_get:mozc.renderer.RendererStyle.row_rect_padding)
  return row_rect_padding_;
}
 void RendererStyle::set_row_rect_padding(::google::protobuf::int32 value) {
  set_has_row_rect_padding();
  row_rect_padding_ = value;
  // @@protoc_insertion_point(field_set:mozc.renderer.RendererStyle.row_rect_padding)
}

// optional .mozc.renderer.RendererStyle.RGBAColor border_color = 4;
bool RendererStyle::has_border_color() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void RendererStyle::set_has_border_color() {
  _has_bits_[0] |= 0x00000008u;
}
void RendererStyle::clear_has_border_color() {
  _has_bits_[0] &= ~0x00000008u;
}
void RendererStyle::clear_border_color() {
  if (border_color_ != NULL) border_color_->::mozc::renderer::RendererStyle_RGBAColor::Clear();
  clear_has_border_color();
}
const ::mozc::renderer::RendererStyle_RGBAColor& RendererStyle::border_color() const {
  // @@protoc_insertion_point(field_get:mozc.renderer.RendererStyle.border_color)
  return border_color_ != NULL ? *border_color_ : *default_instance_->border_color_;
}
::mozc::renderer::RendererStyle_RGBAColor* RendererStyle::mutable_border_color() {
  set_has_border_color();
  if (border_color_ == NULL) {
    border_color_ = new ::mozc::renderer::RendererStyle_RGBAColor;
  }
  // @@protoc_insertion_point(field_mutable:mozc.renderer.RendererStyle.border_color)
  return border_color_;
}
::mozc::renderer::RendererStyle_RGBAColor* RendererStyle::release_border_color() {
  // @@protoc_insertion_point(field_release:mozc.renderer.RendererStyle.border_color)
  clear_has_border_color();
  ::mozc::renderer::RendererStyle_RGBAColor* temp = border_color_;
  border_color_ = NULL;
  return temp;
}
void RendererStyle::set_allocated_border_color(::mozc::renderer::RendererStyle_RGBAColor* border_color) {
  delete border_color_;
  border_color_ = border_color;
  if (border_color) {
    set_has_border_color();
  } else {
    clear_has_border_color();
  }
  // @@protoc_insertion_point(field_set_allocated:mozc.renderer.RendererStyle.border_color)
}

// optional string column_minimum_width_string = 5;
bool RendererStyle::has_column_minimum_width_string() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void RendererStyle::set_has_column_minimum_width_string() {
  _has_bits_[0] |= 0x00000010u;
}
void RendererStyle::clear_has_column_minimum_width_string() {
  _has_bits_[0] &= ~0x00000010u;
}
void RendererStyle::clear_column_minimum_width_string() {
  column_minimum_width_string_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_column_minimum_width_string();
}
 const ::std::string& RendererStyle::column_minimum_width_string() const {
  // @@protoc_insertion_point(field_get:mozc.renderer.RendererStyle.column_minimum_width_string)
  return column_minimum_width_string_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RendererStyle::set_column_minimum_width_string(const ::std::string& value) {
  set_has_column_minimum_width_string();
  column_minimum_width_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mozc.renderer.RendererStyle.column_minimum_width_string)
}
 void RendererStyle::set_column_minimum_width_string(const char* value) {
  set_has_column_minimum_width_string();
  column_minimum_width_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mozc.renderer.RendererStyle.column_minimum_width_string)
}
 void RendererStyle::set_column_minimum_width_string(const char* value, size_t size) {
  set_has_column_minimum_width_string();
  column_minimum_width_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mozc.renderer.RendererStyle.column_minimum_width_string)
}
 ::std::string* RendererStyle::mutable_column_minimum_width_string() {
  set_has_column_minimum_width_string();
  // @@protoc_insertion_point(field_mutable:mozc.renderer.RendererStyle.column_minimum_width_string)
  return column_minimum_width_string_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RendererStyle::release_column_minimum_width_string() {
  // @@protoc_insertion_point(field_release:mozc.renderer.RendererStyle.column_minimum_width_string)
  clear_has_column_minimum_width_string();
  return column_minimum_width_string_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RendererStyle::set_allocated_column_minimum_width_string(::std::string* column_minimum_width_string) {
  if (column_minimum_width_string != NULL) {
    set_has_column_minimum_width_string();
  } else {
    clear_has_column_minimum_width_string();
  }
  column_minimum_width_string_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), column_minimum_width_string);
  // @@protoc_insertion_point(field_set_allocated:mozc.renderer.RendererStyle.column_minimum_width_string)
}

// repeated .mozc.renderer.RendererStyle.TextStyle text_styles = 6;
int RendererStyle::text_styles_size() const {
  return text_styles_.size();
}
void RendererStyle::clear_text_styles() {
  text_styles_.Clear();
}
const ::mozc::renderer::RendererStyle_TextStyle& RendererStyle::text_styles(int index) const {
  // @@protoc_insertion_point(field_get:mozc.renderer.RendererStyle.text_styles)
  return text_styles_.Get(index);
}
::mozc::renderer::RendererStyle_TextStyle* RendererStyle::mutable_text_styles(int index) {
  // @@protoc_insertion_point(field_mutable:mozc.renderer.RendererStyle.text_styles)
  return text_styles_.Mutable(index);
}
::mozc::renderer::RendererStyle_TextStyle* RendererStyle::add_text_styles() {
  // @@protoc_insertion_point(field_add:mozc.renderer.RendererStyle.text_styles)
  return text_styles_.Add();
}
::google::protobuf::RepeatedPtrField< ::mozc::renderer::RendererStyle_TextStyle >*
RendererStyle::mutable_text_styles() {
  // @@protoc_insertion_point(field_mutable_list:mozc.renderer.RendererStyle.text_styles)
  return &text_styles_;
}
const ::google::protobuf::RepeatedPtrField< ::mozc::renderer::RendererStyle_TextStyle >&
RendererStyle::text_styles() const {
  // @@protoc_insertion_point(field_list:mozc.renderer.RendererStyle.text_styles)
  return text_styles_;
}

// repeated .mozc.renderer.RendererStyle.RGBAColor footer_border_colors = 7;
int RendererStyle::footer_border_colors_size() const {
  return footer_border_colors_.size();
}
void RendererStyle::clear_footer_border_colors() {
  footer_border_colors_.Clear();
}
const ::mozc::renderer::RendererStyle_RGBAColor& RendererStyle::footer_border_colors(int index) const {
  // @@protoc_insertion_point(field_get:mozc.renderer.RendererStyle.footer_border_colors)
  return footer_border_colors_.Get(index);
}
::mozc::renderer::RendererStyle_RGBAColor* RendererStyle::mutable_footer_border_colors(int index) {
  // @@protoc_insertion_point(field_mutable:mozc.renderer.RendererStyle.footer_border_colors)
  return footer_border_colors_.Mutable(index);
}
::mozc::renderer::RendererStyle_RGBAColor* RendererStyle::add_footer_border_colors() {
  // @@protoc_insertion_point(field_add:mozc.renderer.RendererStyle.footer_border_colors)
  return footer_border_colors_.Add();
}
::google::protobuf::RepeatedPtrField< ::mozc::renderer::RendererStyle_RGBAColor >*
RendererStyle::mutable_footer_border_colors() {
  // @@protoc_insertion_point(field_mutable_list:mozc.renderer.RendererStyle.footer_border_colors)
  return &footer_border_colors_;
}
const ::google::protobuf::RepeatedPtrField< ::mozc::renderer::RendererStyle_RGBAColor >&
RendererStyle::footer_border_colors() const {
  // @@protoc_insertion_point(field_list:mozc.renderer.RendererStyle.footer_border_colors)
  return footer_border_colors_;
}

// optional .mozc.renderer.RendererStyle.TextStyle footer_style = 8;
bool RendererStyle::has_footer_style() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void RendererStyle::set_has_footer_style() {
  _has_bits_[0] |= 0x00000080u;
}
void RendererStyle::clear_has_footer_style() {
  _has_bits_[0] &= ~0x00000080u;
}
void RendererStyle::clear_footer_style() {
  if (footer_style_ != NULL) footer_style_->::mozc::renderer::RendererStyle_TextStyle::Clear();
  clear_has_footer_style();
}
const ::mozc::renderer::RendererStyle_TextStyle& RendererStyle::footer_style() const {
  // @@protoc_insertion_point(field_get:mozc.renderer.RendererStyle.footer_style)
  return footer_style_ != NULL ? *footer_style_ : *default_instance_->footer_style_;
}
::mozc::renderer::RendererStyle_TextStyle* RendererStyle::mutable_footer_style() {
  set_has_footer_style();
  if (footer_style_ == NULL) {
    footer_style_ = new ::mozc::renderer::RendererStyle_TextStyle;
  }
  // @@protoc_insertion_point(field_mutable:mozc.renderer.RendererStyle.footer_style)
  return footer_style_;
}
::mozc::renderer::RendererStyle_TextStyle* RendererStyle::release_footer_style() {
  // @@protoc_insertion_point(field_release:mozc.renderer.RendererStyle.footer_style)
  clear_has_footer_style();
  ::mozc::renderer::RendererStyle_TextStyle* temp = footer_style_;
  footer_style_ = NULL;
  return temp;
}
void RendererStyle::set_allocated_footer_style(::mozc::renderer::RendererStyle_TextStyle* footer_style) {
  delete footer_style_;
  footer_style_ = footer_style;
  if (footer_style) {
    set_has_footer_style();
  } else {
    clear_has_footer_style();
  }
  // @@protoc_insertion_point(field_set_allocated:mozc.renderer.RendererStyle.footer_style)
}

// optional .mozc.renderer.RendererStyle.TextStyle footer_sub_label_style = 9;
bool RendererStyle::has_footer_sub_label_style() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void RendererStyle::set_has_footer_sub_label_style() {
  _has_bits_[0] |= 0x00000100u;
}
void RendererStyle::clear_has_footer_sub_label_style() {
  _has_bits_[0] &= ~0x00000100u;
}
void RendererStyle::clear_footer_sub_label_style() {
  if (footer_sub_label_style_ != NULL) footer_sub_label_style_->::mozc::renderer::RendererStyle_TextStyle::Clear();
  clear_has_footer_sub_label_style();
}
const ::mozc::renderer::RendererStyle_TextStyle& RendererStyle::footer_sub_label_style() const {
  // @@protoc_insertion_point(field_get:mozc.renderer.RendererStyle.footer_sub_label_style)
  return footer_sub_label_style_ != NULL ? *footer_sub_label_style_ : *default_instance_->footer_sub_label_style_;
}
::mozc::renderer::RendererStyle_TextStyle* RendererStyle::mutable_footer_sub_label_style() {
  set_has_footer_sub_label_style();
  if (footer_sub_label_style_ == NULL) {
    footer_sub_label_style_ = new ::mozc::renderer::RendererStyle_TextStyle;
  }
  // @@protoc_insertion_point(field_mutable:mozc.renderer.RendererStyle.footer_sub_label_style)
  return footer_sub_label_style_;
}
::mozc::renderer::RendererStyle_TextStyle* RendererStyle::release_footer_sub_label_style() {
  // @@protoc_insertion_point(field_release:mozc.renderer.RendererStyle.footer_sub_label_style)
  clear_has_footer_sub_label_style();
  ::mozc::renderer::RendererStyle_TextStyle* temp = footer_sub_label_style_;
  footer_sub_label_style_ = NULL;
  return temp;
}
void RendererStyle::set_allocated_footer_sub_label_style(::mozc::renderer::RendererStyle_TextStyle* footer_sub_label_style) {
  delete footer_sub_label_style_;
  footer_sub_label_style_ = footer_sub_label_style;
  if (footer_sub_label_style) {
    set_has_footer_sub_label_style();
  } else {
    clear_has_footer_sub_label_style();
  }
  // @@protoc_insertion_point(field_set_allocated:mozc.renderer.RendererStyle.footer_sub_label_style)
}

// optional .mozc.renderer.RendererStyle.RGBAColor focused_background_color = 10;
bool RendererStyle::has_focused_background_color() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void RendererStyle::set_has_focused_background_color() {
  _has_bits_[0] |= 0x00000200u;
}
void RendererStyle::clear_has_focused_background_color() {
  _has_bits_[0] &= ~0x00000200u;
}
void RendererStyle::clear_focused_background_color() {
  if (focused_background_color_ != NULL) focused_background_color_->::mozc::renderer::RendererStyle_RGBAColor::Clear();
  clear_has_focused_background_color();
}
const ::mozc::renderer::RendererStyle_RGBAColor& RendererStyle::focused_background_color() const {
  // @@protoc_insertion_point(field_get:mozc.renderer.RendererStyle.focused_background_color)
  return focused_background_color_ != NULL ? *focused_background_color_ : *default_instance_->focused_background_color_;
}
::mozc::renderer::RendererStyle_RGBAColor* RendererStyle::mutable_focused_background_color() {
  set_has_focused_background_color();
  if (focused_background_color_ == NULL) {
    focused_background_color_ = new ::mozc::renderer::RendererStyle_RGBAColor;
  }
  // @@protoc_insertion_point(field_mutable:mozc.renderer.RendererStyle.focused_background_color)
  return focused_background_color_;
}
::mozc::renderer::RendererStyle_RGBAColor* RendererStyle::release_focused_background_color() {
  // @@protoc_insertion_point(field_release:mozc.renderer.RendererStyle.focused_background_color)
  clear_has_focused_background_color();
  ::mozc::renderer::RendererStyle_RGBAColor* temp = focused_background_color_;
  focused_background_color_ = NULL;
  return temp;
}
void RendererStyle::set_allocated_focused_background_color(::mozc::renderer::RendererStyle_RGBAColor* focused_background_color) {
  delete focused_background_color_;
  focused_background_color_ = focused_background_color;
  if (focused_background_color) {
    set_has_focused_background_color();
  } else {
    clear_has_focused_background_color();
  }
  // @@protoc_insertion_point(field_set_allocated:mozc.renderer.RendererStyle.focused_background_color)
}

// optional .mozc.renderer.RendererStyle.RGBAColor focused_border_color = 11;
bool RendererStyle::has_focused_border_color() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void RendererStyle::set_has_focused_border_color() {
  _has_bits_[0] |= 0x00000400u;
}
void RendererStyle::clear_has_focused_border_color() {
  _has_bits_[0] &= ~0x00000400u;
}
void RendererStyle::clear_focused_border_color() {
  if (focused_border_color_ != NULL) focused_border_color_->::mozc::renderer::RendererStyle_RGBAColor::Clear();
  clear_has_focused_border_color();
}
const ::mozc::renderer::RendererStyle_RGBAColor& RendererStyle::focused_border_color() const {
  // @@protoc_insertion_point(field_get:mozc.renderer.RendererStyle.focused_border_color)
  return focused_border_color_ != NULL ? *focused_border_color_ : *default_instance_->focused_border_color_;
}
::mozc::renderer::RendererStyle_RGBAColor* RendererStyle::mutable_focused_border_color() {
  set_has_focused_border_color();
  if (focused_border_color_ == NULL) {
    focused_border_color_ = new ::mozc::renderer::RendererStyle_RGBAColor;
  }
  // @@protoc_insertion_point(field_mutable:mozc.renderer.RendererStyle.focused_border_color)
  return focused_border_color_;
}
::mozc::renderer::RendererStyle_RGBAColor* RendererStyle::release_focused_border_color() {
  // @@protoc_insertion_point(field_release:mozc.renderer.RendererStyle.focused_border_color)
  clear_has_focused_border_color();
  ::mozc::renderer::RendererStyle_RGBAColor* temp = focused_border_color_;
  focused_border_color_ = NULL;
  return temp;
}
void RendererStyle::set_allocated_focused_border_color(::mozc::renderer::RendererStyle_RGBAColor* focused_border_color) {
  delete focused_border_color_;
  focused_border_color_ = focused_border_color;
  if (focused_border_color) {
    set_has_focused_border_color();
  } else {
    clear_has_focused_border_color();
  }
  // @@protoc_insertion_point(field_set_allocated:mozc.renderer.RendererStyle.focused_border_color)
}

// optional .mozc.renderer.RendererStyle.RGBAColor scrollbar_background_color = 12;
bool RendererStyle::has_scrollbar_background_color() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void RendererStyle::set_has_scrollbar_background_color() {
  _has_bits_[0] |= 0x00000800u;
}
void RendererStyle::clear_has_scrollbar_background_color() {
  _has_bits_[0] &= ~0x00000800u;
}
void RendererStyle::clear_scrollbar_background_color() {
  if (scrollbar_background_color_ != NULL) scrollbar_background_color_->::mozc::renderer::RendererStyle_RGBAColor::Clear();
  clear_has_scrollbar_background_color();
}
const ::mozc::renderer::RendererStyle_RGBAColor& RendererStyle::scrollbar_background_color() const {
  // @@protoc_insertion_point(field_get:mozc.renderer.RendererStyle.scrollbar_background_color)
  return scrollbar_background_color_ != NULL ? *scrollbar_background_color_ : *default_instance_->scrollbar_background_color_;
}
::mozc::renderer::RendererStyle_RGBAColor* RendererStyle::mutable_scrollbar_background_color() {
  set_has_scrollbar_background_color();
  if (scrollbar_background_color_ == NULL) {
    scrollbar_background_color_ = new ::mozc::renderer::RendererStyle_RGBAColor;
  }
  // @@protoc_insertion_point(field_mutable:mozc.renderer.RendererStyle.scrollbar_background_color)
  return scrollbar_background_color_;
}
::mozc::renderer::RendererStyle_RGBAColor* RendererStyle::release_scrollbar_background_color() {
  // @@protoc_insertion_point(field_release:mozc.renderer.RendererStyle.scrollbar_background_color)
  clear_has_scrollbar_background_color();
  ::mozc::renderer::RendererStyle_RGBAColor* temp = scrollbar_background_color_;
  scrollbar_background_color_ = NULL;
  return temp;
}
void RendererStyle::set_allocated_scrollbar_background_color(::mozc::renderer::RendererStyle_RGBAColor* scrollbar_background_color) {
  delete scrollbar_background_color_;
  scrollbar_background_color_ = scrollbar_background_color;
  if (scrollbar_background_color) {
    set_has_scrollbar_background_color();
  } else {
    clear_has_scrollbar_background_color();
  }
  // @@protoc_insertion_point(field_set_allocated:mozc.renderer.RendererStyle.scrollbar_background_color)
}

// optional .mozc.renderer.RendererStyle.RGBAColor scrollbar_indicator_color = 13;
bool RendererStyle::has_scrollbar_indicator_color() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void RendererStyle::set_has_scrollbar_indicator_color() {
  _has_bits_[0] |= 0x00001000u;
}
void RendererStyle::clear_has_scrollbar_indicator_color() {
  _has_bits_[0] &= ~0x00001000u;
}
void RendererStyle::clear_scrollbar_indicator_color() {
  if (scrollbar_indicator_color_ != NULL) scrollbar_indicator_color_->::mozc::renderer::RendererStyle_RGBAColor::Clear();
  clear_has_scrollbar_indicator_color();
}
const ::mozc::renderer::RendererStyle_RGBAColor& RendererStyle::scrollbar_indicator_color() const {
  // @@protoc_insertion_point(field_get:mozc.renderer.RendererStyle.scrollbar_indicator_color)
  return scrollbar_indicator_color_ != NULL ? *scrollbar_indicator_color_ : *default_instance_->scrollbar_indicator_color_;
}
::mozc::renderer::RendererStyle_RGBAColor* RendererStyle::mutable_scrollbar_indicator_color() {
  set_has_scrollbar_indicator_color();
  if (scrollbar_indicator_color_ == NULL) {
    scrollbar_indicator_color_ = new ::mozc::renderer::RendererStyle_RGBAColor;
  }
  // @@protoc_insertion_point(field_mutable:mozc.renderer.RendererStyle.scrollbar_indicator_color)
  return scrollbar_indicator_color_;
}
::mozc::renderer::RendererStyle_RGBAColor* RendererStyle::release_scrollbar_indicator_color() {
  // @@protoc_insertion_point(field_release:mozc.renderer.RendererStyle.scrollbar_indicator_color)
  clear_has_scrollbar_indicator_color();
  ::mozc::renderer::RendererStyle_RGBAColor* temp = scrollbar_indicator_color_;
  scrollbar_indicator_color_ = NULL;
  return temp;
}
void RendererStyle::set_allocated_scrollbar_indicator_color(::mozc::renderer::RendererStyle_RGBAColor* scrollbar_indicator_color) {
  delete scrollbar_indicator_color_;
  scrollbar_indicator_color_ = scrollbar_indicator_color;
  if (scrollbar_indicator_color) {
    set_has_scrollbar_indicator_color();
  } else {
    clear_has_scrollbar_indicator_color();
  }
  // @@protoc_insertion_point(field_set_allocated:mozc.renderer.RendererStyle.scrollbar_indicator_color)
}

// optional int32 scrollbar_width = 14;
bool RendererStyle::has_scrollbar_width() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void RendererStyle::set_has_scrollbar_width() {
  _has_bits_[0] |= 0x00002000u;
}
void RendererStyle::clear_has_scrollbar_width() {
  _has_bits_[0] &= ~0x00002000u;
}
void RendererStyle::clear_scrollbar_width() {
  scrollbar_width_ = 0;
  clear_has_scrollbar_width();
}
 ::google::protobuf::int32 RendererStyle::scrollbar_width() const {
  // @@protoc_insertion_point(field_get:mozc.renderer.RendererStyle.scrollbar_width)
  return scrollbar_width_;
}
 void RendererStyle::set_scrollbar_width(::google::protobuf::int32 value) {
  set_has_scrollbar_width();
  scrollbar_width_ = value;
  // @@protoc_insertion_point(field_set:mozc.renderer.RendererStyle.scrollbar_width)
}

// optional .mozc.renderer.RendererStyle.RGBAColor footer_top_color = 15;
bool RendererStyle::has_footer_top_color() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void RendererStyle::set_has_footer_top_color() {
  _has_bits_[0] |= 0x00004000u;
}
void RendererStyle::clear_has_footer_top_color() {
  _has_bits_[0] &= ~0x00004000u;
}
void RendererStyle::clear_footer_top_color() {
  if (footer_top_color_ != NULL) footer_top_color_->::mozc::renderer::RendererStyle_RGBAColor::Clear();
  clear_has_footer_top_color();
}
const ::mozc::renderer::RendererStyle_RGBAColor& RendererStyle::footer_top_color() const {
  // @@protoc_insertion_point(field_get:mozc.renderer.RendererStyle.footer_top_color)
  return footer_top_color_ != NULL ? *footer_top_color_ : *default_instance_->footer_top_color_;
}
::mozc::renderer::RendererStyle_RGBAColor* RendererStyle::mutable_footer_top_color() {
  set_has_footer_top_color();
  if (footer_top_color_ == NULL) {
    footer_top_color_ = new ::mozc::renderer::RendererStyle_RGBAColor;
  }
  // @@protoc_insertion_point(field_mutable:mozc.renderer.RendererStyle.footer_top_color)
  return footer_top_color_;
}
::mozc::renderer::RendererStyle_RGBAColor* RendererStyle::release_footer_top_color() {
  // @@protoc_insertion_point(field_release:mozc.renderer.RendererStyle.footer_top_color)
  clear_has_footer_top_color();
  ::mozc::renderer::RendererStyle_RGBAColor* temp = footer_top_color_;
  footer_top_color_ = NULL;
  return temp;
}
void RendererStyle::set_allocated_footer_top_color(::mozc::renderer::RendererStyle_RGBAColor* footer_top_color) {
  delete footer_top_color_;
  footer_top_color_ = footer_top_color;
  if (footer_top_color) {
    set_has_footer_top_color();
  } else {
    clear_has_footer_top_color();
  }
  // @@protoc_insertion_point(field_set_allocated:mozc.renderer.RendererStyle.footer_top_color)
}

// optional .mozc.renderer.RendererStyle.RGBAColor footer_bottom_color = 16;
bool RendererStyle::has_footer_bottom_color() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void RendererStyle::set_has_footer_bottom_color() {
  _has_bits_[0] |= 0x00008000u;
}
void RendererStyle::clear_has_footer_bottom_color() {
  _has_bits_[0] &= ~0x00008000u;
}
void RendererStyle::clear_footer_bottom_color() {
  if (footer_bottom_color_ != NULL) footer_bottom_color_->::mozc::renderer::RendererStyle_RGBAColor::Clear();
  clear_has_footer_bottom_color();
}
const ::mozc::renderer::RendererStyle_RGBAColor& RendererStyle::footer_bottom_color() const {
  // @@protoc_insertion_point(field_get:mozc.renderer.RendererStyle.footer_bottom_color)
  return footer_bottom_color_ != NULL ? *footer_bottom_color_ : *default_instance_->footer_bottom_color_;
}
::mozc::renderer::RendererStyle_RGBAColor* RendererStyle::mutable_footer_bottom_color() {
  set_has_footer_bottom_color();
  if (footer_bottom_color_ == NULL) {
    footer_bottom_color_ = new ::mozc::renderer::RendererStyle_RGBAColor;
  }
  // @@protoc_insertion_point(field_mutable:mozc.renderer.RendererStyle.footer_bottom_color)
  return footer_bottom_color_;
}
::mozc::renderer::RendererStyle_RGBAColor* RendererStyle::release_footer_bottom_color() {
  // @@protoc_insertion_point(field_release:mozc.renderer.RendererStyle.footer_bottom_color)
  clear_has_footer_bottom_color();
  ::mozc::renderer::RendererStyle_RGBAColor* temp = footer_bottom_color_;
  footer_bottom_color_ = NULL;
  return temp;
}
void RendererStyle::set_allocated_footer_bottom_color(::mozc::renderer::RendererStyle_RGBAColor* footer_bottom_color) {
  delete footer_bottom_color_;
  footer_bottom_color_ = footer_bottom_color;
  if (footer_bottom_color) {
    set_has_footer_bottom_color();
  } else {
    clear_has_footer_bottom_color();
  }
  // @@protoc_insertion_point(field_set_allocated:mozc.renderer.RendererStyle.footer_bottom_color)
}

// optional string logo_file_name = 17;
bool RendererStyle::has_logo_file_name() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void RendererStyle::set_has_logo_file_name() {
  _has_bits_[0] |= 0x00010000u;
}
void RendererStyle::clear_has_logo_file_name() {
  _has_bits_[0] &= ~0x00010000u;
}
void RendererStyle::clear_logo_file_name() {
  logo_file_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_logo_file_name();
}
 const ::std::string& RendererStyle::logo_file_name() const {
  // @@protoc_insertion_point(field_get:mozc.renderer.RendererStyle.logo_file_name)
  return logo_file_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RendererStyle::set_logo_file_name(const ::std::string& value) {
  set_has_logo_file_name();
  logo_file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mozc.renderer.RendererStyle.logo_file_name)
}
 void RendererStyle::set_logo_file_name(const char* value) {
  set_has_logo_file_name();
  logo_file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mozc.renderer.RendererStyle.logo_file_name)
}
 void RendererStyle::set_logo_file_name(const char* value, size_t size) {
  set_has_logo_file_name();
  logo_file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mozc.renderer.RendererStyle.logo_file_name)
}
 ::std::string* RendererStyle::mutable_logo_file_name() {
  set_has_logo_file_name();
  // @@protoc_insertion_point(field_mutable:mozc.renderer.RendererStyle.logo_file_name)
  return logo_file_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RendererStyle::release_logo_file_name() {
  // @@protoc_insertion_point(field_release:mozc.renderer.RendererStyle.logo_file_name)
  clear_has_logo_file_name();
  return logo_file_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RendererStyle::set_allocated_logo_file_name(::std::string* logo_file_name) {
  if (logo_file_name != NULL) {
    set_has_logo_file_name();
  } else {
    clear_has_logo_file_name();
  }
  logo_file_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), logo_file_name);
  // @@protoc_insertion_point(field_set_allocated:mozc.renderer.RendererStyle.logo_file_name)
}

// optional .mozc.renderer.RendererStyle.InfolistStyle infolist_style = 18;
bool RendererStyle::has_infolist_style() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void RendererStyle::set_has_infolist_style() {
  _has_bits_[0] |= 0x00020000u;
}
void RendererStyle::clear_has_infolist_style() {
  _has_bits_[0] &= ~0x00020000u;
}
void RendererStyle::clear_infolist_style() {
  if (infolist_style_ != NULL) infolist_style_->::mozc::renderer::RendererStyle_InfolistStyle::Clear();
  clear_has_infolist_style();
}
const ::mozc::renderer::RendererStyle_InfolistStyle& RendererStyle::infolist_style() const {
  // @@protoc_insertion_point(field_get:mozc.renderer.RendererStyle.infolist_style)
  return infolist_style_ != NULL ? *infolist_style_ : *default_instance_->infolist_style_;
}
::mozc::renderer::RendererStyle_InfolistStyle* RendererStyle::mutable_infolist_style() {
  set_has_infolist_style();
  if (infolist_style_ == NULL) {
    infolist_style_ = new ::mozc::renderer::RendererStyle_InfolistStyle;
  }
  // @@protoc_insertion_point(field_mutable:mozc.renderer.RendererStyle.infolist_style)
  return infolist_style_;
}
::mozc::renderer::RendererStyle_InfolistStyle* RendererStyle::release_infolist_style() {
  // @@protoc_insertion_point(field_release:mozc.renderer.RendererStyle.infolist_style)
  clear_has_infolist_style();
  ::mozc::renderer::RendererStyle_InfolistStyle* temp = infolist_style_;
  infolist_style_ = NULL;
  return temp;
}
void RendererStyle::set_allocated_infolist_style(::mozc::renderer::RendererStyle_InfolistStyle* infolist_style) {
  delete infolist_style_;
  infolist_style_ = infolist_style;
  if (infolist_style) {
    set_has_infolist_style();
  } else {
    clear_has_infolist_style();
  }
  // @@protoc_insertion_point(field_set_allocated:mozc.renderer.RendererStyle.infolist_style)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace renderer
}  // namespace mozc

// @@protoc_insertion_point(global_scope)
