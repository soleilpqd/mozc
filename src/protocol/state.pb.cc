// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protocol/state.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "protocol/state.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace mozc {
namespace protocol {

namespace {

const ::google::protobuf::Descriptor* SessionState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SessionState_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_protocol_2fstate_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_protocol_2fstate_2eproto() {
  protobuf_AddDesc_protocol_2fstate_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "protocol/state.proto");
  GOOGLE_CHECK(file != NULL);
  SessionState_descriptor_ = file->message_type(0);
  static const int SessionState_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionState, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionState, created_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionState, committed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionState, start_preedit_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionState, start_conversion_window_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionState, start_prediction_window_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionState, start_suggestion_window_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionState, start_infolist_window_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionState, preedit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionState, candidates_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionState, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionState, request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionState, input_field_type_),
  };
  SessionState_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SessionState_descriptor_,
      SessionState::default_instance_,
      SessionState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionState, _has_bits_[0]),
      -1,
      -1,
      sizeof(SessionState),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionState, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_protocol_2fstate_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SessionState_descriptor_, &SessionState::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_protocol_2fstate_2eproto() {
  delete SessionState::default_instance_;
  delete SessionState_reflection_;
}

void protobuf_AddDesc_protocol_2fstate_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_protocol_2fstate_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::mozc::commands::protobuf_AddDesc_protocol_2fcandidates_2eproto();
  ::mozc::commands::protobuf_AddDesc_protocol_2fcommands_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024protocol/state.proto\022\rmozc.protocol\032\031p"
    "rotocol/candidates.proto\032\027protocol/comma"
    "nds.proto\"\367\003\n\014SessionState\022\n\n\002id\030\001 \002(\004\022\024"
    "\n\014created_time\030\002 \001(\004\022\030\n\tcommitted\030\003 \001(\010:"
    "\005false\022\032\n\022start_preedit_time\030\n \001(\004\022$\n\034st"
    "art_conversion_window_time\030\013 \001(\004\022$\n\034star"
    "t_prediction_window_time\030\014 \001(\004\022$\n\034start_"
    "suggestion_window_time\030\r \001(\004\022\"\n\032start_in"
    "folist_window_time\030\016 \001(\004\022\'\n\007preedit\030\024 \001("
    "\0132\026.mozc.commands.Preedit\022-\n\ncandidates\030"
    "\025 \001(\0132\031.mozc.commands.Candidates\022%\n\006resu"
    "lt\030\027 \001(\0132\025.mozc.commands.Result\022\'\n\007reque"
    "st\030\030 \001(\0132\026.mozc.commands.Request\022\?\n\020inpu"
    "t_field_type\030\031 \001(\0162%.mozc.commands.Conte"
    "xt.InputFieldTypeJ\004\010\004\020\005J\004\010\005\020\006J\004\010\026\020\027", 595);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "protocol/state.proto", &protobuf_RegisterTypes);
  SessionState::default_instance_ = new SessionState();
  SessionState::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_protocol_2fstate_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_protocol_2fstate_2eproto {
  StaticDescriptorInitializer_protocol_2fstate_2eproto() {
    protobuf_AddDesc_protocol_2fstate_2eproto();
  }
} static_descriptor_initializer_protocol_2fstate_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SessionState::kIdFieldNumber;
const int SessionState::kCreatedTimeFieldNumber;
const int SessionState::kCommittedFieldNumber;
const int SessionState::kStartPreeditTimeFieldNumber;
const int SessionState::kStartConversionWindowTimeFieldNumber;
const int SessionState::kStartPredictionWindowTimeFieldNumber;
const int SessionState::kStartSuggestionWindowTimeFieldNumber;
const int SessionState::kStartInfolistWindowTimeFieldNumber;
const int SessionState::kPreeditFieldNumber;
const int SessionState::kCandidatesFieldNumber;
const int SessionState::kResultFieldNumber;
const int SessionState::kRequestFieldNumber;
const int SessionState::kInputFieldTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SessionState::SessionState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mozc.protocol.SessionState)
}

void SessionState::InitAsDefaultInstance() {
  preedit_ = const_cast< ::mozc::commands::Preedit*>(&::mozc::commands::Preedit::default_instance());
  candidates_ = const_cast< ::mozc::commands::Candidates*>(&::mozc::commands::Candidates::default_instance());
  result_ = const_cast< ::mozc::commands::Result*>(&::mozc::commands::Result::default_instance());
  request_ = const_cast< ::mozc::commands::Request*>(&::mozc::commands::Request::default_instance());
}

SessionState::SessionState(const SessionState& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mozc.protocol.SessionState)
}

void SessionState::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  created_time_ = GOOGLE_ULONGLONG(0);
  committed_ = false;
  start_preedit_time_ = GOOGLE_ULONGLONG(0);
  start_conversion_window_time_ = GOOGLE_ULONGLONG(0);
  start_prediction_window_time_ = GOOGLE_ULONGLONG(0);
  start_suggestion_window_time_ = GOOGLE_ULONGLONG(0);
  start_infolist_window_time_ = GOOGLE_ULONGLONG(0);
  preedit_ = NULL;
  candidates_ = NULL;
  result_ = NULL;
  request_ = NULL;
  input_field_type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SessionState::~SessionState() {
  // @@protoc_insertion_point(destructor:mozc.protocol.SessionState)
  SharedDtor();
}

void SessionState::SharedDtor() {
  if (this != default_instance_) {
    delete preedit_;
    delete candidates_;
    delete result_;
    delete request_;
  }
}

void SessionState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SessionState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SessionState_descriptor_;
}

const SessionState& SessionState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2fstate_2eproto();
  return *default_instance_;
}

SessionState* SessionState::default_instance_ = NULL;

SessionState* SessionState::New(::google::protobuf::Arena* arena) const {
  SessionState* n = new SessionState;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SessionState::Clear() {
// @@protoc_insertion_point(message_clear_start:mozc.protocol.SessionState)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(SessionState, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SessionState*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(id_, committed_);
  }
  if (_has_bits_[8 / 32] & 7936u) {
    if (has_preedit()) {
      if (preedit_ != NULL) preedit_->::mozc::commands::Preedit::Clear();
    }
    if (has_candidates()) {
      if (candidates_ != NULL) candidates_->::mozc::commands::Candidates::Clear();
    }
    if (has_result()) {
      if (result_ != NULL) result_->::mozc::commands::Result::Clear();
    }
    if (has_request()) {
      if (request_ != NULL) request_->::mozc::commands::Request::Clear();
    }
    input_field_type_ = 1;
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SessionState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mozc.protocol.SessionState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_created_time;
        break;
      }

      // optional uint64 created_time = 2;
      case 2: {
        if (tag == 16) {
         parse_created_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &created_time_)));
          set_has_created_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_committed;
        break;
      }

      // optional bool committed = 3 [default = false];
      case 3: {
        if (tag == 24) {
         parse_committed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &committed_)));
          set_has_committed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_start_preedit_time;
        break;
      }

      // optional uint64 start_preedit_time = 10;
      case 10: {
        if (tag == 80) {
         parse_start_preedit_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &start_preedit_time_)));
          set_has_start_preedit_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_start_conversion_window_time;
        break;
      }

      // optional uint64 start_conversion_window_time = 11;
      case 11: {
        if (tag == 88) {
         parse_start_conversion_window_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &start_conversion_window_time_)));
          set_has_start_conversion_window_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_start_prediction_window_time;
        break;
      }

      // optional uint64 start_prediction_window_time = 12;
      case 12: {
        if (tag == 96) {
         parse_start_prediction_window_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &start_prediction_window_time_)));
          set_has_start_prediction_window_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_start_suggestion_window_time;
        break;
      }

      // optional uint64 start_suggestion_window_time = 13;
      case 13: {
        if (tag == 104) {
         parse_start_suggestion_window_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &start_suggestion_window_time_)));
          set_has_start_suggestion_window_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_start_infolist_window_time;
        break;
      }

      // optional uint64 start_infolist_window_time = 14;
      case 14: {
        if (tag == 112) {
         parse_start_infolist_window_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &start_infolist_window_time_)));
          set_has_start_infolist_window_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_preedit;
        break;
      }

      // optional .mozc.commands.Preedit preedit = 20;
      case 20: {
        if (tag == 162) {
         parse_preedit:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_preedit()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(170)) goto parse_candidates;
        break;
      }

      // optional .mozc.commands.Candidates candidates = 21;
      case 21: {
        if (tag == 170) {
         parse_candidates:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_candidates()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(186)) goto parse_result;
        break;
      }

      // optional .mozc.commands.Result result = 23;
      case 23: {
        if (tag == 186) {
         parse_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(194)) goto parse_request;
        break;
      }

      // optional .mozc.commands.Request request = 24;
      case 24: {
        if (tag == 194) {
         parse_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_request()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(200)) goto parse_input_field_type;
        break;
      }

      // optional .mozc.commands.Context.InputFieldType input_field_type = 25;
      case 25: {
        if (tag == 200) {
         parse_input_field_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mozc::commands::Context_InputFieldType_IsValid(value)) {
            set_input_field_type(static_cast< ::mozc::commands::Context_InputFieldType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(25, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mozc.protocol.SessionState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mozc.protocol.SessionState)
  return false;
#undef DO_
}

void SessionState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mozc.protocol.SessionState)
  // required uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional uint64 created_time = 2;
  if (has_created_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->created_time(), output);
  }

  // optional bool committed = 3 [default = false];
  if (has_committed()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->committed(), output);
  }

  // optional uint64 start_preedit_time = 10;
  if (has_start_preedit_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->start_preedit_time(), output);
  }

  // optional uint64 start_conversion_window_time = 11;
  if (has_start_conversion_window_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->start_conversion_window_time(), output);
  }

  // optional uint64 start_prediction_window_time = 12;
  if (has_start_prediction_window_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(12, this->start_prediction_window_time(), output);
  }

  // optional uint64 start_suggestion_window_time = 13;
  if (has_start_suggestion_window_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(13, this->start_suggestion_window_time(), output);
  }

  // optional uint64 start_infolist_window_time = 14;
  if (has_start_infolist_window_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(14, this->start_infolist_window_time(), output);
  }

  // optional .mozc.commands.Preedit preedit = 20;
  if (has_preedit()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, *this->preedit_, output);
  }

  // optional .mozc.commands.Candidates candidates = 21;
  if (has_candidates()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, *this->candidates_, output);
  }

  // optional .mozc.commands.Result result = 23;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, *this->result_, output);
  }

  // optional .mozc.commands.Request request = 24;
  if (has_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      24, *this->request_, output);
  }

  // optional .mozc.commands.Context.InputFieldType input_field_type = 25;
  if (has_input_field_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      25, this->input_field_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mozc.protocol.SessionState)
}

::google::protobuf::uint8* SessionState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mozc.protocol.SessionState)
  // required uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // optional uint64 created_time = 2;
  if (has_created_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->created_time(), target);
  }

  // optional bool committed = 3 [default = false];
  if (has_committed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->committed(), target);
  }

  // optional uint64 start_preedit_time = 10;
  if (has_start_preedit_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->start_preedit_time(), target);
  }

  // optional uint64 start_conversion_window_time = 11;
  if (has_start_conversion_window_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->start_conversion_window_time(), target);
  }

  // optional uint64 start_prediction_window_time = 12;
  if (has_start_prediction_window_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(12, this->start_prediction_window_time(), target);
  }

  // optional uint64 start_suggestion_window_time = 13;
  if (has_start_suggestion_window_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(13, this->start_suggestion_window_time(), target);
  }

  // optional uint64 start_infolist_window_time = 14;
  if (has_start_infolist_window_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(14, this->start_infolist_window_time(), target);
  }

  // optional .mozc.commands.Preedit preedit = 20;
  if (has_preedit()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        20, *this->preedit_, false, target);
  }

  // optional .mozc.commands.Candidates candidates = 21;
  if (has_candidates()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        21, *this->candidates_, false, target);
  }

  // optional .mozc.commands.Result result = 23;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        23, *this->result_, false, target);
  }

  // optional .mozc.commands.Request request = 24;
  if (has_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        24, *this->request_, false, target);
  }

  // optional .mozc.commands.Context.InputFieldType input_field_type = 25;
  if (has_input_field_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      25, this->input_field_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mozc.protocol.SessionState)
  return target;
}

int SessionState::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:mozc.protocol.SessionState)
  int total_size = 0;

  // required uint64 id = 1;
  if (has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->id());
  }
  if (_has_bits_[1 / 32] & 254u) {
    // optional uint64 created_time = 2;
    if (has_created_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->created_time());
    }

    // optional bool committed = 3 [default = false];
    if (has_committed()) {
      total_size += 1 + 1;
    }

    // optional uint64 start_preedit_time = 10;
    if (has_start_preedit_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->start_preedit_time());
    }

    // optional uint64 start_conversion_window_time = 11;
    if (has_start_conversion_window_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->start_conversion_window_time());
    }

    // optional uint64 start_prediction_window_time = 12;
    if (has_start_prediction_window_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->start_prediction_window_time());
    }

    // optional uint64 start_suggestion_window_time = 13;
    if (has_start_suggestion_window_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->start_suggestion_window_time());
    }

    // optional uint64 start_infolist_window_time = 14;
    if (has_start_infolist_window_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->start_infolist_window_time());
    }

  }
  if (_has_bits_[8 / 32] & 7936u) {
    // optional .mozc.commands.Preedit preedit = 20;
    if (has_preedit()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->preedit_);
    }

    // optional .mozc.commands.Candidates candidates = 21;
    if (has_candidates()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->candidates_);
    }

    // optional .mozc.commands.Result result = 23;
    if (has_result()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->result_);
    }

    // optional .mozc.commands.Request request = 24;
    if (has_request()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->request_);
    }

    // optional .mozc.commands.Context.InputFieldType input_field_type = 25;
    if (has_input_field_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->input_field_type());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SessionState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mozc.protocol.SessionState)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SessionState* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SessionState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mozc.protocol.SessionState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mozc.protocol.SessionState)
    MergeFrom(*source);
  }
}

void SessionState::MergeFrom(const SessionState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mozc.protocol.SessionState)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_created_time()) {
      set_created_time(from.created_time());
    }
    if (from.has_committed()) {
      set_committed(from.committed());
    }
    if (from.has_start_preedit_time()) {
      set_start_preedit_time(from.start_preedit_time());
    }
    if (from.has_start_conversion_window_time()) {
      set_start_conversion_window_time(from.start_conversion_window_time());
    }
    if (from.has_start_prediction_window_time()) {
      set_start_prediction_window_time(from.start_prediction_window_time());
    }
    if (from.has_start_suggestion_window_time()) {
      set_start_suggestion_window_time(from.start_suggestion_window_time());
    }
    if (from.has_start_infolist_window_time()) {
      set_start_infolist_window_time(from.start_infolist_window_time());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_preedit()) {
      mutable_preedit()->::mozc::commands::Preedit::MergeFrom(from.preedit());
    }
    if (from.has_candidates()) {
      mutable_candidates()->::mozc::commands::Candidates::MergeFrom(from.candidates());
    }
    if (from.has_result()) {
      mutable_result()->::mozc::commands::Result::MergeFrom(from.result());
    }
    if (from.has_request()) {
      mutable_request()->::mozc::commands::Request::MergeFrom(from.request());
    }
    if (from.has_input_field_type()) {
      set_input_field_type(from.input_field_type());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void SessionState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mozc.protocol.SessionState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SessionState::CopyFrom(const SessionState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mozc.protocol.SessionState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionState::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_preedit()) {
    if (!this->preedit_->IsInitialized()) return false;
  }
  if (has_candidates()) {
    if (!this->candidates_->IsInitialized()) return false;
  }
  if (has_result()) {
    if (!this->result_->IsInitialized()) return false;
  }
  return true;
}

void SessionState::Swap(SessionState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SessionState::InternalSwap(SessionState* other) {
  std::swap(id_, other->id_);
  std::swap(created_time_, other->created_time_);
  std::swap(committed_, other->committed_);
  std::swap(start_preedit_time_, other->start_preedit_time_);
  std::swap(start_conversion_window_time_, other->start_conversion_window_time_);
  std::swap(start_prediction_window_time_, other->start_prediction_window_time_);
  std::swap(start_suggestion_window_time_, other->start_suggestion_window_time_);
  std::swap(start_infolist_window_time_, other->start_infolist_window_time_);
  std::swap(preedit_, other->preedit_);
  std::swap(candidates_, other->candidates_);
  std::swap(result_, other->result_);
  std::swap(request_, other->request_);
  std::swap(input_field_type_, other->input_field_type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SessionState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SessionState_descriptor_;
  metadata.reflection = SessionState_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SessionState

// required uint64 id = 1;
bool SessionState::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SessionState::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void SessionState::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void SessionState::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
 ::google::protobuf::uint64 SessionState::id() const {
  // @@protoc_insertion_point(field_get:mozc.protocol.SessionState.id)
  return id_;
}
 void SessionState::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:mozc.protocol.SessionState.id)
}

// optional uint64 created_time = 2;
bool SessionState::has_created_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SessionState::set_has_created_time() {
  _has_bits_[0] |= 0x00000002u;
}
void SessionState::clear_has_created_time() {
  _has_bits_[0] &= ~0x00000002u;
}
void SessionState::clear_created_time() {
  created_time_ = GOOGLE_ULONGLONG(0);
  clear_has_created_time();
}
 ::google::protobuf::uint64 SessionState::created_time() const {
  // @@protoc_insertion_point(field_get:mozc.protocol.SessionState.created_time)
  return created_time_;
}
 void SessionState::set_created_time(::google::protobuf::uint64 value) {
  set_has_created_time();
  created_time_ = value;
  // @@protoc_insertion_point(field_set:mozc.protocol.SessionState.created_time)
}

// optional bool committed = 3 [default = false];
bool SessionState::has_committed() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SessionState::set_has_committed() {
  _has_bits_[0] |= 0x00000004u;
}
void SessionState::clear_has_committed() {
  _has_bits_[0] &= ~0x00000004u;
}
void SessionState::clear_committed() {
  committed_ = false;
  clear_has_committed();
}
 bool SessionState::committed() const {
  // @@protoc_insertion_point(field_get:mozc.protocol.SessionState.committed)
  return committed_;
}
 void SessionState::set_committed(bool value) {
  set_has_committed();
  committed_ = value;
  // @@protoc_insertion_point(field_set:mozc.protocol.SessionState.committed)
}

// optional uint64 start_preedit_time = 10;
bool SessionState::has_start_preedit_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SessionState::set_has_start_preedit_time() {
  _has_bits_[0] |= 0x00000008u;
}
void SessionState::clear_has_start_preedit_time() {
  _has_bits_[0] &= ~0x00000008u;
}
void SessionState::clear_start_preedit_time() {
  start_preedit_time_ = GOOGLE_ULONGLONG(0);
  clear_has_start_preedit_time();
}
 ::google::protobuf::uint64 SessionState::start_preedit_time() const {
  // @@protoc_insertion_point(field_get:mozc.protocol.SessionState.start_preedit_time)
  return start_preedit_time_;
}
 void SessionState::set_start_preedit_time(::google::protobuf::uint64 value) {
  set_has_start_preedit_time();
  start_preedit_time_ = value;
  // @@protoc_insertion_point(field_set:mozc.protocol.SessionState.start_preedit_time)
}

// optional uint64 start_conversion_window_time = 11;
bool SessionState::has_start_conversion_window_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void SessionState::set_has_start_conversion_window_time() {
  _has_bits_[0] |= 0x00000010u;
}
void SessionState::clear_has_start_conversion_window_time() {
  _has_bits_[0] &= ~0x00000010u;
}
void SessionState::clear_start_conversion_window_time() {
  start_conversion_window_time_ = GOOGLE_ULONGLONG(0);
  clear_has_start_conversion_window_time();
}
 ::google::protobuf::uint64 SessionState::start_conversion_window_time() const {
  // @@protoc_insertion_point(field_get:mozc.protocol.SessionState.start_conversion_window_time)
  return start_conversion_window_time_;
}
 void SessionState::set_start_conversion_window_time(::google::protobuf::uint64 value) {
  set_has_start_conversion_window_time();
  start_conversion_window_time_ = value;
  // @@protoc_insertion_point(field_set:mozc.protocol.SessionState.start_conversion_window_time)
}

// optional uint64 start_prediction_window_time = 12;
bool SessionState::has_start_prediction_window_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void SessionState::set_has_start_prediction_window_time() {
  _has_bits_[0] |= 0x00000020u;
}
void SessionState::clear_has_start_prediction_window_time() {
  _has_bits_[0] &= ~0x00000020u;
}
void SessionState::clear_start_prediction_window_time() {
  start_prediction_window_time_ = GOOGLE_ULONGLONG(0);
  clear_has_start_prediction_window_time();
}
 ::google::protobuf::uint64 SessionState::start_prediction_window_time() const {
  // @@protoc_insertion_point(field_get:mozc.protocol.SessionState.start_prediction_window_time)
  return start_prediction_window_time_;
}
 void SessionState::set_start_prediction_window_time(::google::protobuf::uint64 value) {
  set_has_start_prediction_window_time();
  start_prediction_window_time_ = value;
  // @@protoc_insertion_point(field_set:mozc.protocol.SessionState.start_prediction_window_time)
}

// optional uint64 start_suggestion_window_time = 13;
bool SessionState::has_start_suggestion_window_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void SessionState::set_has_start_suggestion_window_time() {
  _has_bits_[0] |= 0x00000040u;
}
void SessionState::clear_has_start_suggestion_window_time() {
  _has_bits_[0] &= ~0x00000040u;
}
void SessionState::clear_start_suggestion_window_time() {
  start_suggestion_window_time_ = GOOGLE_ULONGLONG(0);
  clear_has_start_suggestion_window_time();
}
 ::google::protobuf::uint64 SessionState::start_suggestion_window_time() const {
  // @@protoc_insertion_point(field_get:mozc.protocol.SessionState.start_suggestion_window_time)
  return start_suggestion_window_time_;
}
 void SessionState::set_start_suggestion_window_time(::google::protobuf::uint64 value) {
  set_has_start_suggestion_window_time();
  start_suggestion_window_time_ = value;
  // @@protoc_insertion_point(field_set:mozc.protocol.SessionState.start_suggestion_window_time)
}

// optional uint64 start_infolist_window_time = 14;
bool SessionState::has_start_infolist_window_time() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void SessionState::set_has_start_infolist_window_time() {
  _has_bits_[0] |= 0x00000080u;
}
void SessionState::clear_has_start_infolist_window_time() {
  _has_bits_[0] &= ~0x00000080u;
}
void SessionState::clear_start_infolist_window_time() {
  start_infolist_window_time_ = GOOGLE_ULONGLONG(0);
  clear_has_start_infolist_window_time();
}
 ::google::protobuf::uint64 SessionState::start_infolist_window_time() const {
  // @@protoc_insertion_point(field_get:mozc.protocol.SessionState.start_infolist_window_time)
  return start_infolist_window_time_;
}
 void SessionState::set_start_infolist_window_time(::google::protobuf::uint64 value) {
  set_has_start_infolist_window_time();
  start_infolist_window_time_ = value;
  // @@protoc_insertion_point(field_set:mozc.protocol.SessionState.start_infolist_window_time)
}

// optional .mozc.commands.Preedit preedit = 20;
bool SessionState::has_preedit() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void SessionState::set_has_preedit() {
  _has_bits_[0] |= 0x00000100u;
}
void SessionState::clear_has_preedit() {
  _has_bits_[0] &= ~0x00000100u;
}
void SessionState::clear_preedit() {
  if (preedit_ != NULL) preedit_->::mozc::commands::Preedit::Clear();
  clear_has_preedit();
}
const ::mozc::commands::Preedit& SessionState::preedit() const {
  // @@protoc_insertion_point(field_get:mozc.protocol.SessionState.preedit)
  return preedit_ != NULL ? *preedit_ : *default_instance_->preedit_;
}
::mozc::commands::Preedit* SessionState::mutable_preedit() {
  set_has_preedit();
  if (preedit_ == NULL) {
    preedit_ = new ::mozc::commands::Preedit;
  }
  // @@protoc_insertion_point(field_mutable:mozc.protocol.SessionState.preedit)
  return preedit_;
}
::mozc::commands::Preedit* SessionState::release_preedit() {
  // @@protoc_insertion_point(field_release:mozc.protocol.SessionState.preedit)
  clear_has_preedit();
  ::mozc::commands::Preedit* temp = preedit_;
  preedit_ = NULL;
  return temp;
}
void SessionState::set_allocated_preedit(::mozc::commands::Preedit* preedit) {
  delete preedit_;
  preedit_ = preedit;
  if (preedit) {
    set_has_preedit();
  } else {
    clear_has_preedit();
  }
  // @@protoc_insertion_point(field_set_allocated:mozc.protocol.SessionState.preedit)
}

// optional .mozc.commands.Candidates candidates = 21;
bool SessionState::has_candidates() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void SessionState::set_has_candidates() {
  _has_bits_[0] |= 0x00000200u;
}
void SessionState::clear_has_candidates() {
  _has_bits_[0] &= ~0x00000200u;
}
void SessionState::clear_candidates() {
  if (candidates_ != NULL) candidates_->::mozc::commands::Candidates::Clear();
  clear_has_candidates();
}
const ::mozc::commands::Candidates& SessionState::candidates() const {
  // @@protoc_insertion_point(field_get:mozc.protocol.SessionState.candidates)
  return candidates_ != NULL ? *candidates_ : *default_instance_->candidates_;
}
::mozc::commands::Candidates* SessionState::mutable_candidates() {
  set_has_candidates();
  if (candidates_ == NULL) {
    candidates_ = new ::mozc::commands::Candidates;
  }
  // @@protoc_insertion_point(field_mutable:mozc.protocol.SessionState.candidates)
  return candidates_;
}
::mozc::commands::Candidates* SessionState::release_candidates() {
  // @@protoc_insertion_point(field_release:mozc.protocol.SessionState.candidates)
  clear_has_candidates();
  ::mozc::commands::Candidates* temp = candidates_;
  candidates_ = NULL;
  return temp;
}
void SessionState::set_allocated_candidates(::mozc::commands::Candidates* candidates) {
  delete candidates_;
  candidates_ = candidates;
  if (candidates) {
    set_has_candidates();
  } else {
    clear_has_candidates();
  }
  // @@protoc_insertion_point(field_set_allocated:mozc.protocol.SessionState.candidates)
}

// optional .mozc.commands.Result result = 23;
bool SessionState::has_result() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void SessionState::set_has_result() {
  _has_bits_[0] |= 0x00000400u;
}
void SessionState::clear_has_result() {
  _has_bits_[0] &= ~0x00000400u;
}
void SessionState::clear_result() {
  if (result_ != NULL) result_->::mozc::commands::Result::Clear();
  clear_has_result();
}
const ::mozc::commands::Result& SessionState::result() const {
  // @@protoc_insertion_point(field_get:mozc.protocol.SessionState.result)
  return result_ != NULL ? *result_ : *default_instance_->result_;
}
::mozc::commands::Result* SessionState::mutable_result() {
  set_has_result();
  if (result_ == NULL) {
    result_ = new ::mozc::commands::Result;
  }
  // @@protoc_insertion_point(field_mutable:mozc.protocol.SessionState.result)
  return result_;
}
::mozc::commands::Result* SessionState::release_result() {
  // @@protoc_insertion_point(field_release:mozc.protocol.SessionState.result)
  clear_has_result();
  ::mozc::commands::Result* temp = result_;
  result_ = NULL;
  return temp;
}
void SessionState::set_allocated_result(::mozc::commands::Result* result) {
  delete result_;
  result_ = result;
  if (result) {
    set_has_result();
  } else {
    clear_has_result();
  }
  // @@protoc_insertion_point(field_set_allocated:mozc.protocol.SessionState.result)
}

// optional .mozc.commands.Request request = 24;
bool SessionState::has_request() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void SessionState::set_has_request() {
  _has_bits_[0] |= 0x00000800u;
}
void SessionState::clear_has_request() {
  _has_bits_[0] &= ~0x00000800u;
}
void SessionState::clear_request() {
  if (request_ != NULL) request_->::mozc::commands::Request::Clear();
  clear_has_request();
}
const ::mozc::commands::Request& SessionState::request() const {
  // @@protoc_insertion_point(field_get:mozc.protocol.SessionState.request)
  return request_ != NULL ? *request_ : *default_instance_->request_;
}
::mozc::commands::Request* SessionState::mutable_request() {
  set_has_request();
  if (request_ == NULL) {
    request_ = new ::mozc::commands::Request;
  }
  // @@protoc_insertion_point(field_mutable:mozc.protocol.SessionState.request)
  return request_;
}
::mozc::commands::Request* SessionState::release_request() {
  // @@protoc_insertion_point(field_release:mozc.protocol.SessionState.request)
  clear_has_request();
  ::mozc::commands::Request* temp = request_;
  request_ = NULL;
  return temp;
}
void SessionState::set_allocated_request(::mozc::commands::Request* request) {
  delete request_;
  request_ = request;
  if (request) {
    set_has_request();
  } else {
    clear_has_request();
  }
  // @@protoc_insertion_point(field_set_allocated:mozc.protocol.SessionState.request)
}

// optional .mozc.commands.Context.InputFieldType input_field_type = 25;
bool SessionState::has_input_field_type() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void SessionState::set_has_input_field_type() {
  _has_bits_[0] |= 0x00001000u;
}
void SessionState::clear_has_input_field_type() {
  _has_bits_[0] &= ~0x00001000u;
}
void SessionState::clear_input_field_type() {
  input_field_type_ = 1;
  clear_has_input_field_type();
}
 ::mozc::commands::Context_InputFieldType SessionState::input_field_type() const {
  // @@protoc_insertion_point(field_get:mozc.protocol.SessionState.input_field_type)
  return static_cast< ::mozc::commands::Context_InputFieldType >(input_field_type_);
}
 void SessionState::set_input_field_type(::mozc::commands::Context_InputFieldType value) {
  assert(::mozc::commands::Context_InputFieldType_IsValid(value));
  set_has_input_field_type();
  input_field_type_ = value;
  // @@protoc_insertion_point(field_set:mozc.protocol.SessionState.input_field_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol
}  // namespace mozc

// @@protoc_insertion_point(global_scope)
