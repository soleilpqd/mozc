// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protocol/user_dictionary_storage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "protocol/user_dictionary_storage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace mozc {
namespace user_dictionary {

namespace {

const ::google::protobuf::Descriptor* UserDictionary_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserDictionary_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserDictionary_Entry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserDictionary_Entry_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* UserDictionary_PosType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* UserDictionaryStorage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserDictionaryStorage_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* UserDictionaryStorage_StorageType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* UserDictionaryCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserDictionaryCommand_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* UserDictionaryCommand_CommandType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* UserDictionaryCommandStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserDictionaryCommandStatus_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* UserDictionaryCommandStatus_Status_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_protocol_2fuser_5fdictionary_5fstorage_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_protocol_2fuser_5fdictionary_5fstorage_2eproto() {
  protobuf_AddDesc_protocol_2fuser_5fdictionary_5fstorage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "protocol/user_dictionary_storage.proto");
  GOOGLE_CHECK(file != NULL);
  UserDictionary_descriptor_ = file->message_type(0);
  static const int UserDictionary_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserDictionary, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserDictionary, enabled_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserDictionary, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserDictionary, entries_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserDictionary, removed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserDictionary, syncable_),
  };
  UserDictionary_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      UserDictionary_descriptor_,
      UserDictionary::default_instance_,
      UserDictionary_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserDictionary, _has_bits_[0]),
      -1,
      -1,
      sizeof(UserDictionary),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserDictionary, _internal_metadata_),
      -1);
  UserDictionary_Entry_descriptor_ = UserDictionary_descriptor_->nested_type(0);
  static const int UserDictionary_Entry_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserDictionary_Entry, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserDictionary_Entry, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserDictionary_Entry, comment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserDictionary_Entry, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserDictionary_Entry, removed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserDictionary_Entry, auto_registered_),
  };
  UserDictionary_Entry_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      UserDictionary_Entry_descriptor_,
      UserDictionary_Entry::default_instance_,
      UserDictionary_Entry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserDictionary_Entry, _has_bits_[0]),
      -1,
      -1,
      sizeof(UserDictionary_Entry),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserDictionary_Entry, _internal_metadata_),
      -1);
  UserDictionary_PosType_descriptor_ = UserDictionary_descriptor_->enum_type(0);
  UserDictionaryStorage_descriptor_ = file->message_type(1);
  static const int UserDictionaryStorage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserDictionaryStorage, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserDictionaryStorage, dictionaries_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserDictionaryStorage, storage_type_),
  };
  UserDictionaryStorage_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      UserDictionaryStorage_descriptor_,
      UserDictionaryStorage::default_instance_,
      UserDictionaryStorage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserDictionaryStorage, _has_bits_[0]),
      -1,
      -1,
      sizeof(UserDictionaryStorage),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserDictionaryStorage, _internal_metadata_),
      -1);
  UserDictionaryStorage_StorageType_descriptor_ = UserDictionaryStorage_descriptor_->enum_type(0);
  UserDictionaryCommand_descriptor_ = file->message_type(2);
  static const int UserDictionaryCommand_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserDictionaryCommand, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserDictionaryCommand, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserDictionaryCommand, dictionary_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserDictionaryCommand, dictionary_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserDictionaryCommand, entry_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserDictionaryCommand, entry_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserDictionaryCommand, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserDictionaryCommand, ensure_non_empty_storage_),
  };
  UserDictionaryCommand_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      UserDictionaryCommand_descriptor_,
      UserDictionaryCommand::default_instance_,
      UserDictionaryCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserDictionaryCommand, _has_bits_[0]),
      -1,
      -1,
      sizeof(UserDictionaryCommand),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserDictionaryCommand, _internal_metadata_),
      -1);
  UserDictionaryCommand_CommandType_descriptor_ = UserDictionaryCommand_descriptor_->enum_type(0);
  UserDictionaryCommandStatus_descriptor_ = file->message_type(3);
  static const int UserDictionaryCommandStatus_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserDictionaryCommandStatus, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserDictionaryCommandStatus, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserDictionaryCommandStatus, storage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserDictionaryCommandStatus, dictionary_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserDictionaryCommandStatus, entry_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserDictionaryCommandStatus, entries_),
  };
  UserDictionaryCommandStatus_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      UserDictionaryCommandStatus_descriptor_,
      UserDictionaryCommandStatus::default_instance_,
      UserDictionaryCommandStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserDictionaryCommandStatus, _has_bits_[0]),
      -1,
      -1,
      sizeof(UserDictionaryCommandStatus),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserDictionaryCommandStatus, _internal_metadata_),
      -1);
  UserDictionaryCommandStatus_Status_descriptor_ = UserDictionaryCommandStatus_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_protocol_2fuser_5fdictionary_5fstorage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      UserDictionary_descriptor_, &UserDictionary::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      UserDictionary_Entry_descriptor_, &UserDictionary_Entry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      UserDictionaryStorage_descriptor_, &UserDictionaryStorage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      UserDictionaryCommand_descriptor_, &UserDictionaryCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      UserDictionaryCommandStatus_descriptor_, &UserDictionaryCommandStatus::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_protocol_2fuser_5fdictionary_5fstorage_2eproto() {
  delete UserDictionary::default_instance_;
  delete UserDictionary_reflection_;
  delete UserDictionary_Entry::default_instance_;
  delete UserDictionary_Entry_reflection_;
  delete UserDictionaryStorage::default_instance_;
  delete UserDictionaryStorage_reflection_;
  delete UserDictionaryCommand::default_instance_;
  delete UserDictionaryCommand_reflection_;
  delete UserDictionaryCommandStatus::default_instance_;
  delete UserDictionaryCommandStatus_reflection_;
}

void protobuf_AddDesc_protocol_2fuser_5fdictionary_5fstorage_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_protocol_2fuser_5fdictionary_5fstorage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n&protocol/user_dictionary_storage.proto"
    "\022\024mozc.user_dictionary\"\312\t\n\016UserDictionar"
    "y\022\r\n\002id\030\001 \001(\004:\0010\022\025\n\007enabled\030\002 \001(\010:\004true\022"
    "\016\n\004name\030\003 \001(\t:\000\022;\n\007entries\030\004 \003(\0132*.mozc."
    "user_dictionary.UserDictionary.Entry\022\026\n\007"
    "removed\030\005 \001(\010:\005false\022\027\n\010syncable\030\006 \001(\010:\005"
    "false\032\263\001\n\005Entry\022\r\n\003key\030\001 \001(\t:\000\022\017\n\005value\030"
    "\002 \001(\t:\000\022\021\n\007comment\030\004 \001(\t:\000\0229\n\003pos\030\005 \001(\0162"
    ",.mozc.user_dictionary.UserDictionary.Po"
    "sType\022\026\n\007removed\030\n \001(\010:\005false\022\036\n\017auto_re"
    "gistered\030\013 \001(\010:\005falseJ\004\010\003\020\004\"\335\006\n\007PosType\022"
    "\010\n\004NOUN\020\001\022\020\n\014ABBREVIATION\020\002\022\023\n\017SUGGESTIO"
    "N_ONLY\020\003\022\017\n\013PROPER_NOUN\020\004\022\021\n\rPERSONAL_NA"
    "ME\020\005\022\017\n\013FAMILY_NAME\020\006\022\016\n\nFIRST_NAME\020\007\022\025\n"
    "\021ORGANIZATION_NAME\020\010\022\016\n\nPLACE_NAME\020\t\022!\n\035"
    "SA_IRREGULAR_CONJUGATION_NOUN\020\n\022\031\n\025ADJEC"
    "TIVE_VERBAL_NOUN\020\013\022\n\n\006NUMBER\020\014\022\014\n\010ALPHAB"
    "ET\020\r\022\n\n\006SYMBOL\020\016\022\014\n\010EMOTICON\020\017\022\n\n\006ADVERB"
    "\020\020\022\026\n\022PRENOUN_ADJECTIVAL\020\021\022\017\n\013CONJUNCTIO"
    "N\020\022\022\020\n\014INTERJECTION\020\023\022\n\n\006PREFIX\020\024\022\022\n\016COU"
    "NTER_SUFFIX\020\025\022\022\n\016GENERIC_SUFFIX\020\026\022\026\n\022PER"
    "SON_NAME_SUFFIX\020\027\022\025\n\021PLACE_NAME_SUFFIX\020\030"
    "\022\022\n\016WA_GROUP1_VERB\020\031\022\022\n\016KA_GROUP1_VERB\020\032"
    "\022\022\n\016SA_GROUP1_VERB\020\033\022\022\n\016TA_GROUP1_VERB\020\034"
    "\022\022\n\016NA_GROUP1_VERB\020\035\022\022\n\016MA_GROUP1_VERB\020\036"
    "\022\022\n\016RA_GROUP1_VERB\020\037\022\022\n\016GA_GROUP1_VERB\020 "
    "\022\022\n\016BA_GROUP1_VERB\020!\022\022\n\016HA_GROUP1_VERB\020\""
    "\022\017\n\013GROUP2_VERB\020#\022\024\n\020KURU_GROUP3_VERB\020$\022"
    "\024\n\020SURU_GROUP3_VERB\020%\022\024\n\020ZURU_GROUP3_VER"
    "B\020&\022\022\n\016RU_GROUP3_VERB\020\'\022\r\n\tADJECTIVE\020(\022\034"
    "\n\030SENTENCE_ENDING_PARTICLE\020)\022\017\n\013PUNCTUAT"
    "ION\020*\022\026\n\022FREE_STANDING_WORD\020+\022\024\n\020SUPPRES"
    "SION_WORD\020,\"\351\001\n\025UserDictionaryStorage\022\022\n"
    "\007version\030\001 \001(\005:\0010\022:\n\014dictionaries\030\002 \003(\0132"
    "$.mozc.user_dictionary.UserDictionary\022W\n"
    "\014storage_type\030\n \001(\01627.mozc.user_dictiona"
    "ry.UserDictionaryStorage.StorageType:\010SN"
    "APSHOT\"\'\n\013StorageType\022\014\n\010SNAPSHOT\020\001\022\n\n\006U"
    "PDATE\020\002\"\226\006\n\025UserDictionaryCommand\022E\n\004typ"
    "e\030\001 \002(\01627.mozc.user_dictionary.UserDicti"
    "onaryCommand.CommandType\022\022\n\nsession_id\030\002"
    " \001(\004\022\025\n\rdictionary_id\030\003 \001(\004\022\027\n\017dictionar"
    "y_name\030\004 \001(\t\022\023\n\013entry_index\030\005 \003(\005\0229\n\005ent"
    "ry\030\006 \001(\0132*.mozc.user_dictionary.UserDict"
    "ionary.Entry\022\014\n\004data\030\007 \001(\t\022 \n\030ensure_non"
    "_empty_storage\030\010 \001(\010\"\361\003\n\013CommandType\022\020\n\014"
    "NO_OPERATION\020\000\022\021\n\rCLEAR_STORAGE\020\001\022\022\n\016CRE"
    "ATE_SESSION\020\002\022\022\n\016DELETE_SESSION\020\003\022\037\n\033SET"
    "_DEFAULT_DICTIONARY_NAME\020\004\022\025\n\021CHECK_UNDO"
    "ABILITY\020\005\022\010\n\004UNDO\020\006\022\010\n\004LOAD\020\007\022\010\n\004SAVE\020\010\022"
    "!\n\035GET_USER_DICTIONARY_NAME_LIST\020\t\022\022\n\016GE"
    "T_ENTRY_SIZE\020\n\022\026\n\022OBSOLETE_GET_ENTRY\020\013\022%"
    "\n!CHECK_NEW_DICTIONARY_AVAILABILITY\020\014\022\025\n"
    "\021CREATE_DICTIONARY\020\r\022\025\n\021DELETE_DICTIONAR"
    "Y\020\016\022\025\n\021RENAME_DICTIONARY\020\017\022 \n\034CHECK_NEW_"
    "ENTRY_AVAILABILITY\020\020\022\r\n\tADD_ENTRY\020\021\022\016\n\nE"
    "DIT_ENTRY\020\022\022\020\n\014DELETE_ENTRY\020\023\022\017\n\013IMPORT_"
    "DATA\020\024\022\017\n\013GET_STORAGE\020\025\022\017\n\013GET_ENTRIES\020\026"
    "\"\266\010\n\033UserDictionaryCommandStatus\022H\n\006stat"
    "us\030\001 \002(\01628.mozc.user_dictionary.UserDict"
    "ionaryCommandStatus.Status\022\022\n\nsession_id"
    "\030\002 \001(\004\022<\n\007storage\030\003 \001(\0132+.mozc.user_dict"
    "ionary.UserDictionaryStorage\022\025\n\rdictiona"
    "ry_id\030\005 \001(\004\022\022\n\nentry_size\030\006 \001(\r\022;\n\007entri"
    "es\030\007 \003(\0132*.mozc.user_dictionary.UserDict"
    "ionary.Entry\"\214\006\n\006Status\022#\n\037USER_DICTIONA"
    "RY_COMMAND_SUCCESS\020\001\022\021\n\rUNKNOWN_ERROR\020\002\022"
    "\023\n\017UNKNOWN_COMMAND\020\003\022\024\n\020INVALID_ARGUMENT"
    "\020\004\022\026\n\022UNKNOWN_SESSION_ID\020\005\022\022\n\016FILE_NOT_F"
    "OUND\020\006\022\027\n\023INVALID_FILE_FORMAT\020\007\022\034\n\030FILE_"
    "SIZE_LIMIT_EXCEEDED\020\010\022\"\n\036DICTIONARY_SIZE"
    "_LIMIT_EXCEEDED\020\t\022\035\n\031ENTRY_SIZE_LIMIT_EX"
    "CEEDED\020\n\022\031\n\025UNKNOWN_DICTIONARY_ID\020\013\022\034\n\030E"
    "NTRY_INDEX_OUT_OF_RANGE\020\014\022\031\n\025DICTIONARY_"
    "NAME_EMPTY\020\r\022\034\n\030DICTIONARY_NAME_TOO_LONG"
    "\020\016\022.\n*DICTIONARY_NAME_CONTAINS_INVALID_C"
    "HARACTER\020\017\022\036\n\032DICTIONARY_NAME_DUPLICATED"
    "\020\020\022\021\n\rREADING_EMPTY\020\021\022\024\n\020READING_TOO_LON"
    "G\020\022\022&\n\"READING_CONTAINS_INVALID_CHARACTE"
    "R\020\023\022\016\n\nWORD_EMPTY\020\024\022\021\n\rWORD_TOO_LONG\020\025\022#"
    "\n\037WORD_CONTAINS_INVALID_CHARACTER\020\026\022\024\n\020I"
    "NVALID_POS_TYPE\020\027\022\024\n\020COMMENT_TOO_LONG\020\030\022"
    "&\n\"COMMENT_CONTAINS_INVALID_CHARACTER\020\031\022"
    "\031\n\025IMPORT_TOO_MANY_WORDS\020\032\022\032\n\026IMPORT_INV"
    "ALID_ENTRIES\020\033\022\023\n\017NO_UNDO_HISTORY\020\034J\004\010\004\020"
    "\005BL\n.org.mozc.android.inputmethod.japane"
    "se.protobufB\032ProtoUserDictionaryStorage", 3479);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "protocol/user_dictionary_storage.proto", &protobuf_RegisterTypes);
  UserDictionary::default_instance_ = new UserDictionary();
  UserDictionary_Entry::default_instance_ = new UserDictionary_Entry();
  UserDictionaryStorage::default_instance_ = new UserDictionaryStorage();
  UserDictionaryCommand::default_instance_ = new UserDictionaryCommand();
  UserDictionaryCommandStatus::default_instance_ = new UserDictionaryCommandStatus();
  UserDictionary::default_instance_->InitAsDefaultInstance();
  UserDictionary_Entry::default_instance_->InitAsDefaultInstance();
  UserDictionaryStorage::default_instance_->InitAsDefaultInstance();
  UserDictionaryCommand::default_instance_->InitAsDefaultInstance();
  UserDictionaryCommandStatus::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_protocol_2fuser_5fdictionary_5fstorage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_protocol_2fuser_5fdictionary_5fstorage_2eproto {
  StaticDescriptorInitializer_protocol_2fuser_5fdictionary_5fstorage_2eproto() {
    protobuf_AddDesc_protocol_2fuser_5fdictionary_5fstorage_2eproto();
  }
} static_descriptor_initializer_protocol_2fuser_5fdictionary_5fstorage_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* UserDictionary_PosType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserDictionary_PosType_descriptor_;
}
bool UserDictionary_PosType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const UserDictionary_PosType UserDictionary::NOUN;
const UserDictionary_PosType UserDictionary::ABBREVIATION;
const UserDictionary_PosType UserDictionary::SUGGESTION_ONLY;
const UserDictionary_PosType UserDictionary::PROPER_NOUN;
const UserDictionary_PosType UserDictionary::PERSONAL_NAME;
const UserDictionary_PosType UserDictionary::FAMILY_NAME;
const UserDictionary_PosType UserDictionary::FIRST_NAME;
const UserDictionary_PosType UserDictionary::ORGANIZATION_NAME;
const UserDictionary_PosType UserDictionary::PLACE_NAME;
const UserDictionary_PosType UserDictionary::SA_IRREGULAR_CONJUGATION_NOUN;
const UserDictionary_PosType UserDictionary::ADJECTIVE_VERBAL_NOUN;
const UserDictionary_PosType UserDictionary::NUMBER;
const UserDictionary_PosType UserDictionary::ALPHABET;
const UserDictionary_PosType UserDictionary::SYMBOL;
const UserDictionary_PosType UserDictionary::EMOTICON;
const UserDictionary_PosType UserDictionary::ADVERB;
const UserDictionary_PosType UserDictionary::PRENOUN_ADJECTIVAL;
const UserDictionary_PosType UserDictionary::CONJUNCTION;
const UserDictionary_PosType UserDictionary::INTERJECTION;
const UserDictionary_PosType UserDictionary::PREFIX;
const UserDictionary_PosType UserDictionary::COUNTER_SUFFIX;
const UserDictionary_PosType UserDictionary::GENERIC_SUFFIX;
const UserDictionary_PosType UserDictionary::PERSON_NAME_SUFFIX;
const UserDictionary_PosType UserDictionary::PLACE_NAME_SUFFIX;
const UserDictionary_PosType UserDictionary::WA_GROUP1_VERB;
const UserDictionary_PosType UserDictionary::KA_GROUP1_VERB;
const UserDictionary_PosType UserDictionary::SA_GROUP1_VERB;
const UserDictionary_PosType UserDictionary::TA_GROUP1_VERB;
const UserDictionary_PosType UserDictionary::NA_GROUP1_VERB;
const UserDictionary_PosType UserDictionary::MA_GROUP1_VERB;
const UserDictionary_PosType UserDictionary::RA_GROUP1_VERB;
const UserDictionary_PosType UserDictionary::GA_GROUP1_VERB;
const UserDictionary_PosType UserDictionary::BA_GROUP1_VERB;
const UserDictionary_PosType UserDictionary::HA_GROUP1_VERB;
const UserDictionary_PosType UserDictionary::GROUP2_VERB;
const UserDictionary_PosType UserDictionary::KURU_GROUP3_VERB;
const UserDictionary_PosType UserDictionary::SURU_GROUP3_VERB;
const UserDictionary_PosType UserDictionary::ZURU_GROUP3_VERB;
const UserDictionary_PosType UserDictionary::RU_GROUP3_VERB;
const UserDictionary_PosType UserDictionary::ADJECTIVE;
const UserDictionary_PosType UserDictionary::SENTENCE_ENDING_PARTICLE;
const UserDictionary_PosType UserDictionary::PUNCTUATION;
const UserDictionary_PosType UserDictionary::FREE_STANDING_WORD;
const UserDictionary_PosType UserDictionary::SUPPRESSION_WORD;
const UserDictionary_PosType UserDictionary::PosType_MIN;
const UserDictionary_PosType UserDictionary::PosType_MAX;
const int UserDictionary::PosType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserDictionary_Entry::kKeyFieldNumber;
const int UserDictionary_Entry::kValueFieldNumber;
const int UserDictionary_Entry::kCommentFieldNumber;
const int UserDictionary_Entry::kPosFieldNumber;
const int UserDictionary_Entry::kRemovedFieldNumber;
const int UserDictionary_Entry::kAutoRegisteredFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserDictionary_Entry::UserDictionary_Entry()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mozc.user_dictionary.UserDictionary.Entry)
}

void UserDictionary_Entry::InitAsDefaultInstance() {
}

UserDictionary_Entry::UserDictionary_Entry(const UserDictionary_Entry& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mozc.user_dictionary.UserDictionary.Entry)
}

void UserDictionary_Entry::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  comment_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pos_ = 1;
  removed_ = false;
  auto_registered_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserDictionary_Entry::~UserDictionary_Entry() {
  // @@protoc_insertion_point(destructor:mozc.user_dictionary.UserDictionary.Entry)
  SharedDtor();
}

void UserDictionary_Entry::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  comment_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void UserDictionary_Entry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserDictionary_Entry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserDictionary_Entry_descriptor_;
}

const UserDictionary_Entry& UserDictionary_Entry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2fuser_5fdictionary_5fstorage_2eproto();
  return *default_instance_;
}

UserDictionary_Entry* UserDictionary_Entry::default_instance_ = NULL;

UserDictionary_Entry* UserDictionary_Entry::New(::google::protobuf::Arena* arena) const {
  UserDictionary_Entry* n = new UserDictionary_Entry;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UserDictionary_Entry::Clear() {
// @@protoc_insertion_point(message_clear_start:mozc.user_dictionary.UserDictionary.Entry)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(UserDictionary_Entry, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<UserDictionary_Entry*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 63u) {
    ZR_(removed_, auto_registered_);
    if (has_key()) {
      key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_value()) {
      value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_comment()) {
      comment_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    pos_ = 1;
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool UserDictionary_Entry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mozc.user_dictionary.UserDictionary.Entry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string key = 1 [default = ""];
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mozc.user_dictionary.UserDictionary.Entry.key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // optional string value = 2 [default = ""];
      case 2: {
        if (tag == 18) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mozc.user_dictionary.UserDictionary.Entry.value");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_comment;
        break;
      }

      // optional string comment = 4 [default = ""];
      case 4: {
        if (tag == 34) {
         parse_comment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_comment()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->comment().data(), this->comment().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mozc.user_dictionary.UserDictionary.Entry.comment");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_pos;
        break;
      }

      // optional .mozc.user_dictionary.UserDictionary.PosType pos = 5;
      case 5: {
        if (tag == 40) {
         parse_pos:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mozc::user_dictionary::UserDictionary_PosType_IsValid(value)) {
            set_pos(static_cast< ::mozc::user_dictionary::UserDictionary_PosType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_removed;
        break;
      }

      // optional bool removed = 10 [default = false];
      case 10: {
        if (tag == 80) {
         parse_removed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &removed_)));
          set_has_removed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_auto_registered;
        break;
      }

      // optional bool auto_registered = 11 [default = false];
      case 11: {
        if (tag == 88) {
         parse_auto_registered:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &auto_registered_)));
          set_has_auto_registered();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mozc.user_dictionary.UserDictionary.Entry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mozc.user_dictionary.UserDictionary.Entry)
  return false;
#undef DO_
}

void UserDictionary_Entry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mozc.user_dictionary.UserDictionary.Entry)
  // optional string key = 1 [default = ""];
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mozc.user_dictionary.UserDictionary.Entry.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // optional string value = 2 [default = ""];
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mozc.user_dictionary.UserDictionary.Entry.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  // optional string comment = 4 [default = ""];
  if (has_comment()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->comment().data(), this->comment().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mozc.user_dictionary.UserDictionary.Entry.comment");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->comment(), output);
  }

  // optional .mozc.user_dictionary.UserDictionary.PosType pos = 5;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->pos(), output);
  }

  // optional bool removed = 10 [default = false];
  if (has_removed()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->removed(), output);
  }

  // optional bool auto_registered = 11 [default = false];
  if (has_auto_registered()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->auto_registered(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mozc.user_dictionary.UserDictionary.Entry)
}

::google::protobuf::uint8* UserDictionary_Entry::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mozc.user_dictionary.UserDictionary.Entry)
  // optional string key = 1 [default = ""];
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mozc.user_dictionary.UserDictionary.Entry.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // optional string value = 2 [default = ""];
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mozc.user_dictionary.UserDictionary.Entry.value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  // optional string comment = 4 [default = ""];
  if (has_comment()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->comment().data(), this->comment().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mozc.user_dictionary.UserDictionary.Entry.comment");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->comment(), target);
  }

  // optional .mozc.user_dictionary.UserDictionary.PosType pos = 5;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->pos(), target);
  }

  // optional bool removed = 10 [default = false];
  if (has_removed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->removed(), target);
  }

  // optional bool auto_registered = 11 [default = false];
  if (has_auto_registered()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->auto_registered(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mozc.user_dictionary.UserDictionary.Entry)
  return target;
}

int UserDictionary_Entry::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:mozc.user_dictionary.UserDictionary.Entry)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 63u) {
    // optional string key = 1 [default = ""];
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // optional string value = 2 [default = ""];
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

    // optional string comment = 4 [default = ""];
    if (has_comment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->comment());
    }

    // optional .mozc.user_dictionary.UserDictionary.PosType pos = 5;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->pos());
    }

    // optional bool removed = 10 [default = false];
    if (has_removed()) {
      total_size += 1 + 1;
    }

    // optional bool auto_registered = 11 [default = false];
    if (has_auto_registered()) {
      total_size += 1 + 1;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserDictionary_Entry::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mozc.user_dictionary.UserDictionary.Entry)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const UserDictionary_Entry* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const UserDictionary_Entry>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mozc.user_dictionary.UserDictionary.Entry)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mozc.user_dictionary.UserDictionary.Entry)
    MergeFrom(*source);
  }
}

void UserDictionary_Entry::MergeFrom(const UserDictionary_Entry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mozc.user_dictionary.UserDictionary.Entry)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_has_key();
      key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
    }
    if (from.has_value()) {
      set_has_value();
      value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
    }
    if (from.has_comment()) {
      set_has_comment();
      comment_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.comment_);
    }
    if (from.has_pos()) {
      set_pos(from.pos());
    }
    if (from.has_removed()) {
      set_removed(from.removed());
    }
    if (from.has_auto_registered()) {
      set_auto_registered(from.auto_registered());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void UserDictionary_Entry::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mozc.user_dictionary.UserDictionary.Entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserDictionary_Entry::CopyFrom(const UserDictionary_Entry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mozc.user_dictionary.UserDictionary.Entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserDictionary_Entry::IsInitialized() const {

  return true;
}

void UserDictionary_Entry::Swap(UserDictionary_Entry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserDictionary_Entry::InternalSwap(UserDictionary_Entry* other) {
  key_.Swap(&other->key_);
  value_.Swap(&other->value_);
  comment_.Swap(&other->comment_);
  std::swap(pos_, other->pos_);
  std::swap(removed_, other->removed_);
  std::swap(auto_registered_, other->auto_registered_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserDictionary_Entry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserDictionary_Entry_descriptor_;
  metadata.reflection = UserDictionary_Entry_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserDictionary::kIdFieldNumber;
const int UserDictionary::kEnabledFieldNumber;
const int UserDictionary::kNameFieldNumber;
const int UserDictionary::kEntriesFieldNumber;
const int UserDictionary::kRemovedFieldNumber;
const int UserDictionary::kSyncableFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserDictionary::UserDictionary()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mozc.user_dictionary.UserDictionary)
}

void UserDictionary::InitAsDefaultInstance() {
}

UserDictionary::UserDictionary(const UserDictionary& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mozc.user_dictionary.UserDictionary)
}

void UserDictionary::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  enabled_ = true;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  removed_ = false;
  syncable_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserDictionary::~UserDictionary() {
  // @@protoc_insertion_point(destructor:mozc.user_dictionary.UserDictionary)
  SharedDtor();
}

void UserDictionary::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void UserDictionary::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserDictionary::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserDictionary_descriptor_;
}

const UserDictionary& UserDictionary::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2fuser_5fdictionary_5fstorage_2eproto();
  return *default_instance_;
}

UserDictionary* UserDictionary::default_instance_ = NULL;

UserDictionary* UserDictionary::New(::google::protobuf::Arena* arena) const {
  UserDictionary* n = new UserDictionary;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UserDictionary::Clear() {
// @@protoc_insertion_point(message_clear_start:mozc.user_dictionary.UserDictionary)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(UserDictionary, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<UserDictionary*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 55u) {
    ZR_(removed_, syncable_);
    id_ = GOOGLE_ULONGLONG(0);
    enabled_ = true;
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  entries_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool UserDictionary::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mozc.user_dictionary.UserDictionary)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_enabled;
        break;
      }

      // optional bool enabled = 2 [default = true];
      case 2: {
        if (tag == 16) {
         parse_enabled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enabled_)));
          set_has_enabled();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3 [default = ""];
      case 3: {
        if (tag == 26) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mozc.user_dictionary.UserDictionary.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_entries;
        break;
      }

      // repeated .mozc.user_dictionary.UserDictionary.Entry entries = 4;
      case 4: {
        if (tag == 34) {
         parse_entries:
          DO_(input->IncrementRecursionDepth());
         parse_loop_entries:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_entries()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_entries;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(40)) goto parse_removed;
        break;
      }

      // optional bool removed = 5 [default = false];
      case 5: {
        if (tag == 40) {
         parse_removed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &removed_)));
          set_has_removed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_syncable;
        break;
      }

      // optional bool syncable = 6 [default = false];
      case 6: {
        if (tag == 48) {
         parse_syncable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &syncable_)));
          set_has_syncable();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mozc.user_dictionary.UserDictionary)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mozc.user_dictionary.UserDictionary)
  return false;
#undef DO_
}

void UserDictionary::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mozc.user_dictionary.UserDictionary)
  // optional uint64 id = 1 [default = 0];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional bool enabled = 2 [default = true];
  if (has_enabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->enabled(), output);
  }

  // optional string name = 3 [default = ""];
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mozc.user_dictionary.UserDictionary.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // repeated .mozc.user_dictionary.UserDictionary.Entry entries = 4;
  for (unsigned int i = 0, n = this->entries_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->entries(i), output);
  }

  // optional bool removed = 5 [default = false];
  if (has_removed()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->removed(), output);
  }

  // optional bool syncable = 6 [default = false];
  if (has_syncable()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->syncable(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mozc.user_dictionary.UserDictionary)
}

::google::protobuf::uint8* UserDictionary::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mozc.user_dictionary.UserDictionary)
  // optional uint64 id = 1 [default = 0];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // optional bool enabled = 2 [default = true];
  if (has_enabled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->enabled(), target);
  }

  // optional string name = 3 [default = ""];
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mozc.user_dictionary.UserDictionary.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // repeated .mozc.user_dictionary.UserDictionary.Entry entries = 4;
  for (unsigned int i = 0, n = this->entries_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->entries(i), false, target);
  }

  // optional bool removed = 5 [default = false];
  if (has_removed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->removed(), target);
  }

  // optional bool syncable = 6 [default = false];
  if (has_syncable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->syncable(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mozc.user_dictionary.UserDictionary)
  return target;
}

int UserDictionary::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:mozc.user_dictionary.UserDictionary)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 55u) {
    // optional uint64 id = 1 [default = 0];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional bool enabled = 2 [default = true];
    if (has_enabled()) {
      total_size += 1 + 1;
    }

    // optional string name = 3 [default = ""];
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional bool removed = 5 [default = false];
    if (has_removed()) {
      total_size += 1 + 1;
    }

    // optional bool syncable = 6 [default = false];
    if (has_syncable()) {
      total_size += 1 + 1;
    }

  }
  // repeated .mozc.user_dictionary.UserDictionary.Entry entries = 4;
  total_size += 1 * this->entries_size();
  for (int i = 0; i < this->entries_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->entries(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserDictionary::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mozc.user_dictionary.UserDictionary)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const UserDictionary* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const UserDictionary>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mozc.user_dictionary.UserDictionary)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mozc.user_dictionary.UserDictionary)
    MergeFrom(*source);
  }
}

void UserDictionary::MergeFrom(const UserDictionary& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mozc.user_dictionary.UserDictionary)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  entries_.MergeFrom(from.entries_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_enabled()) {
      set_enabled(from.enabled());
    }
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_removed()) {
      set_removed(from.removed());
    }
    if (from.has_syncable()) {
      set_syncable(from.syncable());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void UserDictionary::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mozc.user_dictionary.UserDictionary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserDictionary::CopyFrom(const UserDictionary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mozc.user_dictionary.UserDictionary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserDictionary::IsInitialized() const {

  return true;
}

void UserDictionary::Swap(UserDictionary* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserDictionary::InternalSwap(UserDictionary* other) {
  std::swap(id_, other->id_);
  std::swap(enabled_, other->enabled_);
  name_.Swap(&other->name_);
  entries_.UnsafeArenaSwap(&other->entries_);
  std::swap(removed_, other->removed_);
  std::swap(syncable_, other->syncable_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserDictionary::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserDictionary_descriptor_;
  metadata.reflection = UserDictionary_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserDictionary_Entry

// optional string key = 1 [default = ""];
bool UserDictionary_Entry::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UserDictionary_Entry::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
void UserDictionary_Entry::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
void UserDictionary_Entry::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
 const ::std::string& UserDictionary_Entry::key() const {
  // @@protoc_insertion_point(field_get:mozc.user_dictionary.UserDictionary.Entry.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UserDictionary_Entry::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mozc.user_dictionary.UserDictionary.Entry.key)
}
 void UserDictionary_Entry::set_key(const char* value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mozc.user_dictionary.UserDictionary.Entry.key)
}
 void UserDictionary_Entry::set_key(const char* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mozc.user_dictionary.UserDictionary.Entry.key)
}
 ::std::string* UserDictionary_Entry::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:mozc.user_dictionary.UserDictionary.Entry.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* UserDictionary_Entry::release_key() {
  // @@protoc_insertion_point(field_release:mozc.user_dictionary.UserDictionary.Entry.key)
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UserDictionary_Entry::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:mozc.user_dictionary.UserDictionary.Entry.key)
}

// optional string value = 2 [default = ""];
bool UserDictionary_Entry::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void UserDictionary_Entry::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
void UserDictionary_Entry::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
void UserDictionary_Entry::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}
 const ::std::string& UserDictionary_Entry::value() const {
  // @@protoc_insertion_point(field_get:mozc.user_dictionary.UserDictionary.Entry.value)
  return value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UserDictionary_Entry::set_value(const ::std::string& value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mozc.user_dictionary.UserDictionary.Entry.value)
}
 void UserDictionary_Entry::set_value(const char* value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mozc.user_dictionary.UserDictionary.Entry.value)
}
 void UserDictionary_Entry::set_value(const char* value, size_t size) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mozc.user_dictionary.UserDictionary.Entry.value)
}
 ::std::string* UserDictionary_Entry::mutable_value() {
  set_has_value();
  // @@protoc_insertion_point(field_mutable:mozc.user_dictionary.UserDictionary.Entry.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* UserDictionary_Entry::release_value() {
  // @@protoc_insertion_point(field_release:mozc.user_dictionary.UserDictionary.Entry.value)
  clear_has_value();
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UserDictionary_Entry::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    set_has_value();
  } else {
    clear_has_value();
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:mozc.user_dictionary.UserDictionary.Entry.value)
}

// optional string comment = 4 [default = ""];
bool UserDictionary_Entry::has_comment() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void UserDictionary_Entry::set_has_comment() {
  _has_bits_[0] |= 0x00000004u;
}
void UserDictionary_Entry::clear_has_comment() {
  _has_bits_[0] &= ~0x00000004u;
}
void UserDictionary_Entry::clear_comment() {
  comment_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_comment();
}
 const ::std::string& UserDictionary_Entry::comment() const {
  // @@protoc_insertion_point(field_get:mozc.user_dictionary.UserDictionary.Entry.comment)
  return comment_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UserDictionary_Entry::set_comment(const ::std::string& value) {
  set_has_comment();
  comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mozc.user_dictionary.UserDictionary.Entry.comment)
}
 void UserDictionary_Entry::set_comment(const char* value) {
  set_has_comment();
  comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mozc.user_dictionary.UserDictionary.Entry.comment)
}
 void UserDictionary_Entry::set_comment(const char* value, size_t size) {
  set_has_comment();
  comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mozc.user_dictionary.UserDictionary.Entry.comment)
}
 ::std::string* UserDictionary_Entry::mutable_comment() {
  set_has_comment();
  // @@protoc_insertion_point(field_mutable:mozc.user_dictionary.UserDictionary.Entry.comment)
  return comment_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* UserDictionary_Entry::release_comment() {
  // @@protoc_insertion_point(field_release:mozc.user_dictionary.UserDictionary.Entry.comment)
  clear_has_comment();
  return comment_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UserDictionary_Entry::set_allocated_comment(::std::string* comment) {
  if (comment != NULL) {
    set_has_comment();
  } else {
    clear_has_comment();
  }
  comment_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), comment);
  // @@protoc_insertion_point(field_set_allocated:mozc.user_dictionary.UserDictionary.Entry.comment)
}

// optional .mozc.user_dictionary.UserDictionary.PosType pos = 5;
bool UserDictionary_Entry::has_pos() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void UserDictionary_Entry::set_has_pos() {
  _has_bits_[0] |= 0x00000008u;
}
void UserDictionary_Entry::clear_has_pos() {
  _has_bits_[0] &= ~0x00000008u;
}
void UserDictionary_Entry::clear_pos() {
  pos_ = 1;
  clear_has_pos();
}
 ::mozc::user_dictionary::UserDictionary_PosType UserDictionary_Entry::pos() const {
  // @@protoc_insertion_point(field_get:mozc.user_dictionary.UserDictionary.Entry.pos)
  return static_cast< ::mozc::user_dictionary::UserDictionary_PosType >(pos_);
}
 void UserDictionary_Entry::set_pos(::mozc::user_dictionary::UserDictionary_PosType value) {
  assert(::mozc::user_dictionary::UserDictionary_PosType_IsValid(value));
  set_has_pos();
  pos_ = value;
  // @@protoc_insertion_point(field_set:mozc.user_dictionary.UserDictionary.Entry.pos)
}

// optional bool removed = 10 [default = false];
bool UserDictionary_Entry::has_removed() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void UserDictionary_Entry::set_has_removed() {
  _has_bits_[0] |= 0x00000010u;
}
void UserDictionary_Entry::clear_has_removed() {
  _has_bits_[0] &= ~0x00000010u;
}
void UserDictionary_Entry::clear_removed() {
  removed_ = false;
  clear_has_removed();
}
 bool UserDictionary_Entry::removed() const {
  // @@protoc_insertion_point(field_get:mozc.user_dictionary.UserDictionary.Entry.removed)
  return removed_;
}
 void UserDictionary_Entry::set_removed(bool value) {
  set_has_removed();
  removed_ = value;
  // @@protoc_insertion_point(field_set:mozc.user_dictionary.UserDictionary.Entry.removed)
}

// optional bool auto_registered = 11 [default = false];
bool UserDictionary_Entry::has_auto_registered() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void UserDictionary_Entry::set_has_auto_registered() {
  _has_bits_[0] |= 0x00000020u;
}
void UserDictionary_Entry::clear_has_auto_registered() {
  _has_bits_[0] &= ~0x00000020u;
}
void UserDictionary_Entry::clear_auto_registered() {
  auto_registered_ = false;
  clear_has_auto_registered();
}
 bool UserDictionary_Entry::auto_registered() const {
  // @@protoc_insertion_point(field_get:mozc.user_dictionary.UserDictionary.Entry.auto_registered)
  return auto_registered_;
}
 void UserDictionary_Entry::set_auto_registered(bool value) {
  set_has_auto_registered();
  auto_registered_ = value;
  // @@protoc_insertion_point(field_set:mozc.user_dictionary.UserDictionary.Entry.auto_registered)
}

// -------------------------------------------------------------------

// UserDictionary

// optional uint64 id = 1 [default = 0];
bool UserDictionary::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UserDictionary::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void UserDictionary::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void UserDictionary::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
 ::google::protobuf::uint64 UserDictionary::id() const {
  // @@protoc_insertion_point(field_get:mozc.user_dictionary.UserDictionary.id)
  return id_;
}
 void UserDictionary::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:mozc.user_dictionary.UserDictionary.id)
}

// optional bool enabled = 2 [default = true];
bool UserDictionary::has_enabled() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void UserDictionary::set_has_enabled() {
  _has_bits_[0] |= 0x00000002u;
}
void UserDictionary::clear_has_enabled() {
  _has_bits_[0] &= ~0x00000002u;
}
void UserDictionary::clear_enabled() {
  enabled_ = true;
  clear_has_enabled();
}
 bool UserDictionary::enabled() const {
  // @@protoc_insertion_point(field_get:mozc.user_dictionary.UserDictionary.enabled)
  return enabled_;
}
 void UserDictionary::set_enabled(bool value) {
  set_has_enabled();
  enabled_ = value;
  // @@protoc_insertion_point(field_set:mozc.user_dictionary.UserDictionary.enabled)
}

// optional string name = 3 [default = ""];
bool UserDictionary::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void UserDictionary::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
void UserDictionary::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
void UserDictionary::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& UserDictionary::name() const {
  // @@protoc_insertion_point(field_get:mozc.user_dictionary.UserDictionary.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UserDictionary::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mozc.user_dictionary.UserDictionary.name)
}
 void UserDictionary::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mozc.user_dictionary.UserDictionary.name)
}
 void UserDictionary::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mozc.user_dictionary.UserDictionary.name)
}
 ::std::string* UserDictionary::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:mozc.user_dictionary.UserDictionary.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* UserDictionary::release_name() {
  // @@protoc_insertion_point(field_release:mozc.user_dictionary.UserDictionary.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UserDictionary::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:mozc.user_dictionary.UserDictionary.name)
}

// repeated .mozc.user_dictionary.UserDictionary.Entry entries = 4;
int UserDictionary::entries_size() const {
  return entries_.size();
}
void UserDictionary::clear_entries() {
  entries_.Clear();
}
const ::mozc::user_dictionary::UserDictionary_Entry& UserDictionary::entries(int index) const {
  // @@protoc_insertion_point(field_get:mozc.user_dictionary.UserDictionary.entries)
  return entries_.Get(index);
}
::mozc::user_dictionary::UserDictionary_Entry* UserDictionary::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:mozc.user_dictionary.UserDictionary.entries)
  return entries_.Mutable(index);
}
::mozc::user_dictionary::UserDictionary_Entry* UserDictionary::add_entries() {
  // @@protoc_insertion_point(field_add:mozc.user_dictionary.UserDictionary.entries)
  return entries_.Add();
}
::google::protobuf::RepeatedPtrField< ::mozc::user_dictionary::UserDictionary_Entry >*
UserDictionary::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:mozc.user_dictionary.UserDictionary.entries)
  return &entries_;
}
const ::google::protobuf::RepeatedPtrField< ::mozc::user_dictionary::UserDictionary_Entry >&
UserDictionary::entries() const {
  // @@protoc_insertion_point(field_list:mozc.user_dictionary.UserDictionary.entries)
  return entries_;
}

// optional bool removed = 5 [default = false];
bool UserDictionary::has_removed() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void UserDictionary::set_has_removed() {
  _has_bits_[0] |= 0x00000010u;
}
void UserDictionary::clear_has_removed() {
  _has_bits_[0] &= ~0x00000010u;
}
void UserDictionary::clear_removed() {
  removed_ = false;
  clear_has_removed();
}
 bool UserDictionary::removed() const {
  // @@protoc_insertion_point(field_get:mozc.user_dictionary.UserDictionary.removed)
  return removed_;
}
 void UserDictionary::set_removed(bool value) {
  set_has_removed();
  removed_ = value;
  // @@protoc_insertion_point(field_set:mozc.user_dictionary.UserDictionary.removed)
}

// optional bool syncable = 6 [default = false];
bool UserDictionary::has_syncable() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void UserDictionary::set_has_syncable() {
  _has_bits_[0] |= 0x00000020u;
}
void UserDictionary::clear_has_syncable() {
  _has_bits_[0] &= ~0x00000020u;
}
void UserDictionary::clear_syncable() {
  syncable_ = false;
  clear_has_syncable();
}
 bool UserDictionary::syncable() const {
  // @@protoc_insertion_point(field_get:mozc.user_dictionary.UserDictionary.syncable)
  return syncable_;
}
 void UserDictionary::set_syncable(bool value) {
  set_has_syncable();
  syncable_ = value;
  // @@protoc_insertion_point(field_set:mozc.user_dictionary.UserDictionary.syncable)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* UserDictionaryStorage_StorageType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserDictionaryStorage_StorageType_descriptor_;
}
bool UserDictionaryStorage_StorageType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const UserDictionaryStorage_StorageType UserDictionaryStorage::SNAPSHOT;
const UserDictionaryStorage_StorageType UserDictionaryStorage::UPDATE;
const UserDictionaryStorage_StorageType UserDictionaryStorage::StorageType_MIN;
const UserDictionaryStorage_StorageType UserDictionaryStorage::StorageType_MAX;
const int UserDictionaryStorage::StorageType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserDictionaryStorage::kVersionFieldNumber;
const int UserDictionaryStorage::kDictionariesFieldNumber;
const int UserDictionaryStorage::kStorageTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserDictionaryStorage::UserDictionaryStorage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mozc.user_dictionary.UserDictionaryStorage)
}

void UserDictionaryStorage::InitAsDefaultInstance() {
}

UserDictionaryStorage::UserDictionaryStorage(const UserDictionaryStorage& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mozc.user_dictionary.UserDictionaryStorage)
}

void UserDictionaryStorage::SharedCtor() {
  _cached_size_ = 0;
  version_ = 0;
  storage_type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserDictionaryStorage::~UserDictionaryStorage() {
  // @@protoc_insertion_point(destructor:mozc.user_dictionary.UserDictionaryStorage)
  SharedDtor();
}

void UserDictionaryStorage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UserDictionaryStorage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserDictionaryStorage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserDictionaryStorage_descriptor_;
}

const UserDictionaryStorage& UserDictionaryStorage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2fuser_5fdictionary_5fstorage_2eproto();
  return *default_instance_;
}

UserDictionaryStorage* UserDictionaryStorage::default_instance_ = NULL;

UserDictionaryStorage* UserDictionaryStorage::New(::google::protobuf::Arena* arena) const {
  UserDictionaryStorage* n = new UserDictionaryStorage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UserDictionaryStorage::Clear() {
// @@protoc_insertion_point(message_clear_start:mozc.user_dictionary.UserDictionaryStorage)
  if (_has_bits_[0 / 32] & 5u) {
    version_ = 0;
    storage_type_ = 1;
  }
  dictionaries_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool UserDictionaryStorage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mozc.user_dictionary.UserDictionaryStorage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 version = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_dictionaries;
        break;
      }

      // repeated .mozc.user_dictionary.UserDictionary dictionaries = 2;
      case 2: {
        if (tag == 18) {
         parse_dictionaries:
          DO_(input->IncrementRecursionDepth());
         parse_loop_dictionaries:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_dictionaries()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_dictionaries;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(80)) goto parse_storage_type;
        break;
      }

      // optional .mozc.user_dictionary.UserDictionaryStorage.StorageType storage_type = 10 [default = SNAPSHOT];
      case 10: {
        if (tag == 80) {
         parse_storage_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mozc::user_dictionary::UserDictionaryStorage_StorageType_IsValid(value)) {
            set_storage_type(static_cast< ::mozc::user_dictionary::UserDictionaryStorage_StorageType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(10, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mozc.user_dictionary.UserDictionaryStorage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mozc.user_dictionary.UserDictionaryStorage)
  return false;
#undef DO_
}

void UserDictionaryStorage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mozc.user_dictionary.UserDictionaryStorage)
  // optional int32 version = 1 [default = 0];
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->version(), output);
  }

  // repeated .mozc.user_dictionary.UserDictionary dictionaries = 2;
  for (unsigned int i = 0, n = this->dictionaries_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->dictionaries(i), output);
  }

  // optional .mozc.user_dictionary.UserDictionaryStorage.StorageType storage_type = 10 [default = SNAPSHOT];
  if (has_storage_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->storage_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mozc.user_dictionary.UserDictionaryStorage)
}

::google::protobuf::uint8* UserDictionaryStorage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mozc.user_dictionary.UserDictionaryStorage)
  // optional int32 version = 1 [default = 0];
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->version(), target);
  }

  // repeated .mozc.user_dictionary.UserDictionary dictionaries = 2;
  for (unsigned int i = 0, n = this->dictionaries_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->dictionaries(i), false, target);
  }

  // optional .mozc.user_dictionary.UserDictionaryStorage.StorageType storage_type = 10 [default = SNAPSHOT];
  if (has_storage_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->storage_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mozc.user_dictionary.UserDictionaryStorage)
  return target;
}

int UserDictionaryStorage::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:mozc.user_dictionary.UserDictionaryStorage)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 5u) {
    // optional int32 version = 1 [default = 0];
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->version());
    }

    // optional .mozc.user_dictionary.UserDictionaryStorage.StorageType storage_type = 10 [default = SNAPSHOT];
    if (has_storage_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->storage_type());
    }

  }
  // repeated .mozc.user_dictionary.UserDictionary dictionaries = 2;
  total_size += 1 * this->dictionaries_size();
  for (int i = 0; i < this->dictionaries_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->dictionaries(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserDictionaryStorage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mozc.user_dictionary.UserDictionaryStorage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const UserDictionaryStorage* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const UserDictionaryStorage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mozc.user_dictionary.UserDictionaryStorage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mozc.user_dictionary.UserDictionaryStorage)
    MergeFrom(*source);
  }
}

void UserDictionaryStorage::MergeFrom(const UserDictionaryStorage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mozc.user_dictionary.UserDictionaryStorage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  dictionaries_.MergeFrom(from.dictionaries_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_storage_type()) {
      set_storage_type(from.storage_type());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void UserDictionaryStorage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mozc.user_dictionary.UserDictionaryStorage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserDictionaryStorage::CopyFrom(const UserDictionaryStorage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mozc.user_dictionary.UserDictionaryStorage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserDictionaryStorage::IsInitialized() const {

  return true;
}

void UserDictionaryStorage::Swap(UserDictionaryStorage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserDictionaryStorage::InternalSwap(UserDictionaryStorage* other) {
  std::swap(version_, other->version_);
  dictionaries_.UnsafeArenaSwap(&other->dictionaries_);
  std::swap(storage_type_, other->storage_type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserDictionaryStorage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserDictionaryStorage_descriptor_;
  metadata.reflection = UserDictionaryStorage_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserDictionaryStorage

// optional int32 version = 1 [default = 0];
bool UserDictionaryStorage::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UserDictionaryStorage::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
void UserDictionaryStorage::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
void UserDictionaryStorage::clear_version() {
  version_ = 0;
  clear_has_version();
}
 ::google::protobuf::int32 UserDictionaryStorage::version() const {
  // @@protoc_insertion_point(field_get:mozc.user_dictionary.UserDictionaryStorage.version)
  return version_;
}
 void UserDictionaryStorage::set_version(::google::protobuf::int32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:mozc.user_dictionary.UserDictionaryStorage.version)
}

// repeated .mozc.user_dictionary.UserDictionary dictionaries = 2;
int UserDictionaryStorage::dictionaries_size() const {
  return dictionaries_.size();
}
void UserDictionaryStorage::clear_dictionaries() {
  dictionaries_.Clear();
}
const ::mozc::user_dictionary::UserDictionary& UserDictionaryStorage::dictionaries(int index) const {
  // @@protoc_insertion_point(field_get:mozc.user_dictionary.UserDictionaryStorage.dictionaries)
  return dictionaries_.Get(index);
}
::mozc::user_dictionary::UserDictionary* UserDictionaryStorage::mutable_dictionaries(int index) {
  // @@protoc_insertion_point(field_mutable:mozc.user_dictionary.UserDictionaryStorage.dictionaries)
  return dictionaries_.Mutable(index);
}
::mozc::user_dictionary::UserDictionary* UserDictionaryStorage::add_dictionaries() {
  // @@protoc_insertion_point(field_add:mozc.user_dictionary.UserDictionaryStorage.dictionaries)
  return dictionaries_.Add();
}
::google::protobuf::RepeatedPtrField< ::mozc::user_dictionary::UserDictionary >*
UserDictionaryStorage::mutable_dictionaries() {
  // @@protoc_insertion_point(field_mutable_list:mozc.user_dictionary.UserDictionaryStorage.dictionaries)
  return &dictionaries_;
}
const ::google::protobuf::RepeatedPtrField< ::mozc::user_dictionary::UserDictionary >&
UserDictionaryStorage::dictionaries() const {
  // @@protoc_insertion_point(field_list:mozc.user_dictionary.UserDictionaryStorage.dictionaries)
  return dictionaries_;
}

// optional .mozc.user_dictionary.UserDictionaryStorage.StorageType storage_type = 10 [default = SNAPSHOT];
bool UserDictionaryStorage::has_storage_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void UserDictionaryStorage::set_has_storage_type() {
  _has_bits_[0] |= 0x00000004u;
}
void UserDictionaryStorage::clear_has_storage_type() {
  _has_bits_[0] &= ~0x00000004u;
}
void UserDictionaryStorage::clear_storage_type() {
  storage_type_ = 1;
  clear_has_storage_type();
}
 ::mozc::user_dictionary::UserDictionaryStorage_StorageType UserDictionaryStorage::storage_type() const {
  // @@protoc_insertion_point(field_get:mozc.user_dictionary.UserDictionaryStorage.storage_type)
  return static_cast< ::mozc::user_dictionary::UserDictionaryStorage_StorageType >(storage_type_);
}
 void UserDictionaryStorage::set_storage_type(::mozc::user_dictionary::UserDictionaryStorage_StorageType value) {
  assert(::mozc::user_dictionary::UserDictionaryStorage_StorageType_IsValid(value));
  set_has_storage_type();
  storage_type_ = value;
  // @@protoc_insertion_point(field_set:mozc.user_dictionary.UserDictionaryStorage.storage_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* UserDictionaryCommand_CommandType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserDictionaryCommand_CommandType_descriptor_;
}
bool UserDictionaryCommand_CommandType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const UserDictionaryCommand_CommandType UserDictionaryCommand::NO_OPERATION;
const UserDictionaryCommand_CommandType UserDictionaryCommand::CLEAR_STORAGE;
const UserDictionaryCommand_CommandType UserDictionaryCommand::CREATE_SESSION;
const UserDictionaryCommand_CommandType UserDictionaryCommand::DELETE_SESSION;
const UserDictionaryCommand_CommandType UserDictionaryCommand::SET_DEFAULT_DICTIONARY_NAME;
const UserDictionaryCommand_CommandType UserDictionaryCommand::CHECK_UNDOABILITY;
const UserDictionaryCommand_CommandType UserDictionaryCommand::UNDO;
const UserDictionaryCommand_CommandType UserDictionaryCommand::LOAD;
const UserDictionaryCommand_CommandType UserDictionaryCommand::SAVE;
const UserDictionaryCommand_CommandType UserDictionaryCommand::GET_USER_DICTIONARY_NAME_LIST;
const UserDictionaryCommand_CommandType UserDictionaryCommand::GET_ENTRY_SIZE;
const UserDictionaryCommand_CommandType UserDictionaryCommand::OBSOLETE_GET_ENTRY;
const UserDictionaryCommand_CommandType UserDictionaryCommand::CHECK_NEW_DICTIONARY_AVAILABILITY;
const UserDictionaryCommand_CommandType UserDictionaryCommand::CREATE_DICTIONARY;
const UserDictionaryCommand_CommandType UserDictionaryCommand::DELETE_DICTIONARY;
const UserDictionaryCommand_CommandType UserDictionaryCommand::RENAME_DICTIONARY;
const UserDictionaryCommand_CommandType UserDictionaryCommand::CHECK_NEW_ENTRY_AVAILABILITY;
const UserDictionaryCommand_CommandType UserDictionaryCommand::ADD_ENTRY;
const UserDictionaryCommand_CommandType UserDictionaryCommand::EDIT_ENTRY;
const UserDictionaryCommand_CommandType UserDictionaryCommand::DELETE_ENTRY;
const UserDictionaryCommand_CommandType UserDictionaryCommand::IMPORT_DATA;
const UserDictionaryCommand_CommandType UserDictionaryCommand::GET_STORAGE;
const UserDictionaryCommand_CommandType UserDictionaryCommand::GET_ENTRIES;
const UserDictionaryCommand_CommandType UserDictionaryCommand::CommandType_MIN;
const UserDictionaryCommand_CommandType UserDictionaryCommand::CommandType_MAX;
const int UserDictionaryCommand::CommandType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserDictionaryCommand::kTypeFieldNumber;
const int UserDictionaryCommand::kSessionIdFieldNumber;
const int UserDictionaryCommand::kDictionaryIdFieldNumber;
const int UserDictionaryCommand::kDictionaryNameFieldNumber;
const int UserDictionaryCommand::kEntryIndexFieldNumber;
const int UserDictionaryCommand::kEntryFieldNumber;
const int UserDictionaryCommand::kDataFieldNumber;
const int UserDictionaryCommand::kEnsureNonEmptyStorageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserDictionaryCommand::UserDictionaryCommand()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mozc.user_dictionary.UserDictionaryCommand)
}

void UserDictionaryCommand::InitAsDefaultInstance() {
  entry_ = const_cast< ::mozc::user_dictionary::UserDictionary_Entry*>(&::mozc::user_dictionary::UserDictionary_Entry::default_instance());
}

UserDictionaryCommand::UserDictionaryCommand(const UserDictionaryCommand& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mozc.user_dictionary.UserDictionaryCommand)
}

void UserDictionaryCommand::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 0;
  session_id_ = GOOGLE_ULONGLONG(0);
  dictionary_id_ = GOOGLE_ULONGLONG(0);
  dictionary_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  entry_ = NULL;
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ensure_non_empty_storage_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserDictionaryCommand::~UserDictionaryCommand() {
  // @@protoc_insertion_point(destructor:mozc.user_dictionary.UserDictionaryCommand)
  SharedDtor();
}

void UserDictionaryCommand::SharedDtor() {
  dictionary_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete entry_;
  }
}

void UserDictionaryCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserDictionaryCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserDictionaryCommand_descriptor_;
}

const UserDictionaryCommand& UserDictionaryCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2fuser_5fdictionary_5fstorage_2eproto();
  return *default_instance_;
}

UserDictionaryCommand* UserDictionaryCommand::default_instance_ = NULL;

UserDictionaryCommand* UserDictionaryCommand::New(::google::protobuf::Arena* arena) const {
  UserDictionaryCommand* n = new UserDictionaryCommand;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UserDictionaryCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:mozc.user_dictionary.UserDictionaryCommand)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(UserDictionaryCommand, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<UserDictionaryCommand*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 239u) {
    ZR_(session_id_, dictionary_id_);
    ZR_(type_, ensure_non_empty_storage_);
    if (has_dictionary_name()) {
      dictionary_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_entry()) {
      if (entry_ != NULL) entry_->::mozc::user_dictionary::UserDictionary_Entry::Clear();
    }
    if (has_data()) {
      data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  entry_index_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool UserDictionaryCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mozc.user_dictionary.UserDictionaryCommand)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .mozc.user_dictionary.UserDictionaryCommand.CommandType type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mozc::user_dictionary::UserDictionaryCommand_CommandType_IsValid(value)) {
            set_type(static_cast< ::mozc::user_dictionary::UserDictionaryCommand_CommandType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_session_id;
        break;
      }

      // optional uint64 session_id = 2;
      case 2: {
        if (tag == 16) {
         parse_session_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &session_id_)));
          set_has_session_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_dictionary_id;
        break;
      }

      // optional uint64 dictionary_id = 3;
      case 3: {
        if (tag == 24) {
         parse_dictionary_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dictionary_id_)));
          set_has_dictionary_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_dictionary_name;
        break;
      }

      // optional string dictionary_name = 4;
      case 4: {
        if (tag == 34) {
         parse_dictionary_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dictionary_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->dictionary_name().data(), this->dictionary_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mozc.user_dictionary.UserDictionaryCommand.dictionary_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_entry_index;
        break;
      }

      // repeated int32 entry_index = 5;
      case 5: {
        if (tag == 40) {
         parse_entry_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40, input, this->mutable_entry_index())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_entry_index())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_entry_index;
        if (input->ExpectTag(50)) goto parse_entry;
        break;
      }

      // optional .mozc.user_dictionary.UserDictionary.Entry entry = 6;
      case 6: {
        if (tag == 50) {
         parse_entry:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_entry()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_data;
        break;
      }

      // optional string data = 7;
      case 7: {
        if (tag == 58) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->data().data(), this->data().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mozc.user_dictionary.UserDictionaryCommand.data");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_ensure_non_empty_storage;
        break;
      }

      // optional bool ensure_non_empty_storage = 8;
      case 8: {
        if (tag == 64) {
         parse_ensure_non_empty_storage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ensure_non_empty_storage_)));
          set_has_ensure_non_empty_storage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mozc.user_dictionary.UserDictionaryCommand)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mozc.user_dictionary.UserDictionaryCommand)
  return false;
#undef DO_
}

void UserDictionaryCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mozc.user_dictionary.UserDictionaryCommand)
  // required .mozc.user_dictionary.UserDictionaryCommand.CommandType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional uint64 session_id = 2;
  if (has_session_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->session_id(), output);
  }

  // optional uint64 dictionary_id = 3;
  if (has_dictionary_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->dictionary_id(), output);
  }

  // optional string dictionary_name = 4;
  if (has_dictionary_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dictionary_name().data(), this->dictionary_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mozc.user_dictionary.UserDictionaryCommand.dictionary_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->dictionary_name(), output);
  }

  // repeated int32 entry_index = 5;
  for (int i = 0; i < this->entry_index_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->entry_index(i), output);
  }

  // optional .mozc.user_dictionary.UserDictionary.Entry entry = 6;
  if (has_entry()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->entry_, output);
  }

  // optional string data = 7;
  if (has_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->data().data(), this->data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mozc.user_dictionary.UserDictionaryCommand.data");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->data(), output);
  }

  // optional bool ensure_non_empty_storage = 8;
  if (has_ensure_non_empty_storage()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->ensure_non_empty_storage(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mozc.user_dictionary.UserDictionaryCommand)
}

::google::protobuf::uint8* UserDictionaryCommand::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mozc.user_dictionary.UserDictionaryCommand)
  // required .mozc.user_dictionary.UserDictionaryCommand.CommandType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional uint64 session_id = 2;
  if (has_session_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->session_id(), target);
  }

  // optional uint64 dictionary_id = 3;
  if (has_dictionary_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->dictionary_id(), target);
  }

  // optional string dictionary_name = 4;
  if (has_dictionary_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dictionary_name().data(), this->dictionary_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mozc.user_dictionary.UserDictionaryCommand.dictionary_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->dictionary_name(), target);
  }

  // repeated int32 entry_index = 5;
  for (int i = 0; i < this->entry_index_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(5, this->entry_index(i), target);
  }

  // optional .mozc.user_dictionary.UserDictionary.Entry entry = 6;
  if (has_entry()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->entry_, false, target);
  }

  // optional string data = 7;
  if (has_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->data().data(), this->data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mozc.user_dictionary.UserDictionaryCommand.data");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->data(), target);
  }

  // optional bool ensure_non_empty_storage = 8;
  if (has_ensure_non_empty_storage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->ensure_non_empty_storage(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mozc.user_dictionary.UserDictionaryCommand)
  return target;
}

int UserDictionaryCommand::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:mozc.user_dictionary.UserDictionaryCommand)
  int total_size = 0;

  // required .mozc.user_dictionary.UserDictionaryCommand.CommandType type = 1;
  if (has_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }
  if (_has_bits_[1 / 32] & 238u) {
    // optional uint64 session_id = 2;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->session_id());
    }

    // optional uint64 dictionary_id = 3;
    if (has_dictionary_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dictionary_id());
    }

    // optional string dictionary_name = 4;
    if (has_dictionary_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dictionary_name());
    }

    // optional .mozc.user_dictionary.UserDictionary.Entry entry = 6;
    if (has_entry()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->entry_);
    }

    // optional string data = 7;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->data());
    }

    // optional bool ensure_non_empty_storage = 8;
    if (has_ensure_non_empty_storage()) {
      total_size += 1 + 1;
    }

  }
  // repeated int32 entry_index = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->entry_index_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->entry_index(i));
    }
    total_size += 1 * this->entry_index_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserDictionaryCommand::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mozc.user_dictionary.UserDictionaryCommand)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const UserDictionaryCommand* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const UserDictionaryCommand>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mozc.user_dictionary.UserDictionaryCommand)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mozc.user_dictionary.UserDictionaryCommand)
    MergeFrom(*source);
  }
}

void UserDictionaryCommand::MergeFrom(const UserDictionaryCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mozc.user_dictionary.UserDictionaryCommand)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  entry_index_.MergeFrom(from.entry_index_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_session_id()) {
      set_session_id(from.session_id());
    }
    if (from.has_dictionary_id()) {
      set_dictionary_id(from.dictionary_id());
    }
    if (from.has_dictionary_name()) {
      set_has_dictionary_name();
      dictionary_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dictionary_name_);
    }
    if (from.has_entry()) {
      mutable_entry()->::mozc::user_dictionary::UserDictionary_Entry::MergeFrom(from.entry());
    }
    if (from.has_data()) {
      set_has_data();
      data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
    }
    if (from.has_ensure_non_empty_storage()) {
      set_ensure_non_empty_storage(from.ensure_non_empty_storage());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void UserDictionaryCommand::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mozc.user_dictionary.UserDictionaryCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserDictionaryCommand::CopyFrom(const UserDictionaryCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mozc.user_dictionary.UserDictionaryCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserDictionaryCommand::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void UserDictionaryCommand::Swap(UserDictionaryCommand* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserDictionaryCommand::InternalSwap(UserDictionaryCommand* other) {
  std::swap(type_, other->type_);
  std::swap(session_id_, other->session_id_);
  std::swap(dictionary_id_, other->dictionary_id_);
  dictionary_name_.Swap(&other->dictionary_name_);
  entry_index_.UnsafeArenaSwap(&other->entry_index_);
  std::swap(entry_, other->entry_);
  data_.Swap(&other->data_);
  std::swap(ensure_non_empty_storage_, other->ensure_non_empty_storage_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserDictionaryCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserDictionaryCommand_descriptor_;
  metadata.reflection = UserDictionaryCommand_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserDictionaryCommand

// required .mozc.user_dictionary.UserDictionaryCommand.CommandType type = 1;
bool UserDictionaryCommand::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UserDictionaryCommand::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
void UserDictionaryCommand::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void UserDictionaryCommand::clear_type() {
  type_ = 0;
  clear_has_type();
}
 ::mozc::user_dictionary::UserDictionaryCommand_CommandType UserDictionaryCommand::type() const {
  // @@protoc_insertion_point(field_get:mozc.user_dictionary.UserDictionaryCommand.type)
  return static_cast< ::mozc::user_dictionary::UserDictionaryCommand_CommandType >(type_);
}
 void UserDictionaryCommand::set_type(::mozc::user_dictionary::UserDictionaryCommand_CommandType value) {
  assert(::mozc::user_dictionary::UserDictionaryCommand_CommandType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:mozc.user_dictionary.UserDictionaryCommand.type)
}

// optional uint64 session_id = 2;
bool UserDictionaryCommand::has_session_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void UserDictionaryCommand::set_has_session_id() {
  _has_bits_[0] |= 0x00000002u;
}
void UserDictionaryCommand::clear_has_session_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void UserDictionaryCommand::clear_session_id() {
  session_id_ = GOOGLE_ULONGLONG(0);
  clear_has_session_id();
}
 ::google::protobuf::uint64 UserDictionaryCommand::session_id() const {
  // @@protoc_insertion_point(field_get:mozc.user_dictionary.UserDictionaryCommand.session_id)
  return session_id_;
}
 void UserDictionaryCommand::set_session_id(::google::protobuf::uint64 value) {
  set_has_session_id();
  session_id_ = value;
  // @@protoc_insertion_point(field_set:mozc.user_dictionary.UserDictionaryCommand.session_id)
}

// optional uint64 dictionary_id = 3;
bool UserDictionaryCommand::has_dictionary_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void UserDictionaryCommand::set_has_dictionary_id() {
  _has_bits_[0] |= 0x00000004u;
}
void UserDictionaryCommand::clear_has_dictionary_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void UserDictionaryCommand::clear_dictionary_id() {
  dictionary_id_ = GOOGLE_ULONGLONG(0);
  clear_has_dictionary_id();
}
 ::google::protobuf::uint64 UserDictionaryCommand::dictionary_id() const {
  // @@protoc_insertion_point(field_get:mozc.user_dictionary.UserDictionaryCommand.dictionary_id)
  return dictionary_id_;
}
 void UserDictionaryCommand::set_dictionary_id(::google::protobuf::uint64 value) {
  set_has_dictionary_id();
  dictionary_id_ = value;
  // @@protoc_insertion_point(field_set:mozc.user_dictionary.UserDictionaryCommand.dictionary_id)
}

// optional string dictionary_name = 4;
bool UserDictionaryCommand::has_dictionary_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void UserDictionaryCommand::set_has_dictionary_name() {
  _has_bits_[0] |= 0x00000008u;
}
void UserDictionaryCommand::clear_has_dictionary_name() {
  _has_bits_[0] &= ~0x00000008u;
}
void UserDictionaryCommand::clear_dictionary_name() {
  dictionary_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_dictionary_name();
}
 const ::std::string& UserDictionaryCommand::dictionary_name() const {
  // @@protoc_insertion_point(field_get:mozc.user_dictionary.UserDictionaryCommand.dictionary_name)
  return dictionary_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UserDictionaryCommand::set_dictionary_name(const ::std::string& value) {
  set_has_dictionary_name();
  dictionary_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mozc.user_dictionary.UserDictionaryCommand.dictionary_name)
}
 void UserDictionaryCommand::set_dictionary_name(const char* value) {
  set_has_dictionary_name();
  dictionary_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mozc.user_dictionary.UserDictionaryCommand.dictionary_name)
}
 void UserDictionaryCommand::set_dictionary_name(const char* value, size_t size) {
  set_has_dictionary_name();
  dictionary_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mozc.user_dictionary.UserDictionaryCommand.dictionary_name)
}
 ::std::string* UserDictionaryCommand::mutable_dictionary_name() {
  set_has_dictionary_name();
  // @@protoc_insertion_point(field_mutable:mozc.user_dictionary.UserDictionaryCommand.dictionary_name)
  return dictionary_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* UserDictionaryCommand::release_dictionary_name() {
  // @@protoc_insertion_point(field_release:mozc.user_dictionary.UserDictionaryCommand.dictionary_name)
  clear_has_dictionary_name();
  return dictionary_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UserDictionaryCommand::set_allocated_dictionary_name(::std::string* dictionary_name) {
  if (dictionary_name != NULL) {
    set_has_dictionary_name();
  } else {
    clear_has_dictionary_name();
  }
  dictionary_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dictionary_name);
  // @@protoc_insertion_point(field_set_allocated:mozc.user_dictionary.UserDictionaryCommand.dictionary_name)
}

// repeated int32 entry_index = 5;
int UserDictionaryCommand::entry_index_size() const {
  return entry_index_.size();
}
void UserDictionaryCommand::clear_entry_index() {
  entry_index_.Clear();
}
 ::google::protobuf::int32 UserDictionaryCommand::entry_index(int index) const {
  // @@protoc_insertion_point(field_get:mozc.user_dictionary.UserDictionaryCommand.entry_index)
  return entry_index_.Get(index);
}
 void UserDictionaryCommand::set_entry_index(int index, ::google::protobuf::int32 value) {
  entry_index_.Set(index, value);
  // @@protoc_insertion_point(field_set:mozc.user_dictionary.UserDictionaryCommand.entry_index)
}
 void UserDictionaryCommand::add_entry_index(::google::protobuf::int32 value) {
  entry_index_.Add(value);
  // @@protoc_insertion_point(field_add:mozc.user_dictionary.UserDictionaryCommand.entry_index)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
UserDictionaryCommand::entry_index() const {
  // @@protoc_insertion_point(field_list:mozc.user_dictionary.UserDictionaryCommand.entry_index)
  return entry_index_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
UserDictionaryCommand::mutable_entry_index() {
  // @@protoc_insertion_point(field_mutable_list:mozc.user_dictionary.UserDictionaryCommand.entry_index)
  return &entry_index_;
}

// optional .mozc.user_dictionary.UserDictionary.Entry entry = 6;
bool UserDictionaryCommand::has_entry() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void UserDictionaryCommand::set_has_entry() {
  _has_bits_[0] |= 0x00000020u;
}
void UserDictionaryCommand::clear_has_entry() {
  _has_bits_[0] &= ~0x00000020u;
}
void UserDictionaryCommand::clear_entry() {
  if (entry_ != NULL) entry_->::mozc::user_dictionary::UserDictionary_Entry::Clear();
  clear_has_entry();
}
const ::mozc::user_dictionary::UserDictionary_Entry& UserDictionaryCommand::entry() const {
  // @@protoc_insertion_point(field_get:mozc.user_dictionary.UserDictionaryCommand.entry)
  return entry_ != NULL ? *entry_ : *default_instance_->entry_;
}
::mozc::user_dictionary::UserDictionary_Entry* UserDictionaryCommand::mutable_entry() {
  set_has_entry();
  if (entry_ == NULL) {
    entry_ = new ::mozc::user_dictionary::UserDictionary_Entry;
  }
  // @@protoc_insertion_point(field_mutable:mozc.user_dictionary.UserDictionaryCommand.entry)
  return entry_;
}
::mozc::user_dictionary::UserDictionary_Entry* UserDictionaryCommand::release_entry() {
  // @@protoc_insertion_point(field_release:mozc.user_dictionary.UserDictionaryCommand.entry)
  clear_has_entry();
  ::mozc::user_dictionary::UserDictionary_Entry* temp = entry_;
  entry_ = NULL;
  return temp;
}
void UserDictionaryCommand::set_allocated_entry(::mozc::user_dictionary::UserDictionary_Entry* entry) {
  delete entry_;
  entry_ = entry;
  if (entry) {
    set_has_entry();
  } else {
    clear_has_entry();
  }
  // @@protoc_insertion_point(field_set_allocated:mozc.user_dictionary.UserDictionaryCommand.entry)
}

// optional string data = 7;
bool UserDictionaryCommand::has_data() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void UserDictionaryCommand::set_has_data() {
  _has_bits_[0] |= 0x00000040u;
}
void UserDictionaryCommand::clear_has_data() {
  _has_bits_[0] &= ~0x00000040u;
}
void UserDictionaryCommand::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
 const ::std::string& UserDictionaryCommand::data() const {
  // @@protoc_insertion_point(field_get:mozc.user_dictionary.UserDictionaryCommand.data)
  return data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UserDictionaryCommand::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mozc.user_dictionary.UserDictionaryCommand.data)
}
 void UserDictionaryCommand::set_data(const char* value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mozc.user_dictionary.UserDictionaryCommand.data)
}
 void UserDictionaryCommand::set_data(const char* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mozc.user_dictionary.UserDictionaryCommand.data)
}
 ::std::string* UserDictionaryCommand::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:mozc.user_dictionary.UserDictionaryCommand.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* UserDictionaryCommand::release_data() {
  // @@protoc_insertion_point(field_release:mozc.user_dictionary.UserDictionaryCommand.data)
  clear_has_data();
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UserDictionaryCommand::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:mozc.user_dictionary.UserDictionaryCommand.data)
}

// optional bool ensure_non_empty_storage = 8;
bool UserDictionaryCommand::has_ensure_non_empty_storage() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void UserDictionaryCommand::set_has_ensure_non_empty_storage() {
  _has_bits_[0] |= 0x00000080u;
}
void UserDictionaryCommand::clear_has_ensure_non_empty_storage() {
  _has_bits_[0] &= ~0x00000080u;
}
void UserDictionaryCommand::clear_ensure_non_empty_storage() {
  ensure_non_empty_storage_ = false;
  clear_has_ensure_non_empty_storage();
}
 bool UserDictionaryCommand::ensure_non_empty_storage() const {
  // @@protoc_insertion_point(field_get:mozc.user_dictionary.UserDictionaryCommand.ensure_non_empty_storage)
  return ensure_non_empty_storage_;
}
 void UserDictionaryCommand::set_ensure_non_empty_storage(bool value) {
  set_has_ensure_non_empty_storage();
  ensure_non_empty_storage_ = value;
  // @@protoc_insertion_point(field_set:mozc.user_dictionary.UserDictionaryCommand.ensure_non_empty_storage)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* UserDictionaryCommandStatus_Status_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserDictionaryCommandStatus_Status_descriptor_;
}
bool UserDictionaryCommandStatus_Status_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const UserDictionaryCommandStatus_Status UserDictionaryCommandStatus::USER_DICTIONARY_COMMAND_SUCCESS;
const UserDictionaryCommandStatus_Status UserDictionaryCommandStatus::UNKNOWN_ERROR;
const UserDictionaryCommandStatus_Status UserDictionaryCommandStatus::UNKNOWN_COMMAND;
const UserDictionaryCommandStatus_Status UserDictionaryCommandStatus::INVALID_ARGUMENT;
const UserDictionaryCommandStatus_Status UserDictionaryCommandStatus::UNKNOWN_SESSION_ID;
const UserDictionaryCommandStatus_Status UserDictionaryCommandStatus::FILE_NOT_FOUND;
const UserDictionaryCommandStatus_Status UserDictionaryCommandStatus::INVALID_FILE_FORMAT;
const UserDictionaryCommandStatus_Status UserDictionaryCommandStatus::FILE_SIZE_LIMIT_EXCEEDED;
const UserDictionaryCommandStatus_Status UserDictionaryCommandStatus::DICTIONARY_SIZE_LIMIT_EXCEEDED;
const UserDictionaryCommandStatus_Status UserDictionaryCommandStatus::ENTRY_SIZE_LIMIT_EXCEEDED;
const UserDictionaryCommandStatus_Status UserDictionaryCommandStatus::UNKNOWN_DICTIONARY_ID;
const UserDictionaryCommandStatus_Status UserDictionaryCommandStatus::ENTRY_INDEX_OUT_OF_RANGE;
const UserDictionaryCommandStatus_Status UserDictionaryCommandStatus::DICTIONARY_NAME_EMPTY;
const UserDictionaryCommandStatus_Status UserDictionaryCommandStatus::DICTIONARY_NAME_TOO_LONG;
const UserDictionaryCommandStatus_Status UserDictionaryCommandStatus::DICTIONARY_NAME_CONTAINS_INVALID_CHARACTER;
const UserDictionaryCommandStatus_Status UserDictionaryCommandStatus::DICTIONARY_NAME_DUPLICATED;
const UserDictionaryCommandStatus_Status UserDictionaryCommandStatus::READING_EMPTY;
const UserDictionaryCommandStatus_Status UserDictionaryCommandStatus::READING_TOO_LONG;
const UserDictionaryCommandStatus_Status UserDictionaryCommandStatus::READING_CONTAINS_INVALID_CHARACTER;
const UserDictionaryCommandStatus_Status UserDictionaryCommandStatus::WORD_EMPTY;
const UserDictionaryCommandStatus_Status UserDictionaryCommandStatus::WORD_TOO_LONG;
const UserDictionaryCommandStatus_Status UserDictionaryCommandStatus::WORD_CONTAINS_INVALID_CHARACTER;
const UserDictionaryCommandStatus_Status UserDictionaryCommandStatus::INVALID_POS_TYPE;
const UserDictionaryCommandStatus_Status UserDictionaryCommandStatus::COMMENT_TOO_LONG;
const UserDictionaryCommandStatus_Status UserDictionaryCommandStatus::COMMENT_CONTAINS_INVALID_CHARACTER;
const UserDictionaryCommandStatus_Status UserDictionaryCommandStatus::IMPORT_TOO_MANY_WORDS;
const UserDictionaryCommandStatus_Status UserDictionaryCommandStatus::IMPORT_INVALID_ENTRIES;
const UserDictionaryCommandStatus_Status UserDictionaryCommandStatus::NO_UNDO_HISTORY;
const UserDictionaryCommandStatus_Status UserDictionaryCommandStatus::Status_MIN;
const UserDictionaryCommandStatus_Status UserDictionaryCommandStatus::Status_MAX;
const int UserDictionaryCommandStatus::Status_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserDictionaryCommandStatus::kStatusFieldNumber;
const int UserDictionaryCommandStatus::kSessionIdFieldNumber;
const int UserDictionaryCommandStatus::kStorageFieldNumber;
const int UserDictionaryCommandStatus::kDictionaryIdFieldNumber;
const int UserDictionaryCommandStatus::kEntrySizeFieldNumber;
const int UserDictionaryCommandStatus::kEntriesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserDictionaryCommandStatus::UserDictionaryCommandStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mozc.user_dictionary.UserDictionaryCommandStatus)
}

void UserDictionaryCommandStatus::InitAsDefaultInstance() {
  storage_ = const_cast< ::mozc::user_dictionary::UserDictionaryStorage*>(&::mozc::user_dictionary::UserDictionaryStorage::default_instance());
}

UserDictionaryCommandStatus::UserDictionaryCommandStatus(const UserDictionaryCommandStatus& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mozc.user_dictionary.UserDictionaryCommandStatus)
}

void UserDictionaryCommandStatus::SharedCtor() {
  _cached_size_ = 0;
  status_ = 1;
  session_id_ = GOOGLE_ULONGLONG(0);
  storage_ = NULL;
  dictionary_id_ = GOOGLE_ULONGLONG(0);
  entry_size_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserDictionaryCommandStatus::~UserDictionaryCommandStatus() {
  // @@protoc_insertion_point(destructor:mozc.user_dictionary.UserDictionaryCommandStatus)
  SharedDtor();
}

void UserDictionaryCommandStatus::SharedDtor() {
  if (this != default_instance_) {
    delete storage_;
  }
}

void UserDictionaryCommandStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserDictionaryCommandStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserDictionaryCommandStatus_descriptor_;
}

const UserDictionaryCommandStatus& UserDictionaryCommandStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2fuser_5fdictionary_5fstorage_2eproto();
  return *default_instance_;
}

UserDictionaryCommandStatus* UserDictionaryCommandStatus::default_instance_ = NULL;

UserDictionaryCommandStatus* UserDictionaryCommandStatus::New(::google::protobuf::Arena* arena) const {
  UserDictionaryCommandStatus* n = new UserDictionaryCommandStatus;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UserDictionaryCommandStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:mozc.user_dictionary.UserDictionaryCommandStatus)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(UserDictionaryCommandStatus, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<UserDictionaryCommandStatus*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 31u) {
    ZR_(entry_size_, dictionary_id_);
    status_ = 1;
    session_id_ = GOOGLE_ULONGLONG(0);
    if (has_storage()) {
      if (storage_ != NULL) storage_->::mozc::user_dictionary::UserDictionaryStorage::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  entries_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool UserDictionaryCommandStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mozc.user_dictionary.UserDictionaryCommandStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .mozc.user_dictionary.UserDictionaryCommandStatus.Status status = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mozc::user_dictionary::UserDictionaryCommandStatus_Status_IsValid(value)) {
            set_status(static_cast< ::mozc::user_dictionary::UserDictionaryCommandStatus_Status >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_session_id;
        break;
      }

      // optional uint64 session_id = 2;
      case 2: {
        if (tag == 16) {
         parse_session_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &session_id_)));
          set_has_session_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_storage;
        break;
      }

      // optional .mozc.user_dictionary.UserDictionaryStorage storage = 3;
      case 3: {
        if (tag == 26) {
         parse_storage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_storage()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_dictionary_id;
        break;
      }

      // optional uint64 dictionary_id = 5;
      case 5: {
        if (tag == 40) {
         parse_dictionary_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dictionary_id_)));
          set_has_dictionary_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_entry_size;
        break;
      }

      // optional uint32 entry_size = 6;
      case 6: {
        if (tag == 48) {
         parse_entry_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &entry_size_)));
          set_has_entry_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_entries;
        break;
      }

      // repeated .mozc.user_dictionary.UserDictionary.Entry entries = 7;
      case 7: {
        if (tag == 58) {
         parse_entries:
          DO_(input->IncrementRecursionDepth());
         parse_loop_entries:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_entries()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_loop_entries;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mozc.user_dictionary.UserDictionaryCommandStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mozc.user_dictionary.UserDictionaryCommandStatus)
  return false;
#undef DO_
}

void UserDictionaryCommandStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mozc.user_dictionary.UserDictionaryCommandStatus)
  // required .mozc.user_dictionary.UserDictionaryCommandStatus.Status status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  // optional uint64 session_id = 2;
  if (has_session_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->session_id(), output);
  }

  // optional .mozc.user_dictionary.UserDictionaryStorage storage = 3;
  if (has_storage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->storage_, output);
  }

  // optional uint64 dictionary_id = 5;
  if (has_dictionary_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->dictionary_id(), output);
  }

  // optional uint32 entry_size = 6;
  if (has_entry_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->entry_size(), output);
  }

  // repeated .mozc.user_dictionary.UserDictionary.Entry entries = 7;
  for (unsigned int i = 0, n = this->entries_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->entries(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mozc.user_dictionary.UserDictionaryCommandStatus)
}

::google::protobuf::uint8* UserDictionaryCommandStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mozc.user_dictionary.UserDictionaryCommandStatus)
  // required .mozc.user_dictionary.UserDictionaryCommandStatus.Status status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  // optional uint64 session_id = 2;
  if (has_session_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->session_id(), target);
  }

  // optional .mozc.user_dictionary.UserDictionaryStorage storage = 3;
  if (has_storage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->storage_, false, target);
  }

  // optional uint64 dictionary_id = 5;
  if (has_dictionary_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->dictionary_id(), target);
  }

  // optional uint32 entry_size = 6;
  if (has_entry_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->entry_size(), target);
  }

  // repeated .mozc.user_dictionary.UserDictionary.Entry entries = 7;
  for (unsigned int i = 0, n = this->entries_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, this->entries(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mozc.user_dictionary.UserDictionaryCommandStatus)
  return target;
}

int UserDictionaryCommandStatus::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:mozc.user_dictionary.UserDictionaryCommandStatus)
  int total_size = 0;

  // required .mozc.user_dictionary.UserDictionaryCommandStatus.Status status = 1;
  if (has_status()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }
  if (_has_bits_[1 / 32] & 30u) {
    // optional uint64 session_id = 2;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->session_id());
    }

    // optional .mozc.user_dictionary.UserDictionaryStorage storage = 3;
    if (has_storage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->storage_);
    }

    // optional uint64 dictionary_id = 5;
    if (has_dictionary_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dictionary_id());
    }

    // optional uint32 entry_size = 6;
    if (has_entry_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->entry_size());
    }

  }
  // repeated .mozc.user_dictionary.UserDictionary.Entry entries = 7;
  total_size += 1 * this->entries_size();
  for (int i = 0; i < this->entries_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->entries(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserDictionaryCommandStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mozc.user_dictionary.UserDictionaryCommandStatus)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const UserDictionaryCommandStatus* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const UserDictionaryCommandStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mozc.user_dictionary.UserDictionaryCommandStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mozc.user_dictionary.UserDictionaryCommandStatus)
    MergeFrom(*source);
  }
}

void UserDictionaryCommandStatus::MergeFrom(const UserDictionaryCommandStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mozc.user_dictionary.UserDictionaryCommandStatus)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  entries_.MergeFrom(from.entries_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_session_id()) {
      set_session_id(from.session_id());
    }
    if (from.has_storage()) {
      mutable_storage()->::mozc::user_dictionary::UserDictionaryStorage::MergeFrom(from.storage());
    }
    if (from.has_dictionary_id()) {
      set_dictionary_id(from.dictionary_id());
    }
    if (from.has_entry_size()) {
      set_entry_size(from.entry_size());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void UserDictionaryCommandStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mozc.user_dictionary.UserDictionaryCommandStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserDictionaryCommandStatus::CopyFrom(const UserDictionaryCommandStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mozc.user_dictionary.UserDictionaryCommandStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserDictionaryCommandStatus::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void UserDictionaryCommandStatus::Swap(UserDictionaryCommandStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserDictionaryCommandStatus::InternalSwap(UserDictionaryCommandStatus* other) {
  std::swap(status_, other->status_);
  std::swap(session_id_, other->session_id_);
  std::swap(storage_, other->storage_);
  std::swap(dictionary_id_, other->dictionary_id_);
  std::swap(entry_size_, other->entry_size_);
  entries_.UnsafeArenaSwap(&other->entries_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserDictionaryCommandStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserDictionaryCommandStatus_descriptor_;
  metadata.reflection = UserDictionaryCommandStatus_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserDictionaryCommandStatus

// required .mozc.user_dictionary.UserDictionaryCommandStatus.Status status = 1;
bool UserDictionaryCommandStatus::has_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UserDictionaryCommandStatus::set_has_status() {
  _has_bits_[0] |= 0x00000001u;
}
void UserDictionaryCommandStatus::clear_has_status() {
  _has_bits_[0] &= ~0x00000001u;
}
void UserDictionaryCommandStatus::clear_status() {
  status_ = 1;
  clear_has_status();
}
 ::mozc::user_dictionary::UserDictionaryCommandStatus_Status UserDictionaryCommandStatus::status() const {
  // @@protoc_insertion_point(field_get:mozc.user_dictionary.UserDictionaryCommandStatus.status)
  return static_cast< ::mozc::user_dictionary::UserDictionaryCommandStatus_Status >(status_);
}
 void UserDictionaryCommandStatus::set_status(::mozc::user_dictionary::UserDictionaryCommandStatus_Status value) {
  assert(::mozc::user_dictionary::UserDictionaryCommandStatus_Status_IsValid(value));
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:mozc.user_dictionary.UserDictionaryCommandStatus.status)
}

// optional uint64 session_id = 2;
bool UserDictionaryCommandStatus::has_session_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void UserDictionaryCommandStatus::set_has_session_id() {
  _has_bits_[0] |= 0x00000002u;
}
void UserDictionaryCommandStatus::clear_has_session_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void UserDictionaryCommandStatus::clear_session_id() {
  session_id_ = GOOGLE_ULONGLONG(0);
  clear_has_session_id();
}
 ::google::protobuf::uint64 UserDictionaryCommandStatus::session_id() const {
  // @@protoc_insertion_point(field_get:mozc.user_dictionary.UserDictionaryCommandStatus.session_id)
  return session_id_;
}
 void UserDictionaryCommandStatus::set_session_id(::google::protobuf::uint64 value) {
  set_has_session_id();
  session_id_ = value;
  // @@protoc_insertion_point(field_set:mozc.user_dictionary.UserDictionaryCommandStatus.session_id)
}

// optional .mozc.user_dictionary.UserDictionaryStorage storage = 3;
bool UserDictionaryCommandStatus::has_storage() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void UserDictionaryCommandStatus::set_has_storage() {
  _has_bits_[0] |= 0x00000004u;
}
void UserDictionaryCommandStatus::clear_has_storage() {
  _has_bits_[0] &= ~0x00000004u;
}
void UserDictionaryCommandStatus::clear_storage() {
  if (storage_ != NULL) storage_->::mozc::user_dictionary::UserDictionaryStorage::Clear();
  clear_has_storage();
}
const ::mozc::user_dictionary::UserDictionaryStorage& UserDictionaryCommandStatus::storage() const {
  // @@protoc_insertion_point(field_get:mozc.user_dictionary.UserDictionaryCommandStatus.storage)
  return storage_ != NULL ? *storage_ : *default_instance_->storage_;
}
::mozc::user_dictionary::UserDictionaryStorage* UserDictionaryCommandStatus::mutable_storage() {
  set_has_storage();
  if (storage_ == NULL) {
    storage_ = new ::mozc::user_dictionary::UserDictionaryStorage;
  }
  // @@protoc_insertion_point(field_mutable:mozc.user_dictionary.UserDictionaryCommandStatus.storage)
  return storage_;
}
::mozc::user_dictionary::UserDictionaryStorage* UserDictionaryCommandStatus::release_storage() {
  // @@protoc_insertion_point(field_release:mozc.user_dictionary.UserDictionaryCommandStatus.storage)
  clear_has_storage();
  ::mozc::user_dictionary::UserDictionaryStorage* temp = storage_;
  storage_ = NULL;
  return temp;
}
void UserDictionaryCommandStatus::set_allocated_storage(::mozc::user_dictionary::UserDictionaryStorage* storage) {
  delete storage_;
  storage_ = storage;
  if (storage) {
    set_has_storage();
  } else {
    clear_has_storage();
  }
  // @@protoc_insertion_point(field_set_allocated:mozc.user_dictionary.UserDictionaryCommandStatus.storage)
}

// optional uint64 dictionary_id = 5;
bool UserDictionaryCommandStatus::has_dictionary_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void UserDictionaryCommandStatus::set_has_dictionary_id() {
  _has_bits_[0] |= 0x00000008u;
}
void UserDictionaryCommandStatus::clear_has_dictionary_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void UserDictionaryCommandStatus::clear_dictionary_id() {
  dictionary_id_ = GOOGLE_ULONGLONG(0);
  clear_has_dictionary_id();
}
 ::google::protobuf::uint64 UserDictionaryCommandStatus::dictionary_id() const {
  // @@protoc_insertion_point(field_get:mozc.user_dictionary.UserDictionaryCommandStatus.dictionary_id)
  return dictionary_id_;
}
 void UserDictionaryCommandStatus::set_dictionary_id(::google::protobuf::uint64 value) {
  set_has_dictionary_id();
  dictionary_id_ = value;
  // @@protoc_insertion_point(field_set:mozc.user_dictionary.UserDictionaryCommandStatus.dictionary_id)
}

// optional uint32 entry_size = 6;
bool UserDictionaryCommandStatus::has_entry_size() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void UserDictionaryCommandStatus::set_has_entry_size() {
  _has_bits_[0] |= 0x00000010u;
}
void UserDictionaryCommandStatus::clear_has_entry_size() {
  _has_bits_[0] &= ~0x00000010u;
}
void UserDictionaryCommandStatus::clear_entry_size() {
  entry_size_ = 0u;
  clear_has_entry_size();
}
 ::google::protobuf::uint32 UserDictionaryCommandStatus::entry_size() const {
  // @@protoc_insertion_point(field_get:mozc.user_dictionary.UserDictionaryCommandStatus.entry_size)
  return entry_size_;
}
 void UserDictionaryCommandStatus::set_entry_size(::google::protobuf::uint32 value) {
  set_has_entry_size();
  entry_size_ = value;
  // @@protoc_insertion_point(field_set:mozc.user_dictionary.UserDictionaryCommandStatus.entry_size)
}

// repeated .mozc.user_dictionary.UserDictionary.Entry entries = 7;
int UserDictionaryCommandStatus::entries_size() const {
  return entries_.size();
}
void UserDictionaryCommandStatus::clear_entries() {
  entries_.Clear();
}
const ::mozc::user_dictionary::UserDictionary_Entry& UserDictionaryCommandStatus::entries(int index) const {
  // @@protoc_insertion_point(field_get:mozc.user_dictionary.UserDictionaryCommandStatus.entries)
  return entries_.Get(index);
}
::mozc::user_dictionary::UserDictionary_Entry* UserDictionaryCommandStatus::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:mozc.user_dictionary.UserDictionaryCommandStatus.entries)
  return entries_.Mutable(index);
}
::mozc::user_dictionary::UserDictionary_Entry* UserDictionaryCommandStatus::add_entries() {
  // @@protoc_insertion_point(field_add:mozc.user_dictionary.UserDictionaryCommandStatus.entries)
  return entries_.Add();
}
::google::protobuf::RepeatedPtrField< ::mozc::user_dictionary::UserDictionary_Entry >*
UserDictionaryCommandStatus::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:mozc.user_dictionary.UserDictionaryCommandStatus.entries)
  return &entries_;
}
const ::google::protobuf::RepeatedPtrField< ::mozc::user_dictionary::UserDictionary_Entry >&
UserDictionaryCommandStatus::entries() const {
  // @@protoc_insertion_point(field_list:mozc.user_dictionary.UserDictionaryCommandStatus.entries)
  return entries_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace user_dictionary
}  // namespace mozc

// @@protoc_insertion_point(global_scope)
