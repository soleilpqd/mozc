// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: usage_stats/usage_stats.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "usage_stats/usage_stats.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace mozc {
namespace usage_stats {

namespace {

const ::google::protobuf::Descriptor* Stats_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Stats_reflection_ = NULL;
const ::google::protobuf::Descriptor* Stats_DoubleValueStats_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Stats_DoubleValueStats_reflection_ = NULL;
const ::google::protobuf::Descriptor* Stats_TouchEventStats_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Stats_TouchEventStats_reflection_ = NULL;
const ::google::protobuf::Descriptor* Stats_VirtualKeyboardStats_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Stats_VirtualKeyboardStats_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Stats_Type_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_usage_5fstats_2fusage_5fstats_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_usage_5fstats_2fusage_5fstats_2eproto() {
  protobuf_AddDesc_usage_5fstats_2fusage_5fstats_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "usage_stats/usage_stats.proto");
  GOOGLE_CHECK(file != NULL);
  Stats_descriptor_ = file->message_type(0);
  static const int Stats_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stats, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stats, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stats, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stats, total_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stats, num_timings_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stats, avg_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stats, min_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stats, max_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stats, int_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stats, boolean_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stats, virtual_keyboard_stats_),
  };
  Stats_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Stats_descriptor_,
      Stats::default_instance_,
      Stats_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stats, _has_bits_[0]),
      -1,
      -1,
      sizeof(Stats),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stats, _internal_metadata_),
      -1);
  Stats_DoubleValueStats_descriptor_ = Stats_descriptor_->nested_type(0);
  static const int Stats_DoubleValueStats_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stats_DoubleValueStats, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stats_DoubleValueStats, total_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stats_DoubleValueStats, square_total_),
  };
  Stats_DoubleValueStats_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Stats_DoubleValueStats_descriptor_,
      Stats_DoubleValueStats::default_instance_,
      Stats_DoubleValueStats_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stats_DoubleValueStats, _has_bits_[0]),
      -1,
      -1,
      sizeof(Stats_DoubleValueStats),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stats_DoubleValueStats, _internal_metadata_),
      -1);
  Stats_TouchEventStats_descriptor_ = Stats_descriptor_->nested_type(1);
  static const int Stats_TouchEventStats_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stats_TouchEventStats, source_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stats_TouchEventStats, start_x_stats_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stats_TouchEventStats, start_y_stats_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stats_TouchEventStats, direction_x_stats_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stats_TouchEventStats, direction_y_stats_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stats_TouchEventStats, time_length_stats_),
  };
  Stats_TouchEventStats_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Stats_TouchEventStats_descriptor_,
      Stats_TouchEventStats::default_instance_,
      Stats_TouchEventStats_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stats_TouchEventStats, _has_bits_[0]),
      -1,
      -1,
      sizeof(Stats_TouchEventStats),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stats_TouchEventStats, _internal_metadata_),
      -1);
  Stats_VirtualKeyboardStats_descriptor_ = Stats_descriptor_->nested_type(2);
  static const int Stats_VirtualKeyboardStats_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stats_VirtualKeyboardStats, keyboard_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stats_VirtualKeyboardStats, touch_event_stats_),
  };
  Stats_VirtualKeyboardStats_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Stats_VirtualKeyboardStats_descriptor_,
      Stats_VirtualKeyboardStats::default_instance_,
      Stats_VirtualKeyboardStats_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stats_VirtualKeyboardStats, _has_bits_[0]),
      -1,
      -1,
      sizeof(Stats_VirtualKeyboardStats),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stats_VirtualKeyboardStats, _internal_metadata_),
      -1);
  Stats_Type_descriptor_ = Stats_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_usage_5fstats_2fusage_5fstats_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Stats_descriptor_, &Stats::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Stats_DoubleValueStats_descriptor_, &Stats_DoubleValueStats::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Stats_TouchEventStats_descriptor_, &Stats_TouchEventStats::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Stats_VirtualKeyboardStats_descriptor_, &Stats_VirtualKeyboardStats::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_usage_5fstats_2fusage_5fstats_2eproto() {
  delete Stats::default_instance_;
  delete Stats_reflection_;
  delete Stats_DoubleValueStats::default_instance_;
  delete Stats_DoubleValueStats_reflection_;
  delete Stats_TouchEventStats::default_instance_;
  delete Stats_TouchEventStats_reflection_;
  delete Stats_VirtualKeyboardStats::default_instance_;
  delete Stats_VirtualKeyboardStats_reflection_;
}

void protobuf_AddDesc_usage_5fstats_2fusage_5fstats_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_usage_5fstats_2fusage_5fstats_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\035usage_stats/usage_stats.proto\022\020mozc.us"
    "age_stats\"\247\007\n\005Stats\022\014\n\004name\030\001 \002(\t\022*\n\004typ"
    "e\030\002 \002(\0162\034.mozc.usage_stats.Stats.Type\022\r\n"
    "\005count\030\003 \001(\r\022\022\n\ntotal_time\030\n \001(\004\022\023\n\013num_"
    "timings\030\004 \001(\r\022\020\n\010avg_time\030\005 \001(\r\022\020\n\010min_t"
    "ime\030\006 \001(\r\022\020\n\010max_time\030\007 \001(\r\022\021\n\tint_value"
    "\030\010 \001(\005\022\025\n\rboolean_value\030\t \001(\010\022L\n\026virtual"
    "_keyboard_stats\030\013 \003(\0132,.mozc.usage_stats"
    ".Stats.VirtualKeyboardStats\032D\n\020DoubleVal"
    "ueStats\022\013\n\003num\030\001 \001(\r\022\r\n\005total\030\002 \001(\001\022\024\n\014s"
    "quare_total\030\003 \001(\001\032\365\002\n\017TouchEventStats\022\021\n"
    "\tsource_id\030\001 \001(\r\022\?\n\rstart_x_stats\030\002 \001(\0132"
    "(.mozc.usage_stats.Stats.DoubleValueStat"
    "s\022\?\n\rstart_y_stats\030\003 \001(\0132(.mozc.usage_st"
    "ats.Stats.DoubleValueStats\022C\n\021direction_"
    "x_stats\030\004 \001(\0132(.mozc.usage_stats.Stats.D"
    "oubleValueStats\022C\n\021direction_y_stats\030\005 \001"
    "(\0132(.mozc.usage_stats.Stats.DoubleValueS"
    "tats\022C\n\021time_length_stats\030\006 \001(\0132(.mozc.u"
    "sage_stats.Stats.DoubleValueStats\032q\n\024Vir"
    "tualKeyboardStats\022\025\n\rkeyboard_name\030\001 \001(\t"
    "\022B\n\021touch_event_stats\030\002 \003(\0132\'.mozc.usage"
    "_stats.Stats.TouchEventStats\"M\n\004Type\022\t\n\005"
    "COUNT\020\000\022\n\n\006TIMING\020\001\022\013\n\007INTEGER\020\002\022\013\n\007BOOL"
    "EAN\020\003\022\024\n\020VIRTUAL_KEYBOARD\020\004", 987);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "usage_stats/usage_stats.proto", &protobuf_RegisterTypes);
  Stats::default_instance_ = new Stats();
  Stats_DoubleValueStats::default_instance_ = new Stats_DoubleValueStats();
  Stats_TouchEventStats::default_instance_ = new Stats_TouchEventStats();
  Stats_VirtualKeyboardStats::default_instance_ = new Stats_VirtualKeyboardStats();
  Stats::default_instance_->InitAsDefaultInstance();
  Stats_DoubleValueStats::default_instance_->InitAsDefaultInstance();
  Stats_TouchEventStats::default_instance_->InitAsDefaultInstance();
  Stats_VirtualKeyboardStats::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_usage_5fstats_2fusage_5fstats_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_usage_5fstats_2fusage_5fstats_2eproto {
  StaticDescriptorInitializer_usage_5fstats_2fusage_5fstats_2eproto() {
    protobuf_AddDesc_usage_5fstats_2fusage_5fstats_2eproto();
  }
} static_descriptor_initializer_usage_5fstats_2fusage_5fstats_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* Stats_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Stats_Type_descriptor_;
}
bool Stats_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Stats_Type Stats::COUNT;
const Stats_Type Stats::TIMING;
const Stats_Type Stats::INTEGER;
const Stats_Type Stats::BOOLEAN;
const Stats_Type Stats::VIRTUAL_KEYBOARD;
const Stats_Type Stats::Type_MIN;
const Stats_Type Stats::Type_MAX;
const int Stats::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Stats_DoubleValueStats::kNumFieldNumber;
const int Stats_DoubleValueStats::kTotalFieldNumber;
const int Stats_DoubleValueStats::kSquareTotalFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Stats_DoubleValueStats::Stats_DoubleValueStats()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mozc.usage_stats.Stats.DoubleValueStats)
}

void Stats_DoubleValueStats::InitAsDefaultInstance() {
}

Stats_DoubleValueStats::Stats_DoubleValueStats(const Stats_DoubleValueStats& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mozc.usage_stats.Stats.DoubleValueStats)
}

void Stats_DoubleValueStats::SharedCtor() {
  _cached_size_ = 0;
  num_ = 0u;
  total_ = 0;
  square_total_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Stats_DoubleValueStats::~Stats_DoubleValueStats() {
  // @@protoc_insertion_point(destructor:mozc.usage_stats.Stats.DoubleValueStats)
  SharedDtor();
}

void Stats_DoubleValueStats::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Stats_DoubleValueStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Stats_DoubleValueStats::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Stats_DoubleValueStats_descriptor_;
}

const Stats_DoubleValueStats& Stats_DoubleValueStats::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_usage_5fstats_2fusage_5fstats_2eproto();
  return *default_instance_;
}

Stats_DoubleValueStats* Stats_DoubleValueStats::default_instance_ = NULL;

Stats_DoubleValueStats* Stats_DoubleValueStats::New(::google::protobuf::Arena* arena) const {
  Stats_DoubleValueStats* n = new Stats_DoubleValueStats;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Stats_DoubleValueStats::Clear() {
// @@protoc_insertion_point(message_clear_start:mozc.usage_stats.Stats.DoubleValueStats)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Stats_DoubleValueStats, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Stats_DoubleValueStats*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(total_, num_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Stats_DoubleValueStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mozc.usage_stats.Stats.DoubleValueStats)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 num = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_total;
        break;
      }

      // optional double total = 2;
      case 2: {
        if (tag == 17) {
         parse_total:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &total_)));
          set_has_total();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_square_total;
        break;
      }

      // optional double square_total = 3;
      case 3: {
        if (tag == 25) {
         parse_square_total:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &square_total_)));
          set_has_square_total();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mozc.usage_stats.Stats.DoubleValueStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mozc.usage_stats.Stats.DoubleValueStats)
  return false;
#undef DO_
}

void Stats_DoubleValueStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mozc.usage_stats.Stats.DoubleValueStats)
  // optional uint32 num = 1;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->num(), output);
  }

  // optional double total = 2;
  if (has_total()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->total(), output);
  }

  // optional double square_total = 3;
  if (has_square_total()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->square_total(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mozc.usage_stats.Stats.DoubleValueStats)
}

::google::protobuf::uint8* Stats_DoubleValueStats::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mozc.usage_stats.Stats.DoubleValueStats)
  // optional uint32 num = 1;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->num(), target);
  }

  // optional double total = 2;
  if (has_total()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->total(), target);
  }

  // optional double square_total = 3;
  if (has_square_total()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->square_total(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mozc.usage_stats.Stats.DoubleValueStats)
  return target;
}

int Stats_DoubleValueStats::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:mozc.usage_stats.Stats.DoubleValueStats)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional uint32 num = 1;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

    // optional double total = 2;
    if (has_total()) {
      total_size += 1 + 8;
    }

    // optional double square_total = 3;
    if (has_square_total()) {
      total_size += 1 + 8;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Stats_DoubleValueStats::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mozc.usage_stats.Stats.DoubleValueStats)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Stats_DoubleValueStats* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Stats_DoubleValueStats>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mozc.usage_stats.Stats.DoubleValueStats)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mozc.usage_stats.Stats.DoubleValueStats)
    MergeFrom(*source);
  }
}

void Stats_DoubleValueStats::MergeFrom(const Stats_DoubleValueStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mozc.usage_stats.Stats.DoubleValueStats)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_total()) {
      set_total(from.total());
    }
    if (from.has_square_total()) {
      set_square_total(from.square_total());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Stats_DoubleValueStats::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mozc.usage_stats.Stats.DoubleValueStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Stats_DoubleValueStats::CopyFrom(const Stats_DoubleValueStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mozc.usage_stats.Stats.DoubleValueStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Stats_DoubleValueStats::IsInitialized() const {

  return true;
}

void Stats_DoubleValueStats::Swap(Stats_DoubleValueStats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Stats_DoubleValueStats::InternalSwap(Stats_DoubleValueStats* other) {
  std::swap(num_, other->num_);
  std::swap(total_, other->total_);
  std::swap(square_total_, other->square_total_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Stats_DoubleValueStats::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Stats_DoubleValueStats_descriptor_;
  metadata.reflection = Stats_DoubleValueStats_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Stats_TouchEventStats::kSourceIdFieldNumber;
const int Stats_TouchEventStats::kStartXStatsFieldNumber;
const int Stats_TouchEventStats::kStartYStatsFieldNumber;
const int Stats_TouchEventStats::kDirectionXStatsFieldNumber;
const int Stats_TouchEventStats::kDirectionYStatsFieldNumber;
const int Stats_TouchEventStats::kTimeLengthStatsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Stats_TouchEventStats::Stats_TouchEventStats()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mozc.usage_stats.Stats.TouchEventStats)
}

void Stats_TouchEventStats::InitAsDefaultInstance() {
  start_x_stats_ = const_cast< ::mozc::usage_stats::Stats_DoubleValueStats*>(&::mozc::usage_stats::Stats_DoubleValueStats::default_instance());
  start_y_stats_ = const_cast< ::mozc::usage_stats::Stats_DoubleValueStats*>(&::mozc::usage_stats::Stats_DoubleValueStats::default_instance());
  direction_x_stats_ = const_cast< ::mozc::usage_stats::Stats_DoubleValueStats*>(&::mozc::usage_stats::Stats_DoubleValueStats::default_instance());
  direction_y_stats_ = const_cast< ::mozc::usage_stats::Stats_DoubleValueStats*>(&::mozc::usage_stats::Stats_DoubleValueStats::default_instance());
  time_length_stats_ = const_cast< ::mozc::usage_stats::Stats_DoubleValueStats*>(&::mozc::usage_stats::Stats_DoubleValueStats::default_instance());
}

Stats_TouchEventStats::Stats_TouchEventStats(const Stats_TouchEventStats& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mozc.usage_stats.Stats.TouchEventStats)
}

void Stats_TouchEventStats::SharedCtor() {
  _cached_size_ = 0;
  source_id_ = 0u;
  start_x_stats_ = NULL;
  start_y_stats_ = NULL;
  direction_x_stats_ = NULL;
  direction_y_stats_ = NULL;
  time_length_stats_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Stats_TouchEventStats::~Stats_TouchEventStats() {
  // @@protoc_insertion_point(destructor:mozc.usage_stats.Stats.TouchEventStats)
  SharedDtor();
}

void Stats_TouchEventStats::SharedDtor() {
  if (this != default_instance_) {
    delete start_x_stats_;
    delete start_y_stats_;
    delete direction_x_stats_;
    delete direction_y_stats_;
    delete time_length_stats_;
  }
}

void Stats_TouchEventStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Stats_TouchEventStats::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Stats_TouchEventStats_descriptor_;
}

const Stats_TouchEventStats& Stats_TouchEventStats::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_usage_5fstats_2fusage_5fstats_2eproto();
  return *default_instance_;
}

Stats_TouchEventStats* Stats_TouchEventStats::default_instance_ = NULL;

Stats_TouchEventStats* Stats_TouchEventStats::New(::google::protobuf::Arena* arena) const {
  Stats_TouchEventStats* n = new Stats_TouchEventStats;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Stats_TouchEventStats::Clear() {
// @@protoc_insertion_point(message_clear_start:mozc.usage_stats.Stats.TouchEventStats)
  if (_has_bits_[0 / 32] & 63u) {
    source_id_ = 0u;
    if (has_start_x_stats()) {
      if (start_x_stats_ != NULL) start_x_stats_->::mozc::usage_stats::Stats_DoubleValueStats::Clear();
    }
    if (has_start_y_stats()) {
      if (start_y_stats_ != NULL) start_y_stats_->::mozc::usage_stats::Stats_DoubleValueStats::Clear();
    }
    if (has_direction_x_stats()) {
      if (direction_x_stats_ != NULL) direction_x_stats_->::mozc::usage_stats::Stats_DoubleValueStats::Clear();
    }
    if (has_direction_y_stats()) {
      if (direction_y_stats_ != NULL) direction_y_stats_->::mozc::usage_stats::Stats_DoubleValueStats::Clear();
    }
    if (has_time_length_stats()) {
      if (time_length_stats_ != NULL) time_length_stats_->::mozc::usage_stats::Stats_DoubleValueStats::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Stats_TouchEventStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mozc.usage_stats.Stats.TouchEventStats)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 source_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &source_id_)));
          set_has_source_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_start_x_stats;
        break;
      }

      // optional .mozc.usage_stats.Stats.DoubleValueStats start_x_stats = 2;
      case 2: {
        if (tag == 18) {
         parse_start_x_stats:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_start_x_stats()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_start_y_stats;
        break;
      }

      // optional .mozc.usage_stats.Stats.DoubleValueStats start_y_stats = 3;
      case 3: {
        if (tag == 26) {
         parse_start_y_stats:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_start_y_stats()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_direction_x_stats;
        break;
      }

      // optional .mozc.usage_stats.Stats.DoubleValueStats direction_x_stats = 4;
      case 4: {
        if (tag == 34) {
         parse_direction_x_stats:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_direction_x_stats()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_direction_y_stats;
        break;
      }

      // optional .mozc.usage_stats.Stats.DoubleValueStats direction_y_stats = 5;
      case 5: {
        if (tag == 42) {
         parse_direction_y_stats:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_direction_y_stats()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_time_length_stats;
        break;
      }

      // optional .mozc.usage_stats.Stats.DoubleValueStats time_length_stats = 6;
      case 6: {
        if (tag == 50) {
         parse_time_length_stats:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_time_length_stats()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mozc.usage_stats.Stats.TouchEventStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mozc.usage_stats.Stats.TouchEventStats)
  return false;
#undef DO_
}

void Stats_TouchEventStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mozc.usage_stats.Stats.TouchEventStats)
  // optional uint32 source_id = 1;
  if (has_source_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->source_id(), output);
  }

  // optional .mozc.usage_stats.Stats.DoubleValueStats start_x_stats = 2;
  if (has_start_x_stats()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->start_x_stats_, output);
  }

  // optional .mozc.usage_stats.Stats.DoubleValueStats start_y_stats = 3;
  if (has_start_y_stats()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->start_y_stats_, output);
  }

  // optional .mozc.usage_stats.Stats.DoubleValueStats direction_x_stats = 4;
  if (has_direction_x_stats()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->direction_x_stats_, output);
  }

  // optional .mozc.usage_stats.Stats.DoubleValueStats direction_y_stats = 5;
  if (has_direction_y_stats()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->direction_y_stats_, output);
  }

  // optional .mozc.usage_stats.Stats.DoubleValueStats time_length_stats = 6;
  if (has_time_length_stats()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->time_length_stats_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mozc.usage_stats.Stats.TouchEventStats)
}

::google::protobuf::uint8* Stats_TouchEventStats::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mozc.usage_stats.Stats.TouchEventStats)
  // optional uint32 source_id = 1;
  if (has_source_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->source_id(), target);
  }

  // optional .mozc.usage_stats.Stats.DoubleValueStats start_x_stats = 2;
  if (has_start_x_stats()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->start_x_stats_, false, target);
  }

  // optional .mozc.usage_stats.Stats.DoubleValueStats start_y_stats = 3;
  if (has_start_y_stats()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->start_y_stats_, false, target);
  }

  // optional .mozc.usage_stats.Stats.DoubleValueStats direction_x_stats = 4;
  if (has_direction_x_stats()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->direction_x_stats_, false, target);
  }

  // optional .mozc.usage_stats.Stats.DoubleValueStats direction_y_stats = 5;
  if (has_direction_y_stats()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->direction_y_stats_, false, target);
  }

  // optional .mozc.usage_stats.Stats.DoubleValueStats time_length_stats = 6;
  if (has_time_length_stats()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->time_length_stats_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mozc.usage_stats.Stats.TouchEventStats)
  return target;
}

int Stats_TouchEventStats::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:mozc.usage_stats.Stats.TouchEventStats)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 63u) {
    // optional uint32 source_id = 1;
    if (has_source_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->source_id());
    }

    // optional .mozc.usage_stats.Stats.DoubleValueStats start_x_stats = 2;
    if (has_start_x_stats()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->start_x_stats_);
    }

    // optional .mozc.usage_stats.Stats.DoubleValueStats start_y_stats = 3;
    if (has_start_y_stats()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->start_y_stats_);
    }

    // optional .mozc.usage_stats.Stats.DoubleValueStats direction_x_stats = 4;
    if (has_direction_x_stats()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->direction_x_stats_);
    }

    // optional .mozc.usage_stats.Stats.DoubleValueStats direction_y_stats = 5;
    if (has_direction_y_stats()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->direction_y_stats_);
    }

    // optional .mozc.usage_stats.Stats.DoubleValueStats time_length_stats = 6;
    if (has_time_length_stats()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->time_length_stats_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Stats_TouchEventStats::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mozc.usage_stats.Stats.TouchEventStats)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Stats_TouchEventStats* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Stats_TouchEventStats>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mozc.usage_stats.Stats.TouchEventStats)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mozc.usage_stats.Stats.TouchEventStats)
    MergeFrom(*source);
  }
}

void Stats_TouchEventStats::MergeFrom(const Stats_TouchEventStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mozc.usage_stats.Stats.TouchEventStats)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_source_id()) {
      set_source_id(from.source_id());
    }
    if (from.has_start_x_stats()) {
      mutable_start_x_stats()->::mozc::usage_stats::Stats_DoubleValueStats::MergeFrom(from.start_x_stats());
    }
    if (from.has_start_y_stats()) {
      mutable_start_y_stats()->::mozc::usage_stats::Stats_DoubleValueStats::MergeFrom(from.start_y_stats());
    }
    if (from.has_direction_x_stats()) {
      mutable_direction_x_stats()->::mozc::usage_stats::Stats_DoubleValueStats::MergeFrom(from.direction_x_stats());
    }
    if (from.has_direction_y_stats()) {
      mutable_direction_y_stats()->::mozc::usage_stats::Stats_DoubleValueStats::MergeFrom(from.direction_y_stats());
    }
    if (from.has_time_length_stats()) {
      mutable_time_length_stats()->::mozc::usage_stats::Stats_DoubleValueStats::MergeFrom(from.time_length_stats());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Stats_TouchEventStats::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mozc.usage_stats.Stats.TouchEventStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Stats_TouchEventStats::CopyFrom(const Stats_TouchEventStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mozc.usage_stats.Stats.TouchEventStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Stats_TouchEventStats::IsInitialized() const {

  return true;
}

void Stats_TouchEventStats::Swap(Stats_TouchEventStats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Stats_TouchEventStats::InternalSwap(Stats_TouchEventStats* other) {
  std::swap(source_id_, other->source_id_);
  std::swap(start_x_stats_, other->start_x_stats_);
  std::swap(start_y_stats_, other->start_y_stats_);
  std::swap(direction_x_stats_, other->direction_x_stats_);
  std::swap(direction_y_stats_, other->direction_y_stats_);
  std::swap(time_length_stats_, other->time_length_stats_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Stats_TouchEventStats::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Stats_TouchEventStats_descriptor_;
  metadata.reflection = Stats_TouchEventStats_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Stats_VirtualKeyboardStats::kKeyboardNameFieldNumber;
const int Stats_VirtualKeyboardStats::kTouchEventStatsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Stats_VirtualKeyboardStats::Stats_VirtualKeyboardStats()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mozc.usage_stats.Stats.VirtualKeyboardStats)
}

void Stats_VirtualKeyboardStats::InitAsDefaultInstance() {
}

Stats_VirtualKeyboardStats::Stats_VirtualKeyboardStats(const Stats_VirtualKeyboardStats& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mozc.usage_stats.Stats.VirtualKeyboardStats)
}

void Stats_VirtualKeyboardStats::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  keyboard_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Stats_VirtualKeyboardStats::~Stats_VirtualKeyboardStats() {
  // @@protoc_insertion_point(destructor:mozc.usage_stats.Stats.VirtualKeyboardStats)
  SharedDtor();
}

void Stats_VirtualKeyboardStats::SharedDtor() {
  keyboard_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Stats_VirtualKeyboardStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Stats_VirtualKeyboardStats::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Stats_VirtualKeyboardStats_descriptor_;
}

const Stats_VirtualKeyboardStats& Stats_VirtualKeyboardStats::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_usage_5fstats_2fusage_5fstats_2eproto();
  return *default_instance_;
}

Stats_VirtualKeyboardStats* Stats_VirtualKeyboardStats::default_instance_ = NULL;

Stats_VirtualKeyboardStats* Stats_VirtualKeyboardStats::New(::google::protobuf::Arena* arena) const {
  Stats_VirtualKeyboardStats* n = new Stats_VirtualKeyboardStats;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Stats_VirtualKeyboardStats::Clear() {
// @@protoc_insertion_point(message_clear_start:mozc.usage_stats.Stats.VirtualKeyboardStats)
  if (has_keyboard_name()) {
    keyboard_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  touch_event_stats_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Stats_VirtualKeyboardStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mozc.usage_stats.Stats.VirtualKeyboardStats)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string keyboard_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_keyboard_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->keyboard_name().data(), this->keyboard_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mozc.usage_stats.Stats.VirtualKeyboardStats.keyboard_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_touch_event_stats;
        break;
      }

      // repeated .mozc.usage_stats.Stats.TouchEventStats touch_event_stats = 2;
      case 2: {
        if (tag == 18) {
         parse_touch_event_stats:
          DO_(input->IncrementRecursionDepth());
         parse_loop_touch_event_stats:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_touch_event_stats()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_touch_event_stats;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mozc.usage_stats.Stats.VirtualKeyboardStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mozc.usage_stats.Stats.VirtualKeyboardStats)
  return false;
#undef DO_
}

void Stats_VirtualKeyboardStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mozc.usage_stats.Stats.VirtualKeyboardStats)
  // optional string keyboard_name = 1;
  if (has_keyboard_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->keyboard_name().data(), this->keyboard_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mozc.usage_stats.Stats.VirtualKeyboardStats.keyboard_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->keyboard_name(), output);
  }

  // repeated .mozc.usage_stats.Stats.TouchEventStats touch_event_stats = 2;
  for (unsigned int i = 0, n = this->touch_event_stats_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->touch_event_stats(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mozc.usage_stats.Stats.VirtualKeyboardStats)
}

::google::protobuf::uint8* Stats_VirtualKeyboardStats::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mozc.usage_stats.Stats.VirtualKeyboardStats)
  // optional string keyboard_name = 1;
  if (has_keyboard_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->keyboard_name().data(), this->keyboard_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mozc.usage_stats.Stats.VirtualKeyboardStats.keyboard_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->keyboard_name(), target);
  }

  // repeated .mozc.usage_stats.Stats.TouchEventStats touch_event_stats = 2;
  for (unsigned int i = 0, n = this->touch_event_stats_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->touch_event_stats(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mozc.usage_stats.Stats.VirtualKeyboardStats)
  return target;
}

int Stats_VirtualKeyboardStats::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:mozc.usage_stats.Stats.VirtualKeyboardStats)
  int total_size = 0;

  // optional string keyboard_name = 1;
  if (has_keyboard_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->keyboard_name());
  }

  // repeated .mozc.usage_stats.Stats.TouchEventStats touch_event_stats = 2;
  total_size += 1 * this->touch_event_stats_size();
  for (int i = 0; i < this->touch_event_stats_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->touch_event_stats(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Stats_VirtualKeyboardStats::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mozc.usage_stats.Stats.VirtualKeyboardStats)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Stats_VirtualKeyboardStats* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Stats_VirtualKeyboardStats>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mozc.usage_stats.Stats.VirtualKeyboardStats)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mozc.usage_stats.Stats.VirtualKeyboardStats)
    MergeFrom(*source);
  }
}

void Stats_VirtualKeyboardStats::MergeFrom(const Stats_VirtualKeyboardStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mozc.usage_stats.Stats.VirtualKeyboardStats)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  touch_event_stats_.MergeFrom(from.touch_event_stats_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_keyboard_name()) {
      set_has_keyboard_name();
      keyboard_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.keyboard_name_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Stats_VirtualKeyboardStats::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mozc.usage_stats.Stats.VirtualKeyboardStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Stats_VirtualKeyboardStats::CopyFrom(const Stats_VirtualKeyboardStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mozc.usage_stats.Stats.VirtualKeyboardStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Stats_VirtualKeyboardStats::IsInitialized() const {

  return true;
}

void Stats_VirtualKeyboardStats::Swap(Stats_VirtualKeyboardStats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Stats_VirtualKeyboardStats::InternalSwap(Stats_VirtualKeyboardStats* other) {
  keyboard_name_.Swap(&other->keyboard_name_);
  touch_event_stats_.UnsafeArenaSwap(&other->touch_event_stats_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Stats_VirtualKeyboardStats::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Stats_VirtualKeyboardStats_descriptor_;
  metadata.reflection = Stats_VirtualKeyboardStats_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Stats::kNameFieldNumber;
const int Stats::kTypeFieldNumber;
const int Stats::kCountFieldNumber;
const int Stats::kTotalTimeFieldNumber;
const int Stats::kNumTimingsFieldNumber;
const int Stats::kAvgTimeFieldNumber;
const int Stats::kMinTimeFieldNumber;
const int Stats::kMaxTimeFieldNumber;
const int Stats::kIntValueFieldNumber;
const int Stats::kBooleanValueFieldNumber;
const int Stats::kVirtualKeyboardStatsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Stats::Stats()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mozc.usage_stats.Stats)
}

void Stats::InitAsDefaultInstance() {
}

Stats::Stats(const Stats& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mozc.usage_stats.Stats)
}

void Stats::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  count_ = 0u;
  total_time_ = GOOGLE_ULONGLONG(0);
  num_timings_ = 0u;
  avg_time_ = 0u;
  min_time_ = 0u;
  max_time_ = 0u;
  int_value_ = 0;
  boolean_value_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Stats::~Stats() {
  // @@protoc_insertion_point(destructor:mozc.usage_stats.Stats)
  SharedDtor();
}

void Stats::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Stats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Stats::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Stats_descriptor_;
}

const Stats& Stats::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_usage_5fstats_2fusage_5fstats_2eproto();
  return *default_instance_;
}

Stats* Stats::default_instance_ = NULL;

Stats* Stats::New(::google::protobuf::Arena* arena) const {
  Stats* n = new Stats;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Stats::Clear() {
// @@protoc_insertion_point(message_clear_start:mozc.usage_stats.Stats)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Stats, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Stats*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(type_, max_time_);
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ZR_(int_value_, boolean_value_);

#undef ZR_HELPER_
#undef ZR_

  virtual_keyboard_stats_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Stats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mozc.usage_stats.Stats)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mozc.usage_stats.Stats.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required .mozc.usage_stats.Stats.Type type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mozc::usage_stats::Stats_Type_IsValid(value)) {
            set_type(static_cast< ::mozc::usage_stats::Stats_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_count;
        break;
      }

      // optional uint32 count = 3;
      case 3: {
        if (tag == 24) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_num_timings;
        break;
      }

      // optional uint32 num_timings = 4;
      case 4: {
        if (tag == 32) {
         parse_num_timings:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_timings_)));
          set_has_num_timings();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_avg_time;
        break;
      }

      // optional uint32 avg_time = 5;
      case 5: {
        if (tag == 40) {
         parse_avg_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &avg_time_)));
          set_has_avg_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_min_time;
        break;
      }

      // optional uint32 min_time = 6;
      case 6: {
        if (tag == 48) {
         parse_min_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &min_time_)));
          set_has_min_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_max_time;
        break;
      }

      // optional uint32 max_time = 7;
      case 7: {
        if (tag == 56) {
         parse_max_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_time_)));
          set_has_max_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_int_value;
        break;
      }

      // optional int32 int_value = 8;
      case 8: {
        if (tag == 64) {
         parse_int_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &int_value_)));
          set_has_int_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_boolean_value;
        break;
      }

      // optional bool boolean_value = 9;
      case 9: {
        if (tag == 72) {
         parse_boolean_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &boolean_value_)));
          set_has_boolean_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_total_time;
        break;
      }

      // optional uint64 total_time = 10;
      case 10: {
        if (tag == 80) {
         parse_total_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &total_time_)));
          set_has_total_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_virtual_keyboard_stats;
        break;
      }

      // repeated .mozc.usage_stats.Stats.VirtualKeyboardStats virtual_keyboard_stats = 11;
      case 11: {
        if (tag == 90) {
         parse_virtual_keyboard_stats:
          DO_(input->IncrementRecursionDepth());
         parse_loop_virtual_keyboard_stats:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_virtual_keyboard_stats()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_loop_virtual_keyboard_stats;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mozc.usage_stats.Stats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mozc.usage_stats.Stats)
  return false;
#undef DO_
}

void Stats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mozc.usage_stats.Stats)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mozc.usage_stats.Stats.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // required .mozc.usage_stats.Stats.Type type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional uint32 count = 3;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->count(), output);
  }

  // optional uint32 num_timings = 4;
  if (has_num_timings()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->num_timings(), output);
  }

  // optional uint32 avg_time = 5;
  if (has_avg_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->avg_time(), output);
  }

  // optional uint32 min_time = 6;
  if (has_min_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->min_time(), output);
  }

  // optional uint32 max_time = 7;
  if (has_max_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->max_time(), output);
  }

  // optional int32 int_value = 8;
  if (has_int_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->int_value(), output);
  }

  // optional bool boolean_value = 9;
  if (has_boolean_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->boolean_value(), output);
  }

  // optional uint64 total_time = 10;
  if (has_total_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->total_time(), output);
  }

  // repeated .mozc.usage_stats.Stats.VirtualKeyboardStats virtual_keyboard_stats = 11;
  for (unsigned int i = 0, n = this->virtual_keyboard_stats_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->virtual_keyboard_stats(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mozc.usage_stats.Stats)
}

::google::protobuf::uint8* Stats::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mozc.usage_stats.Stats)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mozc.usage_stats.Stats.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required .mozc.usage_stats.Stats.Type type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // optional uint32 count = 3;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->count(), target);
  }

  // optional uint32 num_timings = 4;
  if (has_num_timings()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->num_timings(), target);
  }

  // optional uint32 avg_time = 5;
  if (has_avg_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->avg_time(), target);
  }

  // optional uint32 min_time = 6;
  if (has_min_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->min_time(), target);
  }

  // optional uint32 max_time = 7;
  if (has_max_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->max_time(), target);
  }

  // optional int32 int_value = 8;
  if (has_int_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->int_value(), target);
  }

  // optional bool boolean_value = 9;
  if (has_boolean_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->boolean_value(), target);
  }

  // optional uint64 total_time = 10;
  if (has_total_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->total_time(), target);
  }

  // repeated .mozc.usage_stats.Stats.VirtualKeyboardStats virtual_keyboard_stats = 11;
  for (unsigned int i = 0, n = this->virtual_keyboard_stats_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, this->virtual_keyboard_stats(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mozc.usage_stats.Stats)
  return target;
}

int Stats::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:mozc.usage_stats.Stats)
  int total_size = 0;

  if (has_name()) {
    // required string name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  if (has_type()) {
    // required .mozc.usage_stats.Stats.Type type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  return total_size;
}
int Stats::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:mozc.usage_stats.Stats)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());

    // required .mozc.usage_stats.Stats.Type type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[2 / 32] & 252u) {
    // optional uint32 count = 3;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

    // optional uint64 total_time = 10;
    if (has_total_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->total_time());
    }

    // optional uint32 num_timings = 4;
    if (has_num_timings()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_timings());
    }

    // optional uint32 avg_time = 5;
    if (has_avg_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->avg_time());
    }

    // optional uint32 min_time = 6;
    if (has_min_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->min_time());
    }

    // optional uint32 max_time = 7;
    if (has_max_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_time());
    }

  }
  if (_has_bits_[8 / 32] & 768u) {
    // optional int32 int_value = 8;
    if (has_int_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->int_value());
    }

    // optional bool boolean_value = 9;
    if (has_boolean_value()) {
      total_size += 1 + 1;
    }

  }
  // repeated .mozc.usage_stats.Stats.VirtualKeyboardStats virtual_keyboard_stats = 11;
  total_size += 1 * this->virtual_keyboard_stats_size();
  for (int i = 0; i < this->virtual_keyboard_stats_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->virtual_keyboard_stats(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Stats::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mozc.usage_stats.Stats)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Stats* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Stats>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mozc.usage_stats.Stats)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mozc.usage_stats.Stats)
    MergeFrom(*source);
  }
}

void Stats::MergeFrom(const Stats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mozc.usage_stats.Stats)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  virtual_keyboard_stats_.MergeFrom(from.virtual_keyboard_stats_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_total_time()) {
      set_total_time(from.total_time());
    }
    if (from.has_num_timings()) {
      set_num_timings(from.num_timings());
    }
    if (from.has_avg_time()) {
      set_avg_time(from.avg_time());
    }
    if (from.has_min_time()) {
      set_min_time(from.min_time());
    }
    if (from.has_max_time()) {
      set_max_time(from.max_time());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_int_value()) {
      set_int_value(from.int_value());
    }
    if (from.has_boolean_value()) {
      set_boolean_value(from.boolean_value());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Stats::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mozc.usage_stats.Stats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Stats::CopyFrom(const Stats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mozc.usage_stats.Stats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Stats::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Stats::Swap(Stats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Stats::InternalSwap(Stats* other) {
  name_.Swap(&other->name_);
  std::swap(type_, other->type_);
  std::swap(count_, other->count_);
  std::swap(total_time_, other->total_time_);
  std::swap(num_timings_, other->num_timings_);
  std::swap(avg_time_, other->avg_time_);
  std::swap(min_time_, other->min_time_);
  std::swap(max_time_, other->max_time_);
  std::swap(int_value_, other->int_value_);
  std::swap(boolean_value_, other->boolean_value_);
  virtual_keyboard_stats_.UnsafeArenaSwap(&other->virtual_keyboard_stats_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Stats::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Stats_descriptor_;
  metadata.reflection = Stats_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Stats_DoubleValueStats

// optional uint32 num = 1;
bool Stats_DoubleValueStats::has_num() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Stats_DoubleValueStats::set_has_num() {
  _has_bits_[0] |= 0x00000001u;
}
void Stats_DoubleValueStats::clear_has_num() {
  _has_bits_[0] &= ~0x00000001u;
}
void Stats_DoubleValueStats::clear_num() {
  num_ = 0u;
  clear_has_num();
}
 ::google::protobuf::uint32 Stats_DoubleValueStats::num() const {
  // @@protoc_insertion_point(field_get:mozc.usage_stats.Stats.DoubleValueStats.num)
  return num_;
}
 void Stats_DoubleValueStats::set_num(::google::protobuf::uint32 value) {
  set_has_num();
  num_ = value;
  // @@protoc_insertion_point(field_set:mozc.usage_stats.Stats.DoubleValueStats.num)
}

// optional double total = 2;
bool Stats_DoubleValueStats::has_total() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Stats_DoubleValueStats::set_has_total() {
  _has_bits_[0] |= 0x00000002u;
}
void Stats_DoubleValueStats::clear_has_total() {
  _has_bits_[0] &= ~0x00000002u;
}
void Stats_DoubleValueStats::clear_total() {
  total_ = 0;
  clear_has_total();
}
 double Stats_DoubleValueStats::total() const {
  // @@protoc_insertion_point(field_get:mozc.usage_stats.Stats.DoubleValueStats.total)
  return total_;
}
 void Stats_DoubleValueStats::set_total(double value) {
  set_has_total();
  total_ = value;
  // @@protoc_insertion_point(field_set:mozc.usage_stats.Stats.DoubleValueStats.total)
}

// optional double square_total = 3;
bool Stats_DoubleValueStats::has_square_total() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Stats_DoubleValueStats::set_has_square_total() {
  _has_bits_[0] |= 0x00000004u;
}
void Stats_DoubleValueStats::clear_has_square_total() {
  _has_bits_[0] &= ~0x00000004u;
}
void Stats_DoubleValueStats::clear_square_total() {
  square_total_ = 0;
  clear_has_square_total();
}
 double Stats_DoubleValueStats::square_total() const {
  // @@protoc_insertion_point(field_get:mozc.usage_stats.Stats.DoubleValueStats.square_total)
  return square_total_;
}
 void Stats_DoubleValueStats::set_square_total(double value) {
  set_has_square_total();
  square_total_ = value;
  // @@protoc_insertion_point(field_set:mozc.usage_stats.Stats.DoubleValueStats.square_total)
}

// -------------------------------------------------------------------

// Stats_TouchEventStats

// optional uint32 source_id = 1;
bool Stats_TouchEventStats::has_source_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Stats_TouchEventStats::set_has_source_id() {
  _has_bits_[0] |= 0x00000001u;
}
void Stats_TouchEventStats::clear_has_source_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void Stats_TouchEventStats::clear_source_id() {
  source_id_ = 0u;
  clear_has_source_id();
}
 ::google::protobuf::uint32 Stats_TouchEventStats::source_id() const {
  // @@protoc_insertion_point(field_get:mozc.usage_stats.Stats.TouchEventStats.source_id)
  return source_id_;
}
 void Stats_TouchEventStats::set_source_id(::google::protobuf::uint32 value) {
  set_has_source_id();
  source_id_ = value;
  // @@protoc_insertion_point(field_set:mozc.usage_stats.Stats.TouchEventStats.source_id)
}

// optional .mozc.usage_stats.Stats.DoubleValueStats start_x_stats = 2;
bool Stats_TouchEventStats::has_start_x_stats() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Stats_TouchEventStats::set_has_start_x_stats() {
  _has_bits_[0] |= 0x00000002u;
}
void Stats_TouchEventStats::clear_has_start_x_stats() {
  _has_bits_[0] &= ~0x00000002u;
}
void Stats_TouchEventStats::clear_start_x_stats() {
  if (start_x_stats_ != NULL) start_x_stats_->::mozc::usage_stats::Stats_DoubleValueStats::Clear();
  clear_has_start_x_stats();
}
const ::mozc::usage_stats::Stats_DoubleValueStats& Stats_TouchEventStats::start_x_stats() const {
  // @@protoc_insertion_point(field_get:mozc.usage_stats.Stats.TouchEventStats.start_x_stats)
  return start_x_stats_ != NULL ? *start_x_stats_ : *default_instance_->start_x_stats_;
}
::mozc::usage_stats::Stats_DoubleValueStats* Stats_TouchEventStats::mutable_start_x_stats() {
  set_has_start_x_stats();
  if (start_x_stats_ == NULL) {
    start_x_stats_ = new ::mozc::usage_stats::Stats_DoubleValueStats;
  }
  // @@protoc_insertion_point(field_mutable:mozc.usage_stats.Stats.TouchEventStats.start_x_stats)
  return start_x_stats_;
}
::mozc::usage_stats::Stats_DoubleValueStats* Stats_TouchEventStats::release_start_x_stats() {
  // @@protoc_insertion_point(field_release:mozc.usage_stats.Stats.TouchEventStats.start_x_stats)
  clear_has_start_x_stats();
  ::mozc::usage_stats::Stats_DoubleValueStats* temp = start_x_stats_;
  start_x_stats_ = NULL;
  return temp;
}
void Stats_TouchEventStats::set_allocated_start_x_stats(::mozc::usage_stats::Stats_DoubleValueStats* start_x_stats) {
  delete start_x_stats_;
  start_x_stats_ = start_x_stats;
  if (start_x_stats) {
    set_has_start_x_stats();
  } else {
    clear_has_start_x_stats();
  }
  // @@protoc_insertion_point(field_set_allocated:mozc.usage_stats.Stats.TouchEventStats.start_x_stats)
}

// optional .mozc.usage_stats.Stats.DoubleValueStats start_y_stats = 3;
bool Stats_TouchEventStats::has_start_y_stats() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Stats_TouchEventStats::set_has_start_y_stats() {
  _has_bits_[0] |= 0x00000004u;
}
void Stats_TouchEventStats::clear_has_start_y_stats() {
  _has_bits_[0] &= ~0x00000004u;
}
void Stats_TouchEventStats::clear_start_y_stats() {
  if (start_y_stats_ != NULL) start_y_stats_->::mozc::usage_stats::Stats_DoubleValueStats::Clear();
  clear_has_start_y_stats();
}
const ::mozc::usage_stats::Stats_DoubleValueStats& Stats_TouchEventStats::start_y_stats() const {
  // @@protoc_insertion_point(field_get:mozc.usage_stats.Stats.TouchEventStats.start_y_stats)
  return start_y_stats_ != NULL ? *start_y_stats_ : *default_instance_->start_y_stats_;
}
::mozc::usage_stats::Stats_DoubleValueStats* Stats_TouchEventStats::mutable_start_y_stats() {
  set_has_start_y_stats();
  if (start_y_stats_ == NULL) {
    start_y_stats_ = new ::mozc::usage_stats::Stats_DoubleValueStats;
  }
  // @@protoc_insertion_point(field_mutable:mozc.usage_stats.Stats.TouchEventStats.start_y_stats)
  return start_y_stats_;
}
::mozc::usage_stats::Stats_DoubleValueStats* Stats_TouchEventStats::release_start_y_stats() {
  // @@protoc_insertion_point(field_release:mozc.usage_stats.Stats.TouchEventStats.start_y_stats)
  clear_has_start_y_stats();
  ::mozc::usage_stats::Stats_DoubleValueStats* temp = start_y_stats_;
  start_y_stats_ = NULL;
  return temp;
}
void Stats_TouchEventStats::set_allocated_start_y_stats(::mozc::usage_stats::Stats_DoubleValueStats* start_y_stats) {
  delete start_y_stats_;
  start_y_stats_ = start_y_stats;
  if (start_y_stats) {
    set_has_start_y_stats();
  } else {
    clear_has_start_y_stats();
  }
  // @@protoc_insertion_point(field_set_allocated:mozc.usage_stats.Stats.TouchEventStats.start_y_stats)
}

// optional .mozc.usage_stats.Stats.DoubleValueStats direction_x_stats = 4;
bool Stats_TouchEventStats::has_direction_x_stats() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Stats_TouchEventStats::set_has_direction_x_stats() {
  _has_bits_[0] |= 0x00000008u;
}
void Stats_TouchEventStats::clear_has_direction_x_stats() {
  _has_bits_[0] &= ~0x00000008u;
}
void Stats_TouchEventStats::clear_direction_x_stats() {
  if (direction_x_stats_ != NULL) direction_x_stats_->::mozc::usage_stats::Stats_DoubleValueStats::Clear();
  clear_has_direction_x_stats();
}
const ::mozc::usage_stats::Stats_DoubleValueStats& Stats_TouchEventStats::direction_x_stats() const {
  // @@protoc_insertion_point(field_get:mozc.usage_stats.Stats.TouchEventStats.direction_x_stats)
  return direction_x_stats_ != NULL ? *direction_x_stats_ : *default_instance_->direction_x_stats_;
}
::mozc::usage_stats::Stats_DoubleValueStats* Stats_TouchEventStats::mutable_direction_x_stats() {
  set_has_direction_x_stats();
  if (direction_x_stats_ == NULL) {
    direction_x_stats_ = new ::mozc::usage_stats::Stats_DoubleValueStats;
  }
  // @@protoc_insertion_point(field_mutable:mozc.usage_stats.Stats.TouchEventStats.direction_x_stats)
  return direction_x_stats_;
}
::mozc::usage_stats::Stats_DoubleValueStats* Stats_TouchEventStats::release_direction_x_stats() {
  // @@protoc_insertion_point(field_release:mozc.usage_stats.Stats.TouchEventStats.direction_x_stats)
  clear_has_direction_x_stats();
  ::mozc::usage_stats::Stats_DoubleValueStats* temp = direction_x_stats_;
  direction_x_stats_ = NULL;
  return temp;
}
void Stats_TouchEventStats::set_allocated_direction_x_stats(::mozc::usage_stats::Stats_DoubleValueStats* direction_x_stats) {
  delete direction_x_stats_;
  direction_x_stats_ = direction_x_stats;
  if (direction_x_stats) {
    set_has_direction_x_stats();
  } else {
    clear_has_direction_x_stats();
  }
  // @@protoc_insertion_point(field_set_allocated:mozc.usage_stats.Stats.TouchEventStats.direction_x_stats)
}

// optional .mozc.usage_stats.Stats.DoubleValueStats direction_y_stats = 5;
bool Stats_TouchEventStats::has_direction_y_stats() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Stats_TouchEventStats::set_has_direction_y_stats() {
  _has_bits_[0] |= 0x00000010u;
}
void Stats_TouchEventStats::clear_has_direction_y_stats() {
  _has_bits_[0] &= ~0x00000010u;
}
void Stats_TouchEventStats::clear_direction_y_stats() {
  if (direction_y_stats_ != NULL) direction_y_stats_->::mozc::usage_stats::Stats_DoubleValueStats::Clear();
  clear_has_direction_y_stats();
}
const ::mozc::usage_stats::Stats_DoubleValueStats& Stats_TouchEventStats::direction_y_stats() const {
  // @@protoc_insertion_point(field_get:mozc.usage_stats.Stats.TouchEventStats.direction_y_stats)
  return direction_y_stats_ != NULL ? *direction_y_stats_ : *default_instance_->direction_y_stats_;
}
::mozc::usage_stats::Stats_DoubleValueStats* Stats_TouchEventStats::mutable_direction_y_stats() {
  set_has_direction_y_stats();
  if (direction_y_stats_ == NULL) {
    direction_y_stats_ = new ::mozc::usage_stats::Stats_DoubleValueStats;
  }
  // @@protoc_insertion_point(field_mutable:mozc.usage_stats.Stats.TouchEventStats.direction_y_stats)
  return direction_y_stats_;
}
::mozc::usage_stats::Stats_DoubleValueStats* Stats_TouchEventStats::release_direction_y_stats() {
  // @@protoc_insertion_point(field_release:mozc.usage_stats.Stats.TouchEventStats.direction_y_stats)
  clear_has_direction_y_stats();
  ::mozc::usage_stats::Stats_DoubleValueStats* temp = direction_y_stats_;
  direction_y_stats_ = NULL;
  return temp;
}
void Stats_TouchEventStats::set_allocated_direction_y_stats(::mozc::usage_stats::Stats_DoubleValueStats* direction_y_stats) {
  delete direction_y_stats_;
  direction_y_stats_ = direction_y_stats;
  if (direction_y_stats) {
    set_has_direction_y_stats();
  } else {
    clear_has_direction_y_stats();
  }
  // @@protoc_insertion_point(field_set_allocated:mozc.usage_stats.Stats.TouchEventStats.direction_y_stats)
}

// optional .mozc.usage_stats.Stats.DoubleValueStats time_length_stats = 6;
bool Stats_TouchEventStats::has_time_length_stats() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Stats_TouchEventStats::set_has_time_length_stats() {
  _has_bits_[0] |= 0x00000020u;
}
void Stats_TouchEventStats::clear_has_time_length_stats() {
  _has_bits_[0] &= ~0x00000020u;
}
void Stats_TouchEventStats::clear_time_length_stats() {
  if (time_length_stats_ != NULL) time_length_stats_->::mozc::usage_stats::Stats_DoubleValueStats::Clear();
  clear_has_time_length_stats();
}
const ::mozc::usage_stats::Stats_DoubleValueStats& Stats_TouchEventStats::time_length_stats() const {
  // @@protoc_insertion_point(field_get:mozc.usage_stats.Stats.TouchEventStats.time_length_stats)
  return time_length_stats_ != NULL ? *time_length_stats_ : *default_instance_->time_length_stats_;
}
::mozc::usage_stats::Stats_DoubleValueStats* Stats_TouchEventStats::mutable_time_length_stats() {
  set_has_time_length_stats();
  if (time_length_stats_ == NULL) {
    time_length_stats_ = new ::mozc::usage_stats::Stats_DoubleValueStats;
  }
  // @@protoc_insertion_point(field_mutable:mozc.usage_stats.Stats.TouchEventStats.time_length_stats)
  return time_length_stats_;
}
::mozc::usage_stats::Stats_DoubleValueStats* Stats_TouchEventStats::release_time_length_stats() {
  // @@protoc_insertion_point(field_release:mozc.usage_stats.Stats.TouchEventStats.time_length_stats)
  clear_has_time_length_stats();
  ::mozc::usage_stats::Stats_DoubleValueStats* temp = time_length_stats_;
  time_length_stats_ = NULL;
  return temp;
}
void Stats_TouchEventStats::set_allocated_time_length_stats(::mozc::usage_stats::Stats_DoubleValueStats* time_length_stats) {
  delete time_length_stats_;
  time_length_stats_ = time_length_stats;
  if (time_length_stats) {
    set_has_time_length_stats();
  } else {
    clear_has_time_length_stats();
  }
  // @@protoc_insertion_point(field_set_allocated:mozc.usage_stats.Stats.TouchEventStats.time_length_stats)
}

// -------------------------------------------------------------------

// Stats_VirtualKeyboardStats

// optional string keyboard_name = 1;
bool Stats_VirtualKeyboardStats::has_keyboard_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Stats_VirtualKeyboardStats::set_has_keyboard_name() {
  _has_bits_[0] |= 0x00000001u;
}
void Stats_VirtualKeyboardStats::clear_has_keyboard_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void Stats_VirtualKeyboardStats::clear_keyboard_name() {
  keyboard_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_keyboard_name();
}
 const ::std::string& Stats_VirtualKeyboardStats::keyboard_name() const {
  // @@protoc_insertion_point(field_get:mozc.usage_stats.Stats.VirtualKeyboardStats.keyboard_name)
  return keyboard_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Stats_VirtualKeyboardStats::set_keyboard_name(const ::std::string& value) {
  set_has_keyboard_name();
  keyboard_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mozc.usage_stats.Stats.VirtualKeyboardStats.keyboard_name)
}
 void Stats_VirtualKeyboardStats::set_keyboard_name(const char* value) {
  set_has_keyboard_name();
  keyboard_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mozc.usage_stats.Stats.VirtualKeyboardStats.keyboard_name)
}
 void Stats_VirtualKeyboardStats::set_keyboard_name(const char* value, size_t size) {
  set_has_keyboard_name();
  keyboard_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mozc.usage_stats.Stats.VirtualKeyboardStats.keyboard_name)
}
 ::std::string* Stats_VirtualKeyboardStats::mutable_keyboard_name() {
  set_has_keyboard_name();
  // @@protoc_insertion_point(field_mutable:mozc.usage_stats.Stats.VirtualKeyboardStats.keyboard_name)
  return keyboard_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Stats_VirtualKeyboardStats::release_keyboard_name() {
  // @@protoc_insertion_point(field_release:mozc.usage_stats.Stats.VirtualKeyboardStats.keyboard_name)
  clear_has_keyboard_name();
  return keyboard_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Stats_VirtualKeyboardStats::set_allocated_keyboard_name(::std::string* keyboard_name) {
  if (keyboard_name != NULL) {
    set_has_keyboard_name();
  } else {
    clear_has_keyboard_name();
  }
  keyboard_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), keyboard_name);
  // @@protoc_insertion_point(field_set_allocated:mozc.usage_stats.Stats.VirtualKeyboardStats.keyboard_name)
}

// repeated .mozc.usage_stats.Stats.TouchEventStats touch_event_stats = 2;
int Stats_VirtualKeyboardStats::touch_event_stats_size() const {
  return touch_event_stats_.size();
}
void Stats_VirtualKeyboardStats::clear_touch_event_stats() {
  touch_event_stats_.Clear();
}
const ::mozc::usage_stats::Stats_TouchEventStats& Stats_VirtualKeyboardStats::touch_event_stats(int index) const {
  // @@protoc_insertion_point(field_get:mozc.usage_stats.Stats.VirtualKeyboardStats.touch_event_stats)
  return touch_event_stats_.Get(index);
}
::mozc::usage_stats::Stats_TouchEventStats* Stats_VirtualKeyboardStats::mutable_touch_event_stats(int index) {
  // @@protoc_insertion_point(field_mutable:mozc.usage_stats.Stats.VirtualKeyboardStats.touch_event_stats)
  return touch_event_stats_.Mutable(index);
}
::mozc::usage_stats::Stats_TouchEventStats* Stats_VirtualKeyboardStats::add_touch_event_stats() {
  // @@protoc_insertion_point(field_add:mozc.usage_stats.Stats.VirtualKeyboardStats.touch_event_stats)
  return touch_event_stats_.Add();
}
::google::protobuf::RepeatedPtrField< ::mozc::usage_stats::Stats_TouchEventStats >*
Stats_VirtualKeyboardStats::mutable_touch_event_stats() {
  // @@protoc_insertion_point(field_mutable_list:mozc.usage_stats.Stats.VirtualKeyboardStats.touch_event_stats)
  return &touch_event_stats_;
}
const ::google::protobuf::RepeatedPtrField< ::mozc::usage_stats::Stats_TouchEventStats >&
Stats_VirtualKeyboardStats::touch_event_stats() const {
  // @@protoc_insertion_point(field_list:mozc.usage_stats.Stats.VirtualKeyboardStats.touch_event_stats)
  return touch_event_stats_;
}

// -------------------------------------------------------------------

// Stats

// required string name = 1;
bool Stats::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Stats::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void Stats::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void Stats::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& Stats::name() const {
  // @@protoc_insertion_point(field_get:mozc.usage_stats.Stats.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Stats::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mozc.usage_stats.Stats.name)
}
 void Stats::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mozc.usage_stats.Stats.name)
}
 void Stats::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mozc.usage_stats.Stats.name)
}
 ::std::string* Stats::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:mozc.usage_stats.Stats.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Stats::release_name() {
  // @@protoc_insertion_point(field_release:mozc.usage_stats.Stats.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Stats::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:mozc.usage_stats.Stats.name)
}

// required .mozc.usage_stats.Stats.Type type = 2;
bool Stats::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Stats::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
void Stats::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void Stats::clear_type() {
  type_ = 0;
  clear_has_type();
}
 ::mozc::usage_stats::Stats_Type Stats::type() const {
  // @@protoc_insertion_point(field_get:mozc.usage_stats.Stats.type)
  return static_cast< ::mozc::usage_stats::Stats_Type >(type_);
}
 void Stats::set_type(::mozc::usage_stats::Stats_Type value) {
  assert(::mozc::usage_stats::Stats_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:mozc.usage_stats.Stats.type)
}

// optional uint32 count = 3;
bool Stats::has_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Stats::set_has_count() {
  _has_bits_[0] |= 0x00000004u;
}
void Stats::clear_has_count() {
  _has_bits_[0] &= ~0x00000004u;
}
void Stats::clear_count() {
  count_ = 0u;
  clear_has_count();
}
 ::google::protobuf::uint32 Stats::count() const {
  // @@protoc_insertion_point(field_get:mozc.usage_stats.Stats.count)
  return count_;
}
 void Stats::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:mozc.usage_stats.Stats.count)
}

// optional uint64 total_time = 10;
bool Stats::has_total_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Stats::set_has_total_time() {
  _has_bits_[0] |= 0x00000008u;
}
void Stats::clear_has_total_time() {
  _has_bits_[0] &= ~0x00000008u;
}
void Stats::clear_total_time() {
  total_time_ = GOOGLE_ULONGLONG(0);
  clear_has_total_time();
}
 ::google::protobuf::uint64 Stats::total_time() const {
  // @@protoc_insertion_point(field_get:mozc.usage_stats.Stats.total_time)
  return total_time_;
}
 void Stats::set_total_time(::google::protobuf::uint64 value) {
  set_has_total_time();
  total_time_ = value;
  // @@protoc_insertion_point(field_set:mozc.usage_stats.Stats.total_time)
}

// optional uint32 num_timings = 4;
bool Stats::has_num_timings() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Stats::set_has_num_timings() {
  _has_bits_[0] |= 0x00000010u;
}
void Stats::clear_has_num_timings() {
  _has_bits_[0] &= ~0x00000010u;
}
void Stats::clear_num_timings() {
  num_timings_ = 0u;
  clear_has_num_timings();
}
 ::google::protobuf::uint32 Stats::num_timings() const {
  // @@protoc_insertion_point(field_get:mozc.usage_stats.Stats.num_timings)
  return num_timings_;
}
 void Stats::set_num_timings(::google::protobuf::uint32 value) {
  set_has_num_timings();
  num_timings_ = value;
  // @@protoc_insertion_point(field_set:mozc.usage_stats.Stats.num_timings)
}

// optional uint32 avg_time = 5;
bool Stats::has_avg_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Stats::set_has_avg_time() {
  _has_bits_[0] |= 0x00000020u;
}
void Stats::clear_has_avg_time() {
  _has_bits_[0] &= ~0x00000020u;
}
void Stats::clear_avg_time() {
  avg_time_ = 0u;
  clear_has_avg_time();
}
 ::google::protobuf::uint32 Stats::avg_time() const {
  // @@protoc_insertion_point(field_get:mozc.usage_stats.Stats.avg_time)
  return avg_time_;
}
 void Stats::set_avg_time(::google::protobuf::uint32 value) {
  set_has_avg_time();
  avg_time_ = value;
  // @@protoc_insertion_point(field_set:mozc.usage_stats.Stats.avg_time)
}

// optional uint32 min_time = 6;
bool Stats::has_min_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Stats::set_has_min_time() {
  _has_bits_[0] |= 0x00000040u;
}
void Stats::clear_has_min_time() {
  _has_bits_[0] &= ~0x00000040u;
}
void Stats::clear_min_time() {
  min_time_ = 0u;
  clear_has_min_time();
}
 ::google::protobuf::uint32 Stats::min_time() const {
  // @@protoc_insertion_point(field_get:mozc.usage_stats.Stats.min_time)
  return min_time_;
}
 void Stats::set_min_time(::google::protobuf::uint32 value) {
  set_has_min_time();
  min_time_ = value;
  // @@protoc_insertion_point(field_set:mozc.usage_stats.Stats.min_time)
}

// optional uint32 max_time = 7;
bool Stats::has_max_time() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Stats::set_has_max_time() {
  _has_bits_[0] |= 0x00000080u;
}
void Stats::clear_has_max_time() {
  _has_bits_[0] &= ~0x00000080u;
}
void Stats::clear_max_time() {
  max_time_ = 0u;
  clear_has_max_time();
}
 ::google::protobuf::uint32 Stats::max_time() const {
  // @@protoc_insertion_point(field_get:mozc.usage_stats.Stats.max_time)
  return max_time_;
}
 void Stats::set_max_time(::google::protobuf::uint32 value) {
  set_has_max_time();
  max_time_ = value;
  // @@protoc_insertion_point(field_set:mozc.usage_stats.Stats.max_time)
}

// optional int32 int_value = 8;
bool Stats::has_int_value() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Stats::set_has_int_value() {
  _has_bits_[0] |= 0x00000100u;
}
void Stats::clear_has_int_value() {
  _has_bits_[0] &= ~0x00000100u;
}
void Stats::clear_int_value() {
  int_value_ = 0;
  clear_has_int_value();
}
 ::google::protobuf::int32 Stats::int_value() const {
  // @@protoc_insertion_point(field_get:mozc.usage_stats.Stats.int_value)
  return int_value_;
}
 void Stats::set_int_value(::google::protobuf::int32 value) {
  set_has_int_value();
  int_value_ = value;
  // @@protoc_insertion_point(field_set:mozc.usage_stats.Stats.int_value)
}

// optional bool boolean_value = 9;
bool Stats::has_boolean_value() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void Stats::set_has_boolean_value() {
  _has_bits_[0] |= 0x00000200u;
}
void Stats::clear_has_boolean_value() {
  _has_bits_[0] &= ~0x00000200u;
}
void Stats::clear_boolean_value() {
  boolean_value_ = false;
  clear_has_boolean_value();
}
 bool Stats::boolean_value() const {
  // @@protoc_insertion_point(field_get:mozc.usage_stats.Stats.boolean_value)
  return boolean_value_;
}
 void Stats::set_boolean_value(bool value) {
  set_has_boolean_value();
  boolean_value_ = value;
  // @@protoc_insertion_point(field_set:mozc.usage_stats.Stats.boolean_value)
}

// repeated .mozc.usage_stats.Stats.VirtualKeyboardStats virtual_keyboard_stats = 11;
int Stats::virtual_keyboard_stats_size() const {
  return virtual_keyboard_stats_.size();
}
void Stats::clear_virtual_keyboard_stats() {
  virtual_keyboard_stats_.Clear();
}
const ::mozc::usage_stats::Stats_VirtualKeyboardStats& Stats::virtual_keyboard_stats(int index) const {
  // @@protoc_insertion_point(field_get:mozc.usage_stats.Stats.virtual_keyboard_stats)
  return virtual_keyboard_stats_.Get(index);
}
::mozc::usage_stats::Stats_VirtualKeyboardStats* Stats::mutable_virtual_keyboard_stats(int index) {
  // @@protoc_insertion_point(field_mutable:mozc.usage_stats.Stats.virtual_keyboard_stats)
  return virtual_keyboard_stats_.Mutable(index);
}
::mozc::usage_stats::Stats_VirtualKeyboardStats* Stats::add_virtual_keyboard_stats() {
  // @@protoc_insertion_point(field_add:mozc.usage_stats.Stats.virtual_keyboard_stats)
  return virtual_keyboard_stats_.Add();
}
::google::protobuf::RepeatedPtrField< ::mozc::usage_stats::Stats_VirtualKeyboardStats >*
Stats::mutable_virtual_keyboard_stats() {
  // @@protoc_insertion_point(field_mutable_list:mozc.usage_stats.Stats.virtual_keyboard_stats)
  return &virtual_keyboard_stats_;
}
const ::google::protobuf::RepeatedPtrField< ::mozc::usage_stats::Stats_VirtualKeyboardStats >&
Stats::virtual_keyboard_stats() const {
  // @@protoc_insertion_point(field_list:mozc.usage_stats.Stats.virtual_keyboard_stats)
  return virtual_keyboard_stats_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace usage_stats
}  // namespace mozc

// @@protoc_insertion_point(global_scope)
